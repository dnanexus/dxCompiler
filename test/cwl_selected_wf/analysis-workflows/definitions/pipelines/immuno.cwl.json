{
    "$graph": [
        {
            "class": "Workflow",
            "label": "exome alignment with qc",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "type": "record",
                            "name": "#labelled_file.yml/labelled_file",
                            "label": "a file with a label",
                            "fields": [
                                {
                                    "type": "File",
                                    "name": "#labelled_file.yml/labelled_file/file"
                                },
                                {
                                    "type": "string",
                                    "name": "#labelled_file.yml/labelled_file/label"
                                }
                            ]
                        },
                        {
                            "type": "record",
                            "name": "#sequence_data.yml/sequence_data",
                            "label": "sequence data with readgroup information",
                            "fields": [
                                {
                                    "type": "string",
                                    "name": "#sequence_data.yml/sequence_data/readgroup"
                                },
                                {
                                    "type": [
                                        {
                                            "type": "record",
                                            "name": "#sequence_data.yml/sequence_data/sequence/bam",
                                            "fields": [
                                                {
                                                    "type": "File",
                                                    "name": "#sequence_data.yml/sequence_data/sequence/bam/bam"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "record",
                                            "name": "#sequence_data.yml/sequence_data/sequence/fastqs",
                                            "fields": [
                                                {
                                                    "type": "File",
                                                    "name": "#sequence_data.yml/sequence_data/sequence/fastqs/fastq1"
                                                },
                                                {
                                                    "type": "File",
                                                    "name": "#sequence_data.yml/sequence_data/sequence/fastqs/fastq2"
                                                }
                                            ]
                                        }
                                    ],
                                    "name": "#sequence_data.yml/sequence_data/sequence"
                                }
                            ]
                        },
                        {
                            "type": "record",
                            "name": "#trimming_options.yml/trimming_options",
                            "label": "trimming adapter file and parameters",
                            "fields": [
                                {
                                    "type": "File",
                                    "doc": "Fasta file with adapters for removal that may contain N.",
                                    "name": "#trimming_options.yml/trimming_options/adapters"
                                },
                                {
                                    "type": "int",
                                    "doc": "Minimum overlap for removal without pair overlap.",
                                    "name": "#trimming_options.yml/trimming_options/min_overlap"
                                }
                            ]
                        }
                    ]
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#alignment_exome.cwl/bait_intervals"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#alignment_exome.cwl/bqsr_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.",
                    "id": "#alignment_exome.cwl/bqsr_known_sites"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#alignment_exome.cwl/final_name"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#alignment_exome.cwl/omni_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#alignment_exome.cwl/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#alignment_exome.cwl/per_target_intervals"
                },
                {
                    "type": "string",
                    "id": "#alignment_exome.cwl/picard_metric_accumulation_level"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#alignment_exome.cwl/qc_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#alignment_exome.cwl/qc_minimum_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        },
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "id": "#alignment_exome.cwl/reference"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "sequence: sequencing data and readgroup information",
                    "doc": "sequence represents the sequencing data as either FASTQs or BAMs with accompanying\nreadgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#alignment_exome.cwl/sequence"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#alignment_exome.cwl/summary_intervals"
                },
                {
                    "type": "File",
                    "id": "#alignment_exome.cwl/target_intervals"
                },
                {
                    "type": [
                        "#trimming_options.yml/trimming_options",
                        "null"
                    ],
                    "id": "#alignment_exome.cwl/trimming"
                }
            ],
            "steps": [
                {
                    "run": "#sequence_to_bqsr.cwl",
                    "in": [
                        {
                            "source": "#alignment_exome.cwl/bqsr_intervals",
                            "id": "#alignment_exome.cwl/alignment/bqsr_intervals"
                        },
                        {
                            "source": "#alignment_exome.cwl/bqsr_known_sites",
                            "id": "#alignment_exome.cwl/alignment/bqsr_known_sites"
                        },
                        {
                            "source": "#alignment_exome.cwl/final_name",
                            "id": "#alignment_exome.cwl/alignment/final_name"
                        },
                        {
                            "source": "#alignment_exome.cwl/reference",
                            "id": "#alignment_exome.cwl/alignment/reference"
                        },
                        {
                            "source": "#alignment_exome.cwl/trimming",
                            "id": "#alignment_exome.cwl/alignment/trimming"
                        },
                        {
                            "source": "#alignment_exome.cwl/sequence",
                            "id": "#alignment_exome.cwl/alignment/unaligned"
                        }
                    ],
                    "out": [
                        "#alignment_exome.cwl/alignment/final_bam",
                        "#alignment_exome.cwl/alignment/mark_duplicates_metrics_file"
                    ],
                    "id": "#alignment_exome.cwl/alignment"
                },
                {
                    "run": "#qc_exome.cwl",
                    "in": [
                        {
                            "source": "#alignment_exome.cwl/bait_intervals",
                            "id": "#alignment_exome.cwl/qc/bait_intervals"
                        },
                        {
                            "source": "#alignment_exome.cwl/alignment/final_bam",
                            "id": "#alignment_exome.cwl/qc/bam"
                        },
                        {
                            "source": "#alignment_exome.cwl/qc_minimum_base_quality",
                            "id": "#alignment_exome.cwl/qc/minimum_base_quality"
                        },
                        {
                            "source": "#alignment_exome.cwl/qc_minimum_mapping_quality",
                            "id": "#alignment_exome.cwl/qc/minimum_mapping_quality"
                        },
                        {
                            "source": "#alignment_exome.cwl/omni_vcf",
                            "id": "#alignment_exome.cwl/qc/omni_vcf"
                        },
                        {
                            "source": "#alignment_exome.cwl/per_base_intervals",
                            "id": "#alignment_exome.cwl/qc/per_base_intervals"
                        },
                        {
                            "source": "#alignment_exome.cwl/per_target_intervals",
                            "id": "#alignment_exome.cwl/qc/per_target_intervals"
                        },
                        {
                            "source": "#alignment_exome.cwl/picard_metric_accumulation_level",
                            "id": "#alignment_exome.cwl/qc/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#alignment_exome.cwl/reference",
                            "id": "#alignment_exome.cwl/qc/reference"
                        },
                        {
                            "source": "#alignment_exome.cwl/summary_intervals",
                            "id": "#alignment_exome.cwl/qc/summary_intervals"
                        },
                        {
                            "source": "#alignment_exome.cwl/target_intervals",
                            "id": "#alignment_exome.cwl/qc/target_intervals"
                        }
                    ],
                    "out": [
                        "#alignment_exome.cwl/qc/insert_size_metrics",
                        "#alignment_exome.cwl/qc/insert_size_histogram",
                        "#alignment_exome.cwl/qc/alignment_summary_metrics",
                        "#alignment_exome.cwl/qc/hs_metrics",
                        "#alignment_exome.cwl/qc/per_target_coverage_metrics",
                        "#alignment_exome.cwl/qc/per_target_hs_metrics",
                        "#alignment_exome.cwl/qc/per_base_coverage_metrics",
                        "#alignment_exome.cwl/qc/per_base_hs_metrics",
                        "#alignment_exome.cwl/qc/summary_hs_metrics",
                        "#alignment_exome.cwl/qc/flagstats",
                        "#alignment_exome.cwl/qc/verify_bam_id_metrics",
                        "#alignment_exome.cwl/qc/verify_bam_id_depth"
                    ],
                    "id": "#alignment_exome.cwl/qc"
                }
            ],
            "id": "#alignment_exome.cwl",
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/alignment_summary_metrics",
                    "id": "#alignment_exome.cwl/alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/alignment/final_bam",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#alignment_exome.cwl/bam"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/flagstats",
                    "id": "#alignment_exome.cwl/flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/hs_metrics",
                    "id": "#alignment_exome.cwl/hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/insert_size_histogram",
                    "id": "#alignment_exome.cwl/insert_size_histogram"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/insert_size_metrics",
                    "id": "#alignment_exome.cwl/insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/alignment/mark_duplicates_metrics_file",
                    "id": "#alignment_exome.cwl/mark_duplicates_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#alignment_exome.cwl/qc/per_base_coverage_metrics",
                    "id": "#alignment_exome.cwl/per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#alignment_exome.cwl/qc/per_base_hs_metrics",
                    "id": "#alignment_exome.cwl/per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#alignment_exome.cwl/qc/per_target_coverage_metrics",
                    "id": "#alignment_exome.cwl/per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#alignment_exome.cwl/qc/per_target_hs_metrics",
                    "id": "#alignment_exome.cwl/per_target_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#alignment_exome.cwl/qc/summary_hs_metrics",
                    "id": "#alignment_exome.cwl/summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/verify_bam_id_depth",
                    "id": "#alignment_exome.cwl/verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#alignment_exome.cwl/qc/verify_bam_id_metrics",
                    "id": "#alignment_exome.cwl/verify_bam_id_metrics"
                }
            ]
        },
        {
            "class": "Workflow",
            "label": "Detect Variants workflow",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "type": "record",
                            "name": "#vep_custom_annotation.yml/vep_custom_annotation",
                            "label": "custom annotation file to be used by vep",
                            "fields": [
                                {
                                    "type": {
                                        "type": "record",
                                        "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info",
                                        "fields": [
                                            {
                                                "type": "boolean",
                                                "label": "Identify known variants colocated with input variant",
                                                "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/check_existing"
                                            },
                                            {
                                                "type": {
                                                    "type": "enum",
                                                    "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format/format",
                                                    "symbols": [
                                                        "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format/format/bed",
                                                        "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format/format/gff",
                                                        "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format/format/gtf",
                                                        "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format/format/vcf",
                                                        "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format/format/bigwig"
                                                    ],
                                                    "label": "Annotation file type"
                                                },
                                                "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/data_format"
                                            },
                                            {
                                                "type": "File",
                                                "label": "File to be used for annotation, include index file",
                                                "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/file"
                                            },
                                            {
                                                "type": [
                                                    "null",
                                                    "boolean"
                                                ],
                                                "label": "Use this annotation for gnomad filtering?",
                                                "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/gnomad_filter"
                                            },
                                            {
                                                "type": "string",
                                                "label": "Used as key for new VEP annotation",
                                                "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/name"
                                            },
                                            {
                                                "type": [
                                                    "null",
                                                    {
                                                        "type": "array",
                                                        "items": "string"
                                                    }
                                                ],
                                                "label": "List of VCF fields to annotate",
                                                "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation/info/vcf_fields"
                                            }
                                        ]
                                    },
                                    "name": "#vep_custom_annotation.yml/vep_custom_annotation/annotation"
                                },
                                {
                                    "type": "boolean",
                                    "label": "Force report the overlapping coordinates of custom feature instead of based on the exact coordinates",
                                    "name": "#vep_custom_annotation.yml/vep_custom_annotation/force_report_coordinates"
                                },
                                {
                                    "type": [
                                        {
                                            "type": "enum",
                                            "symbols": [
                                                "#vep_custom_annotation.yml/vep_custom_annotation/method/exact",
                                                "#vep_custom_annotation.yml/vep_custom_annotation/method/overlap"
                                            ],
                                            "label": "Require exact or overlap to annotate variants"
                                        }
                                    ],
                                    "name": "#vep_custom_annotation.yml/vep_custom_annotation/method"
                                }
                            ]
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#detect_variants.cwl/annotate_coding_only"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "id": "#detect_variants.cwl/cle_vcf_filter"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "Common mutations in cancer that will be genotyped and passed through into the merged VCF if they have even low-level evidence of a mutation (by default, marked with filter DOCM_ONLY)",
                    "id": "#detect_variants.cwl/docm_vcf"
                },
                {
                    "type": "boolean",
                    "default": true,
                    "doc": "Determines whether variants found only via genotyping of DOCM sites will be filtered (as DOCM_ONLY) or passed through as variant calls",
                    "id": "#detect_variants.cwl/filter_docm_variants"
                },
                {
                    "type": "float",
                    "default": 0.001,
                    "id": "#detect_variants.cwl/filter_gnomADe_maximum_population_allele_frequency"
                },
                {
                    "type": "float",
                    "default": 0.15,
                    "id": "#detect_variants.cwl/filter_mapq0_threshold"
                },
                {
                    "type": "int",
                    "default": 1,
                    "id": "#detect_variants.cwl/filter_minimum_depth"
                },
                {
                    "type": "float",
                    "default": 0,
                    "doc": "Sets the fraction of tumor present in the normal sample (range 0 to 1), used in the somatic llr filter. Useful for heavily contaminated adjacent normals. Range is 0 to 1",
                    "id": "#detect_variants.cwl/filter_somatic_llr_normal_contamination_rate"
                },
                {
                    "type": "float",
                    "default": 5,
                    "doc": "Sets the stringency (log-likelihood ratio) used to filter out non-somatic variants.  Typical values are 10=high stringency, 5=normal, 3=low stringency. Low stringency may be desirable when read depths are low (as in WGS) or when tumor samples are impure.",
                    "id": "#detect_variants.cwl/filter_somatic_llr_threshold"
                },
                {
                    "type": "float",
                    "default": 1,
                    "doc": "Sets the purity of the tumor used in the somatic llr filter, used to remove non-somatic variants. Probably only needs to be adjusted for low-purity (< 50%).  Range is 0 to 1",
                    "id": "#detect_variants.cwl/filter_somatic_llr_tumor_purity"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/normal_bam"
                },
                {
                    "type": "string",
                    "id": "#detect_variants.cwl/normal_sample_name"
                },
                {
                    "type": "int",
                    "default": 400,
                    "id": "#detect_variants.cwl/pindel_insert_size"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#detect_variants.cwl/readcount_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#detect_variants.cwl/readcount_minimum_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/reference"
                },
                {
                    "type": "File",
                    "label": "roi_intervals: regions of interest in which variants will be called",
                    "doc": "roi_intervals is a list of regions (in interval_list format) within which to call somatic variants",
                    "id": "#detect_variants.cwl/roi_intervals"
                },
                {
                    "type": "int",
                    "default": 50,
                    "doc": "scatters each supported variant detector (varscan, pindel, mutect) into this many parallel jobs",
                    "id": "#detect_variants.cwl/scatter_count"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#detect_variants.cwl/strelka_cpu_reserved"
                },
                {
                    "type": "boolean",
                    "id": "#detect_variants.cwl/strelka_exome_mode"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#detect_variants.cwl/synonyms_file"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#detect_variants.cwl/tumor_sample_name"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "An optional VCF with variants that will be flagged as 'VALIDATED' if found in this pipeline's main output VCF",
                    "id": "#detect_variants.cwl/validated_variants"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "CHROM",
                        "POS",
                        "ID",
                        "REF",
                        "ALT",
                        "set",
                        "AC",
                        "AF"
                    ],
                    "id": "#detect_variants.cwl/variants_to_table_fields"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "GT",
                        "AD"
                    ],
                    "id": "#detect_variants.cwl/variants_to_table_genotype_fields"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#detect_variants.cwl/varscan_max_normal_freq"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#detect_variants.cwl/varscan_min_coverage"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.1,
                    "id": "#detect_variants.cwl/varscan_min_var_freq"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.99,
                    "id": "#detect_variants.cwl/varscan_p_value"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#detect_variants.cwl/varscan_strand_filter"
                },
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "id": "#detect_variants.cwl/vep_cache_dir"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#vep_custom_annotation.yml/vep_custom_annotation"
                    },
                    "doc": "custom type, check types directory for input format",
                    "id": "#detect_variants.cwl/vep_custom_annotations"
                },
                {
                    "type": "string",
                    "doc": "genome assembly to use in vep. Examples: GRCh38 or GRCm38",
                    "id": "#detect_variants.cwl/vep_ensembl_assembly"
                },
                {
                    "type": "string",
                    "doc": "ensembl species - Must be present in the cache directory. Examples: homo_sapiens or mus_musculus",
                    "id": "#detect_variants.cwl/vep_ensembl_species"
                },
                {
                    "type": "string",
                    "doc": "ensembl version - Must be present in the cache directory. Example: 95",
                    "id": "#detect_variants.cwl/vep_ensembl_version"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#detect_variants.cwl/vep_pick/pick",
                                "#detect_variants.cwl/vep_pick/flag_pick",
                                "#detect_variants.cwl/vep_pick/pick_allele",
                                "#detect_variants.cwl/vep_pick/per_gene",
                                "#detect_variants.cwl/vep_pick/pick_allele_gene",
                                "#detect_variants.cwl/vep_pick/flag_pick_allele",
                                "#detect_variants.cwl/vep_pick/flag_pick_allele_gene"
                            ]
                        }
                    ],
                    "id": "#detect_variants.cwl/vep_pick"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "Frameshift",
                        "Wildtype"
                    ],
                    "id": "#detect_variants.cwl/vep_plugins"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "HGVSc",
                        "HGVSp"
                    ],
                    "id": "#detect_variants.cwl/vep_to_table_fields"
                }
            ],
            "steps": [
                {
                    "run": "#docm_add_variants.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/combine/combined_vcf",
                            "id": "#detect_variants.cwl/add_docm_variants/callers_vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/docm/docm_variants_vcf",
                            "id": "#detect_variants.cwl/add_docm_variants/docm_vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/add_docm_variants/reference"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/add_docm_variants/merged_vcf"
                    ],
                    "id": "#detect_variants.cwl/add_docm_variants"
                },
                {
                    "run": "#vcf_readcount_annotator.cwl",
                    "in": [
                        {
                            "default": "DNA",
                            "id": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/data_type"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam_readcount/indel_bam_readcount_tsv",
                            "id": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/indel_bam_readcount_tsv"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_sample_name",
                            "id": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam_readcount/snv_bam_readcount_tsv",
                            "id": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/snv_bam_readcount_tsv"
                        },
                        {
                            "source": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/annotated_bam_readcount_vcf",
                            "id": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/annotated_bam_readcount_vcf"
                    ],
                    "id": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf"
                },
                {
                    "run": "#vcf_readcount_annotator.cwl",
                    "in": [
                        {
                            "default": "DNA",
                            "id": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/data_type"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam_readcount/indel_bam_readcount_tsv",
                            "id": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/indel_bam_readcount_tsv"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam_readcount/snv_bam_readcount_tsv",
                            "id": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/snv_bam_readcount_tsv"
                        },
                        {
                            "source": "#detect_variants.cwl/annotate_variants/annotated_vcf",
                            "id": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf/annotated_bam_readcount_vcf"
                    ],
                    "id": "#detect_variants.cwl/add_tumor_bam_readcount_to_vcf"
                },
                {
                    "run": "#add_vep_fields_to_table.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/variants_to_table/variants_tsv",
                            "id": "#detect_variants.cwl/add_vep_fields_to_table/tsv"
                        },
                        {
                            "source": "#detect_variants.cwl/annotated_filter_index/indexed_vcf",
                            "id": "#detect_variants.cwl/add_vep_fields_to_table/vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_to_table_fields",
                            "id": "#detect_variants.cwl/add_vep_fields_to_table/vep_fields"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/add_vep_fields_to_table/annotated_variants_tsv"
                    ],
                    "id": "#detect_variants.cwl/add_vep_fields_to_table"
                },
                {
                    "run": "#vep.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/vep_cache_dir",
                            "id": "#detect_variants.cwl/annotate_variants/cache_dir"
                        },
                        {
                            "source": "#detect_variants.cwl/annotate_coding_only",
                            "id": "#detect_variants.cwl/annotate_variants/coding_only"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_custom_annotations",
                            "id": "#detect_variants.cwl/annotate_variants/custom_annotations"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_ensembl_assembly",
                            "id": "#detect_variants.cwl/annotate_variants/ensembl_assembly"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_ensembl_species",
                            "id": "#detect_variants.cwl/annotate_variants/ensembl_species"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_ensembl_version",
                            "id": "#detect_variants.cwl/annotate_variants/ensembl_version"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_pick",
                            "id": "#detect_variants.cwl/annotate_variants/pick"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_plugins",
                            "id": "#detect_variants.cwl/annotate_variants/plugins"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/annotate_variants/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/synonyms_file",
                            "id": "#detect_variants.cwl/annotate_variants/synonyms_file"
                        },
                        {
                            "source": "#detect_variants.cwl/decompose_index/indexed_vcf",
                            "id": "#detect_variants.cwl/annotate_variants/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/annotate_variants/annotated_vcf",
                        "#detect_variants.cwl/annotate_variants/vep_summary"
                    ],
                    "id": "#detect_variants.cwl/annotate_variants"
                },
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/filter_vcf/filtered_vcf",
                            "id": "#detect_variants.cwl/annotated_filter_bgzip/file"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/annotated_filter_bgzip/bgzipped_file"
                    ],
                    "id": "#detect_variants.cwl/annotated_filter_bgzip"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/annotated_filter_bgzip/bgzipped_file",
                            "id": "#detect_variants.cwl/annotated_filter_index/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/annotated_filter_index/indexed_vcf"
                    ],
                    "id": "#detect_variants.cwl/annotated_filter_index"
                },
                {
                    "run": "#combine_variants.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/mutect/filtered_vcf",
                            "id": "#detect_variants.cwl/combine/mutect_vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/pindel/filtered_vcf",
                            "id": "#detect_variants.cwl/combine/pindel_vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/combine/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/strelka/filtered_vcf",
                            "id": "#detect_variants.cwl/combine/strelka_vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/varscan/filtered_vcf",
                            "id": "#detect_variants.cwl/combine/varscan_vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/combine/combined_vcf"
                    ],
                    "id": "#detect_variants.cwl/combine"
                },
                {
                    "run": "#vt_decompose.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/add_docm_variants/merged_vcf",
                            "id": "#detect_variants.cwl/decompose/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/decompose/decomposed_vcf"
                    ],
                    "id": "#detect_variants.cwl/decompose"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/decompose/decomposed_vcf",
                            "id": "#detect_variants.cwl/decompose_index/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/decompose_index/indexed_vcf"
                    ],
                    "id": "#detect_variants.cwl/decompose_index"
                },
                {
                    "run": "#docm_cle.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/docm_vcf",
                            "id": "#detect_variants.cwl/docm/docm_vcf"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_docm_variants",
                            "id": "#detect_variants.cwl/docm/filter_docm_variants"
                        },
                        {
                            "source": "#detect_variants.cwl/roi_intervals",
                            "id": "#detect_variants.cwl/docm/interval_list"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam",
                            "id": "#detect_variants.cwl/docm/normal_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/docm/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/docm/tumor_bam"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/docm/docm_variants_vcf"
                    ],
                    "id": "#detect_variants.cwl/docm"
                },
                {
                    "run": "#filter_vcf.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/cle_vcf_filter",
                            "id": "#detect_variants.cwl/filter_vcf/do_cle_vcf_filter"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_gnomADe_maximum_population_allele_frequency",
                            "id": "#detect_variants.cwl/filter_vcf/filter_gnomADe_maximum_population_allele_frequency"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_mapq0_threshold",
                            "id": "#detect_variants.cwl/filter_vcf/filter_mapq0_threshold"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_minimum_depth",
                            "id": "#detect_variants.cwl/filter_vcf/filter_minimum_depth"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_somatic_llr_normal_contamination_rate",
                            "id": "#detect_variants.cwl/filter_vcf/filter_somatic_llr_normal_contamination_rate"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_somatic_llr_threshold",
                            "id": "#detect_variants.cwl/filter_vcf/filter_somatic_llr_threshold"
                        },
                        {
                            "source": "#detect_variants.cwl/filter_somatic_llr_tumor_purity",
                            "id": "#detect_variants.cwl/filter_vcf/filter_somatic_llr_tumor_purity"
                        },
                        {
                            "source": "#detect_variants.cwl/vep_custom_annotations",
                            "valueFrom": "${\n   if(self){\n        for(var i=0; i<self.length; i++){\n            if(self[i].annotation.gnomad_filter){\n                return(self[i].annotation.name + '_AF');\n            }\n        }\n    }\n    return('gnomAD_AF');\n}\n",
                            "id": "#detect_variants.cwl/filter_vcf/gnomad_field_name"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_sample_name",
                            "id": "#detect_variants.cwl/filter_vcf/normal_sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/filter_vcf/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/filter_vcf/tumor_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/filter_vcf/tumor_sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/validated_variants",
                            "id": "#detect_variants.cwl/filter_vcf/validated_variants"
                        },
                        {
                            "source": "#detect_variants.cwl/index/indexed_vcf",
                            "id": "#detect_variants.cwl/filter_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/filter_vcf/filtered_vcf"
                    ],
                    "id": "#detect_variants.cwl/filter_vcf"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/add_normal_bam_readcount_to_vcf/annotated_bam_readcount_vcf",
                            "id": "#detect_variants.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/index/indexed_vcf"
                    ],
                    "id": "#detect_variants.cwl/index"
                },
                {
                    "run": "#mutect.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/roi_intervals",
                            "id": "#detect_variants.cwl/mutect/interval_list"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam",
                            "id": "#detect_variants.cwl/mutect/normal_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/mutect/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/scatter_count",
                            "id": "#detect_variants.cwl/mutect/scatter_count"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/mutect/tumor_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/mutect/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/mutect/unfiltered_vcf",
                        "#detect_variants.cwl/mutect/filtered_vcf"
                    ],
                    "id": "#detect_variants.cwl/mutect"
                },
                {
                    "run": "#bam_readcount.cwl_2",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/normal_bam",
                            "id": "#detect_variants.cwl/normal_bam_readcount/bam"
                        },
                        {
                            "source": "#detect_variants.cwl/readcount_minimum_base_quality",
                            "id": "#detect_variants.cwl/normal_bam_readcount/min_base_quality"
                        },
                        {
                            "source": "#detect_variants.cwl/readcount_minimum_mapping_quality",
                            "id": "#detect_variants.cwl/normal_bam_readcount/min_mapping_quality"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/normal_bam_readcount/reference_fasta"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_sample_name",
                            "id": "#detect_variants.cwl/normal_bam_readcount/sample"
                        },
                        {
                            "source": "#detect_variants.cwl/annotate_variants/annotated_vcf",
                            "id": "#detect_variants.cwl/normal_bam_readcount/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/normal_bam_readcount/snv_bam_readcount_tsv",
                        "#detect_variants.cwl/normal_bam_readcount/indel_bam_readcount_tsv"
                    ],
                    "id": "#detect_variants.cwl/normal_bam_readcount"
                },
                {
                    "run": "#pindel.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/pindel_insert_size",
                            "id": "#detect_variants.cwl/pindel/insert_size"
                        },
                        {
                            "source": "#detect_variants.cwl/roi_intervals",
                            "id": "#detect_variants.cwl/pindel/interval_list"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam",
                            "id": "#detect_variants.cwl/pindel/normal_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_sample_name",
                            "id": "#detect_variants.cwl/pindel/normal_sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/pindel/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/scatter_count",
                            "id": "#detect_variants.cwl/pindel/scatter_count"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/pindel/tumor_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/pindel/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/pindel/unfiltered_vcf",
                        "#detect_variants.cwl/pindel/filtered_vcf"
                    ],
                    "id": "#detect_variants.cwl/pindel"
                },
                {
                    "run": "#strelka_and_post_processing.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/strelka_cpu_reserved",
                            "id": "#detect_variants.cwl/strelka/cpu_reserved"
                        },
                        {
                            "source": "#detect_variants.cwl/strelka_exome_mode",
                            "id": "#detect_variants.cwl/strelka/exome_mode"
                        },
                        {
                            "source": "#detect_variants.cwl/roi_intervals",
                            "id": "#detect_variants.cwl/strelka/interval_list"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam",
                            "id": "#detect_variants.cwl/strelka/normal_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_sample_name",
                            "id": "#detect_variants.cwl/strelka/normal_sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/strelka/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/strelka/tumor_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/strelka/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/strelka/unfiltered_vcf",
                        "#detect_variants.cwl/strelka/filtered_vcf"
                    ],
                    "id": "#detect_variants.cwl/strelka"
                },
                {
                    "run": "#bam_readcount.cwl_2",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/tumor_bam_readcount/bam"
                        },
                        {
                            "source": "#detect_variants.cwl/readcount_minimum_base_quality",
                            "id": "#detect_variants.cwl/tumor_bam_readcount/min_base_quality"
                        },
                        {
                            "source": "#detect_variants.cwl/readcount_minimum_mapping_quality",
                            "id": "#detect_variants.cwl/tumor_bam_readcount/min_mapping_quality"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/tumor_bam_readcount/reference_fasta"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/tumor_bam_readcount/sample"
                        },
                        {
                            "source": "#detect_variants.cwl/annotate_variants/annotated_vcf",
                            "id": "#detect_variants.cwl/tumor_bam_readcount/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/tumor_bam_readcount/snv_bam_readcount_tsv",
                        "#detect_variants.cwl/tumor_bam_readcount/indel_bam_readcount_tsv"
                    ],
                    "id": "#detect_variants.cwl/tumor_bam_readcount"
                },
                {
                    "run": "#variants_to_table.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/variants_to_table_fields",
                            "id": "#detect_variants.cwl/variants_to_table/fields"
                        },
                        {
                            "source": "#detect_variants.cwl/variants_to_table_genotype_fields",
                            "id": "#detect_variants.cwl/variants_to_table/genotype_fields"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/variants_to_table/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/annotated_filter_index/indexed_vcf",
                            "id": "#detect_variants.cwl/variants_to_table/vcf"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/variants_to_table/variants_tsv"
                    ],
                    "id": "#detect_variants.cwl/variants_to_table"
                },
                {
                    "run": "#varscan_pre_and_post_processing.cwl",
                    "in": [
                        {
                            "source": "#detect_variants.cwl/roi_intervals",
                            "id": "#detect_variants.cwl/varscan/interval_list"
                        },
                        {
                            "source": "#detect_variants.cwl/varscan_max_normal_freq",
                            "id": "#detect_variants.cwl/varscan/max_normal_freq"
                        },
                        {
                            "source": "#detect_variants.cwl/varscan_min_coverage",
                            "id": "#detect_variants.cwl/varscan/min_coverage"
                        },
                        {
                            "source": "#detect_variants.cwl/varscan_min_var_freq",
                            "id": "#detect_variants.cwl/varscan/min_var_freq"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_bam",
                            "id": "#detect_variants.cwl/varscan/normal_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/normal_sample_name",
                            "id": "#detect_variants.cwl/varscan/normal_sample_name"
                        },
                        {
                            "source": "#detect_variants.cwl/varscan_p_value",
                            "id": "#detect_variants.cwl/varscan/p_value"
                        },
                        {
                            "source": "#detect_variants.cwl/reference",
                            "id": "#detect_variants.cwl/varscan/reference"
                        },
                        {
                            "source": "#detect_variants.cwl/scatter_count",
                            "id": "#detect_variants.cwl/varscan/scatter_count"
                        },
                        {
                            "source": "#detect_variants.cwl/varscan_strand_filter",
                            "id": "#detect_variants.cwl/varscan/strand_filter"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_bam",
                            "id": "#detect_variants.cwl/varscan/tumor_bam"
                        },
                        {
                            "source": "#detect_variants.cwl/tumor_sample_name",
                            "id": "#detect_variants.cwl/varscan/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#detect_variants.cwl/varscan/unfiltered_vcf",
                        "#detect_variants.cwl/varscan/filtered_vcf"
                    ],
                    "id": "#detect_variants.cwl/varscan"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/docm/docm_variants_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/docm_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/annotated_filter_index/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/final_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/add_vep_fields_to_table/annotated_variants_tsv",
                    "id": "#detect_variants.cwl/final_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/index/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/final_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/mutect/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/mutect_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/mutect/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/mutect_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/normal_bam_readcount/indel_bam_readcount_tsv",
                    "id": "#detect_variants.cwl/normal_indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/normal_bam_readcount/snv_bam_readcount_tsv",
                    "id": "#detect_variants.cwl/normal_snv_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/pindel/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/pindel_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/pindel/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/pindel_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/strelka/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/strelka_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/strelka/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/strelka_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/tumor_bam_readcount/indel_bam_readcount_tsv",
                    "id": "#detect_variants.cwl/tumor_indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/tumor_bam_readcount/snv_bam_readcount_tsv",
                    "id": "#detect_variants.cwl/tumor_snv_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/varscan/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/varscan_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/varscan/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#detect_variants.cwl/varscan_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#detect_variants.cwl/annotate_variants/vep_summary",
                    "id": "#detect_variants.cwl/vep_summary"
                }
            ],
            "id": "#detect_variants.cwl"
        },
        {
            "class": "Workflow",
            "label": "exome alignment and germline variant detection",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#labelled_file.yml/labelled_file"
                        },
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#trimming_options.yml/trimming_options"
                        },
                        {
                            "$import": "#vep_custom_annotation.yml/vep_custom_annotation"
                        }
                    ]
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#germline_exome.cwl/annotate_coding_only"
                },
                {
                    "type": "File",
                    "label": "bait_intervals: interval_list file of baits used in the sequencing experiment",
                    "doc": "bait_intervals is an interval_list corresponding to the baits used in sequencing reagent.\nThese are essentially coordinates for regions you were able to design probes for in the reagent.\nTypically the reagent provider has this information available in bed format and it can be\nconverted to an interval_list with Picard BedToIntervalList. Astrazeneca also maintains a repo\nof baits for common sequencing reagents available at https://github.com/AstraZeneca-NGS/reference_data\n",
                    "id": "#germline_exome.cwl/bait_intervals"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_exome.cwl/bqsr_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.",
                    "id": "#germline_exome.cwl/bqsr_known_sites"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#germline_exome.cwl/gvcf_gq_bands"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#germline_exome.cwl/intervals"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome.cwl/omni_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#germline_exome.cwl/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#germline_exome.cwl/per_target_intervals"
                },
                {
                    "type": "string",
                    "id": "#germline_exome.cwl/picard_metric_accumulation_level"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_exome.cwl/ploidy"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_exome.cwl/qc_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_exome.cwl/qc_minimum_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        },
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome.cwl/reference"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "sequence: sequencing data and readgroup information",
                    "doc": "sequence represents the sequencing data as either FASTQs or BAMs with accompanying\nreadgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#germline_exome.cwl/sequence"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#germline_exome.cwl/summary_intervals"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#germline_exome.cwl/synonyms_file"
                },
                {
                    "type": "int",
                    "label": "target_interval_padding: number of bp flanking each target region in which to allow variant calls",
                    "doc": "The effective coverage of capture products generally extends out beyond the actual regions\ntargeted. This parameter allows variants to be called in these wingspan regions, extending\nthis many base pairs from each side of the target regions.\n",
                    "default": 100,
                    "id": "#germline_exome.cwl/target_interval_padding"
                },
                {
                    "type": "File",
                    "label": "target_intervals: interval_list file of targets used in the sequencing experiment",
                    "doc": "target_intervals is an interval_list corresponding to the targets for the capture reagent.\nBed files with this information can be converted to interval_lists with Picard BedToIntervalList.\nIn general for a WES exome reagent bait_intervals and target_intervals are the same.\n",
                    "id": "#germline_exome.cwl/target_intervals"
                },
                {
                    "type": [
                        "#trimming_options.yml/trimming_options",
                        "null"
                    ],
                    "id": "#germline_exome.cwl/trimming"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_exome.cwl/variants_to_table_fields"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_exome.cwl/variants_to_table_genotype_fields"
                },
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "id": "#germline_exome.cwl/vep_cache_dir"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#vep_custom_annotation.yml/vep_custom_annotation"
                    },
                    "doc": "custom type, check types directory for input format",
                    "id": "#germline_exome.cwl/vep_custom_annotations"
                },
                {
                    "type": "string",
                    "doc": "genome assembly to use in vep. Examples: GRCh38 or GRCm38",
                    "id": "#germline_exome.cwl/vep_ensembl_assembly"
                },
                {
                    "type": "string",
                    "doc": "ensembl species - Must be present in the cache directory. Examples: homo_sapiens or mus_musculus",
                    "id": "#germline_exome.cwl/vep_ensembl_species"
                },
                {
                    "type": "string",
                    "doc": "ensembl version - Must be present in the cache directory. Example: 95",
                    "id": "#germline_exome.cwl/vep_ensembl_version"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "doc": "array of plugins to use when running vep",
                    "id": "#germline_exome.cwl/vep_plugins"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_exome.cwl/vep_to_table_fields"
                }
            ],
            "steps": [
                {
                    "run": "#alignment_exome.cwl",
                    "in": [
                        {
                            "source": "#germline_exome.cwl/bait_intervals",
                            "id": "#germline_exome.cwl/alignment_and_qc/bait_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/bqsr_intervals",
                            "id": "#germline_exome.cwl/alignment_and_qc/bqsr_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/bqsr_known_sites",
                            "id": "#germline_exome.cwl/alignment_and_qc/bqsr_known_sites"
                        },
                        {
                            "source": "#germline_exome.cwl/omni_vcf",
                            "id": "#germline_exome.cwl/alignment_and_qc/omni_vcf"
                        },
                        {
                            "source": "#germline_exome.cwl/per_base_intervals",
                            "id": "#germline_exome.cwl/alignment_and_qc/per_base_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/per_target_intervals",
                            "id": "#germline_exome.cwl/alignment_and_qc/per_target_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/picard_metric_accumulation_level",
                            "id": "#germline_exome.cwl/alignment_and_qc/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#germline_exome.cwl/qc_minimum_base_quality",
                            "id": "#germline_exome.cwl/alignment_and_qc/qc_minimum_base_quality"
                        },
                        {
                            "source": "#germline_exome.cwl/qc_minimum_mapping_quality",
                            "id": "#germline_exome.cwl/alignment_and_qc/qc_minimum_mapping_quality"
                        },
                        {
                            "source": "#germline_exome.cwl/reference",
                            "id": "#germline_exome.cwl/alignment_and_qc/reference"
                        },
                        {
                            "source": "#germline_exome.cwl/sequence",
                            "id": "#germline_exome.cwl/alignment_and_qc/sequence"
                        },
                        {
                            "source": "#germline_exome.cwl/summary_intervals",
                            "id": "#germline_exome.cwl/alignment_and_qc/summary_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/target_intervals",
                            "id": "#germline_exome.cwl/alignment_and_qc/target_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/trimming",
                            "id": "#germline_exome.cwl/alignment_and_qc/trimming"
                        }
                    ],
                    "out": [
                        "#germline_exome.cwl/alignment_and_qc/bam",
                        "#germline_exome.cwl/alignment_and_qc/mark_duplicates_metrics",
                        "#germline_exome.cwl/alignment_and_qc/insert_size_metrics",
                        "#germline_exome.cwl/alignment_and_qc/insert_size_histogram",
                        "#germline_exome.cwl/alignment_and_qc/alignment_summary_metrics",
                        "#germline_exome.cwl/alignment_and_qc/hs_metrics",
                        "#germline_exome.cwl/alignment_and_qc/per_target_coverage_metrics",
                        "#germline_exome.cwl/alignment_and_qc/per_target_hs_metrics",
                        "#germline_exome.cwl/alignment_and_qc/per_base_coverage_metrics",
                        "#germline_exome.cwl/alignment_and_qc/per_base_hs_metrics",
                        "#germline_exome.cwl/alignment_and_qc/summary_hs_metrics",
                        "#germline_exome.cwl/alignment_and_qc/flagstats",
                        "#germline_exome.cwl/alignment_and_qc/verify_bam_id_metrics",
                        "#germline_exome.cwl/alignment_and_qc/verify_bam_id_depth"
                    ],
                    "id": "#germline_exome.cwl/alignment_and_qc"
                },
                {
                    "run": "#bam_to_cram.cwl",
                    "in": [
                        {
                            "source": "#germline_exome.cwl/alignment_and_qc/bam",
                            "id": "#germline_exome.cwl/bam_to_cram/bam"
                        },
                        {
                            "source": "#germline_exome.cwl/reference",
                            "id": "#germline_exome.cwl/bam_to_cram/reference"
                        }
                    ],
                    "out": [
                        "#germline_exome.cwl/bam_to_cram/cram"
                    ],
                    "id": "#germline_exome.cwl/bam_to_cram"
                },
                {
                    "run": "#germline_detect_variants.cwl",
                    "in": [
                        {
                            "source": "#germline_exome.cwl/annotate_coding_only",
                            "id": "#germline_exome.cwl/detect_variants/annotate_coding_only"
                        },
                        {
                            "source": "#germline_exome.cwl/alignment_and_qc/bam",
                            "id": "#germline_exome.cwl/detect_variants/bam"
                        },
                        {
                            "source": "#germline_exome.cwl/extract_freemix/freemix_score",
                            "id": "#germline_exome.cwl/detect_variants/contamination_fraction"
                        },
                        {
                            "source": "#germline_exome.cwl/gvcf_gq_bands",
                            "id": "#germline_exome.cwl/detect_variants/gvcf_gq_bands"
                        },
                        {
                            "source": "#germline_exome.cwl/intervals",
                            "id": "#germline_exome.cwl/detect_variants/intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/pad_target_intervals/expanded_interval_list",
                            "id": "#germline_exome.cwl/detect_variants/limit_variant_intervals"
                        },
                        {
                            "source": "#germline_exome.cwl/ploidy",
                            "id": "#germline_exome.cwl/detect_variants/ploidy"
                        },
                        {
                            "source": "#germline_exome.cwl/reference",
                            "id": "#germline_exome.cwl/detect_variants/reference"
                        },
                        {
                            "source": "#germline_exome.cwl/synonyms_file",
                            "id": "#germline_exome.cwl/detect_variants/synonyms_file"
                        },
                        {
                            "source": "#germline_exome.cwl/variants_to_table_fields",
                            "id": "#germline_exome.cwl/detect_variants/variants_to_table_fields"
                        },
                        {
                            "source": "#germline_exome.cwl/variants_to_table_genotype_fields",
                            "id": "#germline_exome.cwl/detect_variants/variants_to_table_genotype_fields"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_cache_dir",
                            "id": "#germline_exome.cwl/detect_variants/vep_cache_dir"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_custom_annotations",
                            "id": "#germline_exome.cwl/detect_variants/vep_custom_annotations"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_ensembl_assembly",
                            "id": "#germline_exome.cwl/detect_variants/vep_ensembl_assembly"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_ensembl_species",
                            "id": "#germline_exome.cwl/detect_variants/vep_ensembl_species"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_ensembl_version",
                            "id": "#germline_exome.cwl/detect_variants/vep_ensembl_version"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_plugins",
                            "id": "#germline_exome.cwl/detect_variants/vep_plugins"
                        },
                        {
                            "source": "#germline_exome.cwl/vep_to_table_fields",
                            "id": "#germline_exome.cwl/detect_variants/vep_to_table_fields"
                        }
                    ],
                    "out": [
                        "#germline_exome.cwl/detect_variants/raw_vcf",
                        "#germline_exome.cwl/detect_variants/final_vcf",
                        "#germline_exome.cwl/detect_variants/filtered_vcf",
                        "#germline_exome.cwl/detect_variants/vep_summary",
                        "#germline_exome.cwl/detect_variants/final_tsv",
                        "#germline_exome.cwl/detect_variants/filtered_tsv"
                    ],
                    "id": "#germline_exome.cwl/detect_variants"
                },
                {
                    "in": [
                        {
                            "source": "#germline_exome.cwl/alignment_and_qc/verify_bam_id_metrics",
                            "id": "#germline_exome.cwl/extract_freemix/verify_bam_id_metrics"
                        }
                    ],
                    "out": [
                        "#germline_exome.cwl/extract_freemix/freemix_score"
                    ],
                    "run": {
                        "class": "ExpressionTool",
                        "requirements": [
                            {
                                "class": "InlineJavascriptRequirement"
                            }
                        ],
                        "inputs": [
                            {
                                "type": "File",
                                "loadContents": true,
                                "id": "#germline_exome.cwl/extract_freemix/run/verify_bam_id_metrics"
                            }
                        ],
                        "outputs": [
                            {
                                "type": [
                                    "null",
                                    "string"
                                ],
                                "id": "#germline_exome.cwl/extract_freemix/run/freemix_score"
                            }
                        ],
                        "expression": "${\n    var metrics = inputs.verify_bam_id_metrics.contents.split(\"\\n\");\n    if ( metrics[0].split(\"\\t\")[6] == 'FREEMIX' ) {\n        return {'freemix_score': metrics[1].split(\"\\t\")[6]};\n    } else {\n        return {'freemix_score:': null };\n    }\n}\n"
                    },
                    "id": "#germline_exome.cwl/extract_freemix"
                },
                {
                    "run": "#index_cram.cwl",
                    "in": [
                        {
                            "source": "#germline_exome.cwl/bam_to_cram/cram",
                            "id": "#germline_exome.cwl/index_cram/cram"
                        }
                    ],
                    "out": [
                        "#germline_exome.cwl/index_cram/indexed_cram"
                    ],
                    "id": "#germline_exome.cwl/index_cram"
                },
                {
                    "run": "#interval_list_expand.cwl",
                    "in": [
                        {
                            "source": "#germline_exome.cwl/target_intervals",
                            "id": "#germline_exome.cwl/pad_target_intervals/interval_list"
                        },
                        {
                            "source": "#germline_exome.cwl/target_interval_padding",
                            "id": "#germline_exome.cwl/pad_target_intervals/roi_padding"
                        }
                    ],
                    "out": [
                        "#germline_exome.cwl/pad_target_intervals/expanded_interval_list"
                    ],
                    "id": "#germline_exome.cwl/pad_target_intervals"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/alignment_summary_metrics",
                    "id": "#germline_exome.cwl/alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/index_cram/indexed_cram",
                    "id": "#germline_exome.cwl/cram"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/detect_variants/filtered_tsv",
                    "id": "#germline_exome.cwl/filtered_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/detect_variants/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/detect_variants/final_tsv",
                    "id": "#germline_exome.cwl/final_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/detect_variants/final_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome.cwl/final_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/flagstats",
                    "id": "#germline_exome.cwl/flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/hs_metrics",
                    "id": "#germline_exome.cwl/hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/insert_size_histogram",
                    "id": "#germline_exome.cwl/insert_size_histogram"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/insert_size_metrics",
                    "id": "#germline_exome.cwl/insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/mark_duplicates_metrics",
                    "id": "#germline_exome.cwl/mark_duplicates_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/per_base_coverage_metrics",
                    "id": "#germline_exome.cwl/per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/per_base_hs_metrics",
                    "id": "#germline_exome.cwl/per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/per_target_coverage_metrics",
                    "id": "#germline_exome.cwl/per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/per_target_hs_metrics",
                    "id": "#germline_exome.cwl/per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/detect_variants/raw_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome.cwl/raw_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/summary_hs_metrics",
                    "id": "#germline_exome.cwl/summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/detect_variants/vep_summary",
                    "id": "#germline_exome.cwl/vep_summary"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/verify_bam_id_depth",
                    "id": "#germline_exome.cwl/verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome.cwl/alignment_and_qc/verify_bam_id_metrics",
                    "id": "#germline_exome.cwl/verify_bam_id_metrics"
                }
            ],
            "id": "#germline_exome.cwl"
        },
        {
            "class": "Workflow",
            "label": "exome alignment and germline variant detection, with optitype for HLA typing",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#labelled_file.yml/labelled_file"
                        },
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#vep_custom_annotation.yml/vep_custom_annotation"
                        }
                    ]
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/annotate_coding_only"
                },
                {
                    "type": "File",
                    "label": "bait_intervals: interval_list file of baits used in the sequencing experiment",
                    "doc": "bait_intervals is an interval_list corresponding to the baits used in sequencing reagent.\nThese are essentially coordinates for regions you were able to design probes for in the reagent.\nTypically the reagent provider has this information available in bed format and it can be\nconverted to an interval_list with Picard BedToIntervalList. Astrazeneca also maintains a repo\nof baits for common sequencing reagents available at https://github.com/AstraZeneca-NGS/reference_data\n",
                    "id": "#germline_exome_hla_typing.cwl/bait_intervals"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_exome_hla_typing.cwl/bqsr_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.",
                    "id": "#germline_exome_hla_typing.cwl/bqsr_known_sites"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#germline_exome_hla_typing.cwl/gvcf_gq_bands"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#germline_exome_hla_typing.cwl/intervals"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome_hla_typing.cwl/omni_vcf"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/optitype_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#germline_exome_hla_typing.cwl/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#germline_exome_hla_typing.cwl/per_target_intervals"
                },
                {
                    "type": "string",
                    "id": "#germline_exome_hla_typing.cwl/picard_metric_accumulation_level"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/ploidy"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/qc_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/qc_minimum_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        },
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome_hla_typing.cwl/reference"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "sequence: sequencing data and readgroup information",
                    "doc": "sequence represents the sequencing data as either FASTQs or BAMs with accompanying\nreadgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#germline_exome_hla_typing.cwl/sequence"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#germline_exome_hla_typing.cwl/summary_intervals"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/synonyms_file"
                },
                {
                    "type": "int",
                    "label": "target_interval_padding: number of bp flanking each target region in which to allow variant calls",
                    "doc": "The effective coverage of capture products generally extends out beyond the actual regions\ntargeted. This parameter allows variants to be called in these wingspan regions, extending\nthis many base pairs from each side of the target regions.\n",
                    "default": 100,
                    "id": "#germline_exome_hla_typing.cwl/target_interval_padding"
                },
                {
                    "type": "File",
                    "label": "target_intervals: interval_list file of targets used in the sequencing experiment",
                    "doc": "target_intervals is an interval_list corresponding to the targets for the capture reagent.\nBed files with this information can be converted to interval_lists with Picard BedToIntervalList.\nIn general for a WES exome reagent bait_intervals and target_intervals are the same.\n",
                    "id": "#germline_exome_hla_typing.cwl/target_intervals"
                },
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/vep_cache_dir"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#vep_custom_annotation.yml/vep_custom_annotation"
                    },
                    "doc": "custom type, check types directory for input format",
                    "id": "#germline_exome_hla_typing.cwl/vep_custom_annotations"
                },
                {
                    "type": "string",
                    "doc": "genome assembly to use in vep. Examples: GRCh38 or GRCm38",
                    "id": "#germline_exome_hla_typing.cwl/vep_ensembl_assembly"
                },
                {
                    "type": "string",
                    "doc": "ensembl species - Must be present in the cache directory. Examples: homo_sapiens or mus_musculus",
                    "id": "#germline_exome_hla_typing.cwl/vep_ensembl_species"
                },
                {
                    "type": "string",
                    "doc": "ensembl version - Must be present in the cache directory. Example: 95",
                    "id": "#germline_exome_hla_typing.cwl/vep_ensembl_version"
                }
            ],
            "steps": [
                {
                    "run": "#germline_exome.cwl",
                    "in": [
                        {
                            "source": "#germline_exome_hla_typing.cwl/annotate_coding_only",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/annotate_coding_only"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/bait_intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/bait_intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/bqsr_intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/bqsr_intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/bqsr_known_sites",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/bqsr_known_sites"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/gvcf_gq_bands",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/gvcf_gq_bands"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/omni_vcf",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/omni_vcf"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/per_base_intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/per_base_intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/per_target_intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/per_target_intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/picard_metric_accumulation_level",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/ploidy",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/ploidy"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/qc_minimum_base_quality",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/qc_minimum_base_quality"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/qc_minimum_mapping_quality",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/qc_minimum_mapping_quality"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/reference",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/reference"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/sequence",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/sequence"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/summary_intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/summary_intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/synonyms_file",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/synonyms_file"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/target_interval_padding",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/target_interval_padding"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/target_intervals",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/target_intervals"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/vep_cache_dir",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/vep_cache_dir"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/vep_custom_annotations",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/vep_custom_annotations"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/vep_ensembl_assembly",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/vep_ensembl_assembly"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/vep_ensembl_species",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/vep_ensembl_species"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/vep_ensembl_version",
                            "id": "#germline_exome_hla_typing.cwl/germline_exome/vep_ensembl_version"
                        }
                    ],
                    "out": [
                        "#germline_exome_hla_typing.cwl/germline_exome/cram",
                        "#germline_exome_hla_typing.cwl/germline_exome/mark_duplicates_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/insert_size_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/insert_size_histogram",
                        "#germline_exome_hla_typing.cwl/germline_exome/alignment_summary_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/hs_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/per_target_coverage_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/per_target_hs_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/per_base_coverage_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/per_base_hs_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/summary_hs_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/flagstats",
                        "#germline_exome_hla_typing.cwl/germline_exome/verify_bam_id_metrics",
                        "#germline_exome_hla_typing.cwl/germline_exome/verify_bam_id_depth",
                        "#germline_exome_hla_typing.cwl/germline_exome/raw_vcf",
                        "#germline_exome_hla_typing.cwl/germline_exome/final_vcf",
                        "#germline_exome_hla_typing.cwl/germline_exome/filtered_vcf",
                        "#germline_exome_hla_typing.cwl/germline_exome/vep_summary"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/germline_exome"
                },
                {
                    "run": "#optitype_dna.cwl",
                    "in": [
                        {
                            "source": "#germline_exome_hla_typing.cwl/germline_exome/cram",
                            "id": "#germline_exome_hla_typing.cwl/optitype/cram"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/optitype_name",
                            "id": "#germline_exome_hla_typing.cwl/optitype/optitype_name"
                        },
                        {
                            "source": "#germline_exome_hla_typing.cwl/reference",
                            "id": "#germline_exome_hla_typing.cwl/optitype/reference"
                        }
                    ],
                    "out": [
                        "#germline_exome_hla_typing.cwl/optitype/optitype_tsv",
                        "#germline_exome_hla_typing.cwl/optitype/optitype_plot"
                    ],
                    "id": "#germline_exome_hla_typing.cwl/optitype"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/alignment_summary_metrics",
                    "id": "#germline_exome_hla_typing.cwl/alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/cram",
                    "id": "#germline_exome_hla_typing.cwl/cram"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome_hla_typing.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/final_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome_hla_typing.cwl/final_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/flagstats",
                    "id": "#germline_exome_hla_typing.cwl/flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/hs_metrics",
                    "id": "#germline_exome_hla_typing.cwl/hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/insert_size_histogram",
                    "id": "#germline_exome_hla_typing.cwl/insert_size_histogram"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/insert_size_metrics",
                    "id": "#germline_exome_hla_typing.cwl/insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/mark_duplicates_metrics",
                    "id": "#germline_exome_hla_typing.cwl/mark_duplicates_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/optitype/optitype_plot",
                    "id": "#germline_exome_hla_typing.cwl/optitype_plot"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/optitype/optitype_tsv",
                    "id": "#germline_exome_hla_typing.cwl/optitype_tsv"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/per_base_coverage_metrics",
                    "id": "#germline_exome_hla_typing.cwl/per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/per_base_hs_metrics",
                    "id": "#germline_exome_hla_typing.cwl/per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/per_target_coverage_metrics",
                    "id": "#germline_exome_hla_typing.cwl/per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/per_target_hs_metrics",
                    "id": "#germline_exome_hla_typing.cwl/per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/raw_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_exome_hla_typing.cwl/raw_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/summary_hs_metrics",
                    "id": "#germline_exome_hla_typing.cwl/summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/vep_summary",
                    "id": "#germline_exome_hla_typing.cwl/vep_summary"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/verify_bam_id_depth",
                    "id": "#germline_exome_hla_typing.cwl/verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_exome_hla_typing.cwl/germline_exome/verify_bam_id_metrics",
                    "id": "#germline_exome_hla_typing.cwl/verify_bam_id_metrics"
                }
            ],
            "id": "#germline_exome_hla_typing.cwl"
        },
        {
            "class": "Workflow",
            "label": "Immunotherapy Workflow",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#labelled_file.yml/labelled_file"
                        },
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#vep_custom_annotation.yml/vep_custom_annotation"
                        }
                    ]
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#main/additional_report_columns/sample_name"
                            ]
                        }
                    ],
                    "id": "#main/additional_report_columns"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#main/allele_specific_binding_thresholds"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#main/annotate_coding_only"
                },
                {
                    "type": "File",
                    "label": "bait_intervals: interval_list file of baits used in the sequencing experiment",
                    "doc": "bait_intervals is an interval_list corresponding to the baits used in sequencing reagent.\nThese are essentially coordinates for regions you were able to design probes for in the reagent.\nTypically the reagent provider has this information available in bed format and it can be\nconverted to an interval_list with Picard BedToIntervalList. AstraZeneca also maintains a repo\nof baits for common sequencing reagents available at https://github.com/AstraZeneca-NGS/reference_data\n",
                    "id": "#main/bait_intervals"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/binding_threshold"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "label": "bqsr_intervals: Array of strings specifying regions for base quality score recalibration",
                    "doc": "bqsr_intervals provides an array of genomic intervals for which to apply\nGATK base quality score recalibrations. Typically intervals are given\nfor the entire chromosome (chr1, chr2, etc.), these names should match\nthe format in the reference file.\n",
                    "id": "#main/bqsr_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "label": "bqsr_known_sites: One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.",
                    "doc": "Known polymorphic indels recommended by GATK for a variety of\ntools including the BaseRecalibrator. This is part of the GATK resource\nbundle available at http://www.broadinstitute.org/gatk/guide/article?id=1213\nFile should be in vcf format, and tabix indexed.\n",
                    "id": "#main/bqsr_known_sites"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "id": "#main/cle_vcf_filter"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "label": "Clinical HLA typing results, limited to MHC Class II alleles",
                    "doc": "used to provide clinical HLA typing results; separated from class I due to nomenclature inconsistencies",
                    "id": "#main/clinical_mhc_classII_alleles"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "label": "Clinical HLA typing results, limited to MHC Class I alleles; element format: HLA-X*01:02[/HLA-X...]",
                    "doc": "used to provide clinical HLA typing results in the format HLA-X*01:02[/HLA-X...] when available.",
                    "id": "#main/clinical_mhc_classI_alleles"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "Common mutations in cancer that will be genotyped and passed through into the merged VCF if they have even low-level evidence of a mutation (by default, marked with filter DOCM_ONLY)",
                    "id": "#main/docm_vcf"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#main/downstream_sequence_length"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "id": "#main/epitope_lengths_class_i"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "id": "#main/epitope_lengths_class_ii"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#main/exclude_nas"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/expn_val"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/fasta_size"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "Determines whether variants found only via genotyping of DOCM sites will be filtered (as DOCM_ONLY) or passed through as variant calls",
                    "id": "#main/filter_docm_variants"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#main/gatk_haplotypecaller_intervals"
                },
                {
                    "type": "File",
                    "id": "#main/gene_transcript_lookup_table"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#main/gvcf_gq_bands"
                },
                {
                    "type": "File",
                    "id": "#main/kallisto_index"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/manta_call_regions"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "id": "#main/manta_non_wgs"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#main/manta_output_contigs"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#main/maximum_transcript_support_level/1",
                                "#main/maximum_transcript_support_level/2",
                                "#main/maximum_transcript_support_level/3",
                                "#main/maximum_transcript_support_level/4",
                                "#main/maximum_transcript_support_level/5"
                            ]
                        }
                    ],
                    "id": "#main/maximum_transcript_support_level"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/minimum_fold_change"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "id": "#main/mutect_artifact_detection_mode"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/mutect_max_alt_allele_in_normal_fraction"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/mutect_max_alt_alleles_in_normal_count"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#main/net_chop_method/cterm",
                                "#main/net_chop_method/20s"
                            ]
                        }
                    ],
                    "label": "net_chop_method: NetChop prediction method to use ('cterm' for C term 3.0, '20s' for 20S 3.0)",
                    "doc": "net_chop_method is used to specify which NetChop prediction method to use (\"cterm\" for C term 3.0, \"20s\" for 20S 3.0).\nC-term 3.0 is trained with publicly available MHC class I ligands and the authors believe that is performs best in predicting the\nboundaries of CTL epitopes. 20S is trained with in vitro degradation data.\n",
                    "id": "#main/net_chop_method"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "label": "net_chop_threshold: NetChop prediction threshold",
                    "doc": "net_chop_threshold specifies the threshold to use for NetChop prediction; increasing the threshold results in better specificity, but worse sensitivity.\n",
                    "id": "#main/net_chop_threshold"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "label": "netmhc_stab: sets an option whether to run  NetMHCStabPan or not",
                    "doc": "netmhc_stab sets an option that decides whether it will run NetMHCStabPan after all filtering and add stability predictions to predicted epitopes.\n",
                    "id": "#main/netmhc_stab"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/normal_cov"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "normal",
                    "label": "normal_name: String specifying the name of the WT sample",
                    "doc": "normal_name provides a string for what the WT sample will be referred to in the various\noutputs, for example the VCF files.\n",
                    "id": "#main/normal_name"
                },
                {
                    "type": "string",
                    "label": "tumor_sample_name: Name of the normal sample",
                    "doc": "normal_sample_name is the name of the normal sample to use for phasing of germline variants.\n",
                    "id": "#main/normal_sample_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "normal_sequence: WT sequencing data and readgroup information",
                    "doc": "normal_sequence represents the sequencing data for the WT sample as either FASTQs or BAMs with\naccompanying readgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#main/normal_sequence"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/normal_vaf"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/omni_vcf"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#main/optitype_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#main/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#main/per_target_intervals"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/percentile_threshold"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/phased_proximal_variants_vcf"
                },
                {
                    "type": "string",
                    "id": "#main/picard_metric_accumulation_level"
                },
                {
                    "type": "int",
                    "default": 400,
                    "id": "#main/pindel_insert_size"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/ploidy"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#main/prediction_algorithms"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "label": "pvacseq_threads: Number of threads to use for parallelizing pvacseq prediction",
                    "doc": "pvacseq_threads specifies the number of threads to use for parallelizing peptide-MHC binding prediction calls.\n",
                    "id": "#main/pvacseq_threads"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#main/qc_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#main/qc_minimum_mapping_quality"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#main/read_group_fields"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/readcount_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/readcount_minimum_mapping_quality"
                },
                {
                    "type": "File",
                    "id": "#main/refFlat"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        },
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "label": "reference: Reference fasta file for a desired assembly",
                    "doc": "reference contains the nucleotide sequence for a given assembly (hg37, hg38, etc.)\nin fasta format for the entire genome. This is what reads will be aligned to.\nAppropriate files can be found on ensembl at https://ensembl.org/info/data/ftp/index.html\nWhen providing the reference secondary files corresponding to reference indices must be\nlocated in the same directory as the reference itself. These files can be created with\nsamtools index, bwa index, and picard CreateSequenceDictionary.\n",
                    "id": "#main/reference"
                },
                {
                    "type": "File",
                    "id": "#main/reference_annotation"
                },
                {
                    "type": "File",
                    "id": "#main/reference_dict"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".1.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".2.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".3.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".4.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".5.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".6.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".7.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".8.ht2",
                            "required": null
                        }
                    ],
                    "id": "#main/reference_index"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#main/ribosomal_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#main/rna_bams"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#main/rna_readgroups"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "label": "run_reference_proteome_similarity: sets an option whether to run reference proteome similarity or not",
                    "doc": "run_reference_proteome_similarity sets an option that decides whether it will run reference proteome similarity after all filtering and BLAST peptide sequences against the reference proteome to see if they appear elsewhere in the proteome.\n",
                    "id": "#main/run_reference_proteome_similarity"
                },
                {
                    "type": "string",
                    "id": "#main/sample_name"
                },
                {
                    "type": "int",
                    "doc": "scatters each supported variant detector (varscan, pindel, mutect) into this many parallel jobs",
                    "id": "#main/scatter_count"
                },
                {
                    "type": "File",
                    "id": "#main/somalier_vcf"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#main/strand/first",
                                "#main/strand/second",
                                "#main/strand/unstranded"
                            ]
                        }
                    ],
                    "id": "#main/strand"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#main/strelka_cpu_reserved"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#main/summary_intervals"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#main/synonyms_file"
                },
                {
                    "type": "int",
                    "label": "target_interval_padding: number of bp flanking each target region in which to allow variant calls",
                    "doc": "The effective coverage of capture products generally extends out beyond the actual regions\ntargeted. This parameter allows variants to be called in these wingspan regions, extending\nthis many base pairs from each side of the target regions.\n",
                    "default": 100,
                    "id": "#main/target_interval_padding"
                },
                {
                    "type": "File",
                    "label": "target_intervals: interval_list file of targets used in the sequencing experiment",
                    "doc": "target_intervals is an interval_list corresponding to the targets for the capture reagent.\nBED files with this information can be converted to interval_lists with Picard BedToIntervalList.\nIn general for a WES exome reagent bait_intervals and target_intervals are the same.\n",
                    "id": "#main/target_intervals"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/tdna_cov"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/tdna_vaf"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#main/top_score_metric/lowest",
                                "#main/top_score_metric/median"
                            ]
                        }
                    ],
                    "id": "#main/top_score_metric"
                },
                {
                    "type": "int",
                    "id": "#main/trimming_adapter_min_overlap"
                },
                {
                    "type": "string",
                    "id": "#main/trimming_adapter_trim_end"
                },
                {
                    "type": "File",
                    "id": "#main/trimming_adapters"
                },
                {
                    "type": "int",
                    "id": "#main/trimming_max_uncalled"
                },
                {
                    "type": "int",
                    "id": "#main/trimming_min_readlength"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#main/trna_cov"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/trna_vaf"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "tumor",
                    "label": "tumor_name: String specifying the name of the MT sample",
                    "doc": "tumor_name provides a string for what the MT sample will be referred to in the various\noutputs, for example the VCF files.\n",
                    "id": "#main/tumor_name"
                },
                {
                    "type": "string",
                    "label": "tumor_sample_name: Name of the tumor sample",
                    "doc": "tumor_sample_name is the name of the tumor sample being processed. When processing a multi-sample VCF the sample name must be a sample ID in the input VCF #CHROM header line.\n",
                    "id": "#main/tumor_sample_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "tumor_sequence: MT sequencing data and readgroup information",
                    "doc": "tumor_sequence represents the sequencing data for the MT sample as either FASTQs or BAMs with\naccompanying readgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#main/tumor_sequence"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "An optional VCF with variants that will be flagged as 'VALIDATED' if found in this pipeline's main output VCF",
                    "id": "#main/validated_variants"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "CHROM",
                        "POS",
                        "ID",
                        "REF",
                        "ALT",
                        "set",
                        "AC",
                        "AF"
                    ],
                    "id": "#main/variants_to_table_fields"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "GT",
                        "AD"
                    ],
                    "id": "#main/variants_to_table_genotype_fields"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#main/varscan_max_normal_freq"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#main/varscan_min_coverage"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.05,
                    "id": "#main/varscan_min_var_freq"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.99,
                    "id": "#main/varscan_p_value"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#main/varscan_strand_filter"
                },
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "id": "#main/vep_cache_dir"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#vep_custom_annotation.yml/vep_custom_annotation"
                    },
                    "doc": "custom type, check types directory for input format",
                    "id": "#main/vep_custom_annotations"
                },
                {
                    "type": "string",
                    "doc": "genome assembly to use in vep. Examples: GRCh38 or GRCm38",
                    "id": "#main/vep_ensembl_assembly"
                },
                {
                    "type": "string",
                    "doc": "ensembl species - Must be present in the cache directory. Examples: homo_sapiens or mus_musculus",
                    "id": "#main/vep_ensembl_species"
                },
                {
                    "type": "string",
                    "doc": "ensembl version - Must be present in the cache directory. Example: 95",
                    "id": "#main/vep_ensembl_version"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#main/vep_pick/pick",
                                "#main/vep_pick/flag_pick",
                                "#main/vep_pick/pick_allele",
                                "#main/vep_pick/per_gene",
                                "#main/vep_pick/pick_allele_gene",
                                "#main/vep_pick/flag_pick_allele",
                                "#main/vep_pick/flag_pick_allele_gene"
                            ]
                        }
                    ],
                    "id": "#main/vep_pick"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "HGVSc",
                        "HGVSp"
                    ],
                    "id": "#main/vep_to_table_fields"
                }
            ],
            "steps": [
                {
                    "run": "#extract_hla_alleles.cwl",
                    "in": [
                        {
                            "source": "#main/germline/optitype_tsv",
                            "id": "#main/extract_alleles/allele_file"
                        }
                    ],
                    "out": [
                        "#main/extract_alleles/allele_string"
                    ],
                    "id": "#main/extract_alleles"
                },
                {
                    "run": "#germline_exome_hla_typing.cwl",
                    "in": [
                        {
                            "source": "#main/annotate_coding_only",
                            "id": "#main/germline/annotate_coding_only"
                        },
                        {
                            "source": "#main/bait_intervals",
                            "id": "#main/germline/bait_intervals"
                        },
                        {
                            "source": "#main/bqsr_intervals",
                            "id": "#main/germline/bqsr_intervals"
                        },
                        {
                            "source": "#main/bqsr_known_sites",
                            "id": "#main/germline/bqsr_known_sites"
                        },
                        {
                            "source": "#main/gvcf_gq_bands",
                            "id": "#main/germline/gvcf_gq_bands"
                        },
                        {
                            "source": "#main/gatk_haplotypecaller_intervals",
                            "id": "#main/germline/intervals"
                        },
                        {
                            "source": "#main/omni_vcf",
                            "id": "#main/germline/omni_vcf"
                        },
                        {
                            "source": "#main/optitype_name",
                            "id": "#main/germline/optitype_name"
                        },
                        {
                            "source": "#main/per_base_intervals",
                            "id": "#main/germline/per_base_intervals"
                        },
                        {
                            "source": "#main/per_target_intervals",
                            "id": "#main/germline/per_target_intervals"
                        },
                        {
                            "source": "#main/picard_metric_accumulation_level",
                            "id": "#main/germline/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#main/ploidy",
                            "id": "#main/germline/ploidy"
                        },
                        {
                            "source": "#main/qc_minimum_base_quality",
                            "id": "#main/germline/qc_minimum_base_quality"
                        },
                        {
                            "source": "#main/qc_minimum_mapping_quality",
                            "id": "#main/germline/qc_minimum_mapping_quality"
                        },
                        {
                            "source": "#main/reference",
                            "id": "#main/germline/reference"
                        },
                        {
                            "source": "#main/normal_sequence",
                            "id": "#main/germline/sequence"
                        },
                        {
                            "source": "#main/summary_intervals",
                            "id": "#main/germline/summary_intervals"
                        },
                        {
                            "source": "#main/synonyms_file",
                            "id": "#main/germline/synonyms_file"
                        },
                        {
                            "source": "#main/target_interval_padding",
                            "id": "#main/germline/target_interval_padding"
                        },
                        {
                            "source": "#main/target_intervals",
                            "id": "#main/germline/target_intervals"
                        },
                        {
                            "source": "#main/vep_cache_dir",
                            "id": "#main/germline/vep_cache_dir"
                        },
                        {
                            "source": "#main/vep_custom_annotations",
                            "id": "#main/germline/vep_custom_annotations"
                        },
                        {
                            "source": "#main/vep_ensembl_assembly",
                            "id": "#main/germline/vep_ensembl_assembly"
                        },
                        {
                            "source": "#main/vep_ensembl_species",
                            "id": "#main/germline/vep_ensembl_species"
                        },
                        {
                            "source": "#main/vep_ensembl_version",
                            "id": "#main/germline/vep_ensembl_version"
                        }
                    ],
                    "out": [
                        "#main/germline/cram",
                        "#main/germline/mark_duplicates_metrics",
                        "#main/germline/insert_size_metrics",
                        "#main/germline/insert_size_histogram",
                        "#main/germline/alignment_summary_metrics",
                        "#main/germline/hs_metrics",
                        "#main/germline/per_target_coverage_metrics",
                        "#main/germline/per_target_hs_metrics",
                        "#main/germline/per_base_coverage_metrics",
                        "#main/germline/per_base_hs_metrics",
                        "#main/germline/summary_hs_metrics",
                        "#main/germline/flagstats",
                        "#main/germline/verify_bam_id_metrics",
                        "#main/germline/verify_bam_id_depth",
                        "#main/germline/raw_vcf",
                        "#main/germline/final_vcf",
                        "#main/germline/filtered_vcf",
                        "#main/germline/vep_summary",
                        "#main/germline/optitype_tsv",
                        "#main/germline/optitype_plot"
                    ],
                    "id": "#main/germline"
                },
                {
                    "run": "#hla_consensus.cwl",
                    "in": [
                        {
                            "source": "#main/clinical_mhc_classII_alleles",
                            "id": "#main/hla_consensus/clinical_mhc_classII_alleles"
                        },
                        {
                            "source": "#main/clinical_mhc_classI_alleles",
                            "id": "#main/hla_consensus/clinical_mhc_classI_alleles"
                        },
                        {
                            "source": "#main/extract_alleles/allele_string",
                            "id": "#main/hla_consensus/optitype_hla_alleles"
                        }
                    ],
                    "out": [
                        "#main/hla_consensus/consensus_alleles",
                        "#main/hla_consensus/hla_call_files"
                    ],
                    "id": "#main/hla_consensus"
                },
                {
                    "run": "#intersect_known_variants.cwl",
                    "in": [
                        {
                            "source": "#main/validated_variants",
                            "id": "#main/intersect_passing_variants/validated_variants"
                        },
                        {
                            "source": "#main/somatic/final_filtered_vcf",
                            "id": "#main/intersect_passing_variants/vcf"
                        }
                    ],
                    "out": [
                        "#main/intersect_passing_variants/validated_and_pipeline_vcf"
                    ],
                    "id": "#main/intersect_passing_variants"
                },
                {
                    "run": "#phase_vcf.cwl",
                    "in": [
                        {
                            "source": "#main/somatic/tumor_cram",
                            "id": "#main/phase_vcf/bam"
                        },
                        {
                            "source": "#main/germline/final_vcf",
                            "id": "#main/phase_vcf/germline_vcf"
                        },
                        {
                            "source": "#main/normal_sample_name",
                            "id": "#main/phase_vcf/normal_sample_name"
                        },
                        {
                            "source": "#main/reference",
                            "id": "#main/phase_vcf/reference"
                        },
                        {
                            "source": "#main/reference_dict",
                            "id": "#main/phase_vcf/reference_dict"
                        },
                        {
                            "source": "#main/somatic/final_filtered_vcf",
                            "id": "#main/phase_vcf/somatic_vcf"
                        },
                        {
                            "source": "#main/tumor_sample_name",
                            "id": "#main/phase_vcf/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#main/phase_vcf/phased_vcf"
                    ],
                    "id": "#main/phase_vcf"
                },
                {
                    "run": "#pvacseq.cwl",
                    "in": [
                        {
                            "source": "#main/additional_report_columns",
                            "id": "#main/pvacseq/additional_report_columns"
                        },
                        {
                            "source": "#main/allele_specific_binding_thresholds",
                            "id": "#main/pvacseq/allele_specific_binding_thresholds"
                        },
                        {
                            "source": "#main/hla_consensus/consensus_alleles",
                            "id": "#main/pvacseq/alleles"
                        },
                        {
                            "source": "#main/binding_threshold",
                            "id": "#main/pvacseq/binding_threshold"
                        },
                        {
                            "source": "#main/intersect_passing_variants/validated_and_pipeline_vcf",
                            "id": "#main/pvacseq/detect_variants_vcf"
                        },
                        {
                            "source": "#main/downstream_sequence_length",
                            "id": "#main/pvacseq/downstream_sequence_length"
                        },
                        {
                            "source": "#main/epitope_lengths_class_i",
                            "id": "#main/pvacseq/epitope_lengths_class_i"
                        },
                        {
                            "source": "#main/epitope_lengths_class_ii",
                            "id": "#main/pvacseq/epitope_lengths_class_ii"
                        },
                        {
                            "source": "#main/exclude_nas",
                            "id": "#main/pvacseq/exclude_nas"
                        },
                        {
                            "source": "#main/expn_val",
                            "id": "#main/pvacseq/expn_val"
                        },
                        {
                            "source": "#main/fasta_size",
                            "id": "#main/pvacseq/fasta_size"
                        },
                        {
                            "source": "#main/rnaseq/gene_abundance",
                            "id": "#main/pvacseq/gene_expression_file"
                        },
                        {
                            "source": "#main/maximum_transcript_support_level",
                            "id": "#main/pvacseq/maximum_transcript_support_level"
                        },
                        {
                            "source": "#main/minimum_fold_change",
                            "id": "#main/pvacseq/minimum_fold_change"
                        },
                        {
                            "source": "#main/pvacseq_threads",
                            "id": "#main/pvacseq/n_threads"
                        },
                        {
                            "source": "#main/net_chop_method",
                            "id": "#main/pvacseq/net_chop_method"
                        },
                        {
                            "source": "#main/net_chop_threshold",
                            "id": "#main/pvacseq/net_chop_threshold"
                        },
                        {
                            "source": "#main/netmhc_stab",
                            "id": "#main/pvacseq/netmhc_stab"
                        },
                        {
                            "source": "#main/normal_cov",
                            "id": "#main/pvacseq/normal_cov"
                        },
                        {
                            "source": "#main/normal_sample_name",
                            "id": "#main/pvacseq/normal_sample_name"
                        },
                        {
                            "source": "#main/normal_vaf",
                            "id": "#main/pvacseq/normal_vaf"
                        },
                        {
                            "source": "#main/percentile_threshold",
                            "id": "#main/pvacseq/percentile_threshold"
                        },
                        {
                            "source": "#main/phase_vcf/phased_vcf",
                            "id": "#main/pvacseq/phased_proximal_variants_vcf"
                        },
                        {
                            "source": "#main/prediction_algorithms",
                            "id": "#main/pvacseq/prediction_algorithms"
                        },
                        {
                            "source": "#main/readcount_minimum_base_quality",
                            "id": "#main/pvacseq/readcount_minimum_base_quality"
                        },
                        {
                            "source": "#main/readcount_minimum_mapping_quality",
                            "id": "#main/pvacseq/readcount_minimum_mapping_quality"
                        },
                        {
                            "source": "#main/reference",
                            "id": "#main/pvacseq/reference_fasta"
                        },
                        {
                            "source": "#main/rnaseq/final_bam",
                            "id": "#main/pvacseq/rnaseq_bam"
                        },
                        {
                            "source": "#main/run_reference_proteome_similarity",
                            "id": "#main/pvacseq/run_reference_proteome_similarity"
                        },
                        {
                            "source": "#main/tumor_sample_name",
                            "id": "#main/pvacseq/sample_name"
                        },
                        {
                            "source": "#main/tdna_cov",
                            "id": "#main/pvacseq/tdna_cov"
                        },
                        {
                            "source": "#main/tdna_vaf",
                            "id": "#main/pvacseq/tdna_vaf"
                        },
                        {
                            "source": "#main/top_score_metric",
                            "id": "#main/pvacseq/top_score_metric"
                        },
                        {
                            "source": "#main/rnaseq/transcript_abundance_tsv",
                            "id": "#main/pvacseq/transcript_expression_file"
                        },
                        {
                            "source": "#main/trna_cov",
                            "id": "#main/pvacseq/trna_cov"
                        },
                        {
                            "source": "#main/trna_vaf",
                            "id": "#main/pvacseq/trna_vaf"
                        },
                        {
                            "source": "#main/variants_to_table_fields",
                            "id": "#main/pvacseq/variants_to_table_fields"
                        },
                        {
                            "source": "#main/variants_to_table_genotype_fields",
                            "id": "#main/pvacseq/variants_to_table_genotype_fields"
                        },
                        {
                            "source": "#main/vep_to_table_fields",
                            "id": "#main/pvacseq/vep_to_table_fields"
                        }
                    ],
                    "out": [
                        "#main/pvacseq/annotated_vcf",
                        "#main/pvacseq/annotated_tsv",
                        "#main/pvacseq/pvacseq_predictions"
                    ],
                    "id": "#main/pvacseq"
                },
                {
                    "run": "#rnaseq.cwl",
                    "in": [
                        {
                            "source": "#main/vep_ensembl_assembly",
                            "id": "#main/rnaseq/assembly"
                        },
                        {
                            "source": "#main/gene_transcript_lookup_table",
                            "id": "#main/rnaseq/gene_transcript_lookup_table"
                        },
                        {
                            "source": "#main/rna_bams",
                            "id": "#main/rnaseq/instrument_data_bams"
                        },
                        {
                            "source": "#main/kallisto_index",
                            "id": "#main/rnaseq/kallisto_index"
                        },
                        {
                            "source": "#main/read_group_fields",
                            "id": "#main/rnaseq/read_group_fields"
                        },
                        {
                            "source": "#main/rna_readgroups",
                            "id": "#main/rnaseq/read_group_id"
                        },
                        {
                            "source": "#main/refFlat",
                            "id": "#main/rnaseq/refFlat"
                        },
                        {
                            "source": "#main/reference",
                            "id": "#main/rnaseq/reference"
                        },
                        {
                            "source": "#main/reference_annotation",
                            "id": "#main/rnaseq/reference_annotation"
                        },
                        {
                            "source": "#main/reference_index",
                            "id": "#main/rnaseq/reference_index"
                        },
                        {
                            "source": "#main/ribosomal_intervals",
                            "id": "#main/rnaseq/ribosomal_intervals"
                        },
                        {
                            "source": "#main/sample_name",
                            "id": "#main/rnaseq/sample_name"
                        },
                        {
                            "source": "#main/vep_ensembl_species",
                            "id": "#main/rnaseq/species"
                        },
                        {
                            "source": "#main/strand",
                            "id": "#main/rnaseq/strand"
                        },
                        {
                            "source": "#main/trimming_adapter_min_overlap",
                            "id": "#main/rnaseq/trimming_adapter_min_overlap"
                        },
                        {
                            "source": "#main/trimming_adapter_trim_end",
                            "id": "#main/rnaseq/trimming_adapter_trim_end"
                        },
                        {
                            "source": "#main/trimming_adapters",
                            "id": "#main/rnaseq/trimming_adapters"
                        },
                        {
                            "source": "#main/trimming_max_uncalled",
                            "id": "#main/rnaseq/trimming_max_uncalled"
                        },
                        {
                            "source": "#main/trimming_min_readlength",
                            "id": "#main/rnaseq/trimming_min_readlength"
                        }
                    ],
                    "out": [
                        "#main/rnaseq/final_bam",
                        "#main/rnaseq/stringtie_transcript_gtf",
                        "#main/rnaseq/stringtie_gene_expression_tsv",
                        "#main/rnaseq/transcript_abundance_tsv",
                        "#main/rnaseq/transcript_abundance_h5",
                        "#main/rnaseq/gene_abundance",
                        "#main/rnaseq/metrics",
                        "#main/rnaseq/chart",
                        "#main/rnaseq/fusion_evidence",
                        "#main/rnaseq/bamcoverage_bigwig"
                    ],
                    "id": "#main/rnaseq"
                },
                {
                    "run": "#somatic_exome.cwl",
                    "in": [
                        {
                            "source": "#main/annotate_coding_only",
                            "id": "#main/somatic/annotate_coding_only"
                        },
                        {
                            "source": "#main/bait_intervals",
                            "id": "#main/somatic/bait_intervals"
                        },
                        {
                            "source": "#main/bqsr_intervals",
                            "id": "#main/somatic/bqsr_intervals"
                        },
                        {
                            "source": "#main/bqsr_known_sites",
                            "id": "#main/somatic/bqsr_known_sites"
                        },
                        {
                            "source": "#main/cle_vcf_filter",
                            "id": "#main/somatic/cle_vcf_filter"
                        },
                        {
                            "source": "#main/docm_vcf",
                            "id": "#main/somatic/docm_vcf"
                        },
                        {
                            "source": "#main/filter_docm_variants",
                            "id": "#main/somatic/filter_docm_variants"
                        },
                        {
                            "source": "#main/manta_call_regions",
                            "id": "#main/somatic/manta_call_regions"
                        },
                        {
                            "source": "#main/manta_non_wgs",
                            "id": "#main/somatic/manta_non_wgs"
                        },
                        {
                            "source": "#main/manta_output_contigs",
                            "id": "#main/somatic/manta_output_contigs"
                        },
                        {
                            "source": "#main/mutect_artifact_detection_mode",
                            "id": "#main/somatic/mutect_artifact_detection_mode"
                        },
                        {
                            "source": "#main/mutect_max_alt_allele_in_normal_fraction",
                            "id": "#main/somatic/mutect_max_alt_allele_in_normal_fraction"
                        },
                        {
                            "source": "#main/mutect_max_alt_alleles_in_normal_count",
                            "id": "#main/somatic/mutect_max_alt_alleles_in_normal_count"
                        },
                        {
                            "source": "#main/normal_name",
                            "id": "#main/somatic/normal_name"
                        },
                        {
                            "source": "#main/normal_sample_name",
                            "id": "#main/somatic/normal_sample_name"
                        },
                        {
                            "source": "#main/normal_sequence",
                            "id": "#main/somatic/normal_sequence"
                        },
                        {
                            "source": "#main/omni_vcf",
                            "id": "#main/somatic/omni_vcf"
                        },
                        {
                            "source": "#main/per_base_intervals",
                            "id": "#main/somatic/per_base_intervals"
                        },
                        {
                            "source": "#main/per_target_intervals",
                            "id": "#main/somatic/per_target_intervals"
                        },
                        {
                            "source": "#main/picard_metric_accumulation_level",
                            "id": "#main/somatic/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#main/pindel_insert_size",
                            "id": "#main/somatic/pindel_insert_size"
                        },
                        {
                            "source": "#main/qc_minimum_base_quality",
                            "id": "#main/somatic/qc_minimum_base_quality"
                        },
                        {
                            "source": "#main/qc_minimum_mapping_quality",
                            "id": "#main/somatic/qc_minimum_mapping_quality"
                        },
                        {
                            "source": "#main/reference",
                            "id": "#main/somatic/reference"
                        },
                        {
                            "source": "#main/scatter_count",
                            "id": "#main/somatic/scatter_count"
                        },
                        {
                            "source": "#main/somalier_vcf",
                            "id": "#main/somatic/somalier_vcf"
                        },
                        {
                            "source": "#main/strelka_cpu_reserved",
                            "id": "#main/somatic/strelka_cpu_reserved"
                        },
                        {
                            "source": "#main/summary_intervals",
                            "id": "#main/somatic/summary_intervals"
                        },
                        {
                            "source": "#main/synonyms_file",
                            "id": "#main/somatic/synonyms_file"
                        },
                        {
                            "source": "#main/target_interval_padding",
                            "id": "#main/somatic/target_interval_padding"
                        },
                        {
                            "source": "#main/target_intervals",
                            "id": "#main/somatic/target_intervals"
                        },
                        {
                            "source": "#main/tumor_name",
                            "id": "#main/somatic/tumor_name"
                        },
                        {
                            "source": "#main/tumor_sample_name",
                            "id": "#main/somatic/tumor_sample_name"
                        },
                        {
                            "source": "#main/tumor_sequence",
                            "id": "#main/somatic/tumor_sequence"
                        },
                        {
                            "source": "#main/validated_variants",
                            "id": "#main/somatic/validated_variants"
                        },
                        {
                            "source": "#main/variants_to_table_fields",
                            "id": "#main/somatic/variants_to_table_fields"
                        },
                        {
                            "source": "#main/variants_to_table_genotype_fields",
                            "id": "#main/somatic/variants_to_table_genotype_fields"
                        },
                        {
                            "source": "#main/varscan_max_normal_freq",
                            "id": "#main/somatic/varscan_max_normal_freq"
                        },
                        {
                            "source": "#main/varscan_min_coverage",
                            "id": "#main/somatic/varscan_min_coverage"
                        },
                        {
                            "source": "#main/varscan_min_var_freq",
                            "id": "#main/somatic/varscan_min_var_freq"
                        },
                        {
                            "source": "#main/varscan_p_value",
                            "id": "#main/somatic/varscan_p_value"
                        },
                        {
                            "source": "#main/varscan_strand_filter",
                            "id": "#main/somatic/varscan_strand_filter"
                        },
                        {
                            "source": "#main/vep_cache_dir",
                            "id": "#main/somatic/vep_cache_dir"
                        },
                        {
                            "source": "#main/vep_custom_annotations",
                            "id": "#main/somatic/vep_custom_annotations"
                        },
                        {
                            "source": "#main/vep_ensembl_assembly",
                            "id": "#main/somatic/vep_ensembl_assembly"
                        },
                        {
                            "source": "#main/vep_ensembl_species",
                            "id": "#main/somatic/vep_ensembl_species"
                        },
                        {
                            "source": "#main/vep_ensembl_version",
                            "id": "#main/somatic/vep_ensembl_version"
                        },
                        {
                            "source": "#main/vep_pick",
                            "id": "#main/somatic/vep_pick"
                        },
                        {
                            "source": "#main/vep_to_table_fields",
                            "id": "#main/somatic/vep_to_table_fields"
                        }
                    ],
                    "out": [
                        "#main/somatic/tumor_cram",
                        "#main/somatic/tumor_mark_duplicates_metrics",
                        "#main/somatic/tumor_insert_size_metrics",
                        "#main/somatic/tumor_alignment_summary_metrics",
                        "#main/somatic/tumor_hs_metrics",
                        "#main/somatic/tumor_per_target_coverage_metrics",
                        "#main/somatic/tumor_per_target_hs_metrics",
                        "#main/somatic/tumor_per_base_coverage_metrics",
                        "#main/somatic/tumor_per_base_hs_metrics",
                        "#main/somatic/tumor_summary_hs_metrics",
                        "#main/somatic/tumor_flagstats",
                        "#main/somatic/tumor_verify_bam_id_metrics",
                        "#main/somatic/tumor_verify_bam_id_depth",
                        "#main/somatic/normal_cram",
                        "#main/somatic/normal_mark_duplicates_metrics",
                        "#main/somatic/normal_insert_size_metrics",
                        "#main/somatic/normal_alignment_summary_metrics",
                        "#main/somatic/normal_hs_metrics",
                        "#main/somatic/normal_per_target_coverage_metrics",
                        "#main/somatic/normal_per_target_hs_metrics",
                        "#main/somatic/normal_per_base_coverage_metrics",
                        "#main/somatic/normal_per_base_hs_metrics",
                        "#main/somatic/normal_summary_hs_metrics",
                        "#main/somatic/normal_flagstats",
                        "#main/somatic/normal_verify_bam_id_metrics",
                        "#main/somatic/normal_verify_bam_id_depth",
                        "#main/somatic/mutect_unfiltered_vcf",
                        "#main/somatic/mutect_filtered_vcf",
                        "#main/somatic/strelka_unfiltered_vcf",
                        "#main/somatic/strelka_filtered_vcf",
                        "#main/somatic/varscan_unfiltered_vcf",
                        "#main/somatic/varscan_filtered_vcf",
                        "#main/somatic/pindel_unfiltered_vcf",
                        "#main/somatic/pindel_filtered_vcf",
                        "#main/somatic/docm_filtered_vcf",
                        "#main/somatic/final_vcf",
                        "#main/somatic/final_filtered_vcf",
                        "#main/somatic/final_tsv",
                        "#main/somatic/vep_summary",
                        "#main/somatic/tumor_snv_bam_readcount_tsv",
                        "#main/somatic/tumor_indel_bam_readcount_tsv",
                        "#main/somatic/normal_snv_bam_readcount_tsv",
                        "#main/somatic/normal_indel_bam_readcount_tsv",
                        "#main/somatic/intervals_antitarget",
                        "#main/somatic/intervals_target",
                        "#main/somatic/normal_antitarget_coverage",
                        "#main/somatic/normal_target_coverage",
                        "#main/somatic/reference_coverage",
                        "#main/somatic/cn_diagram",
                        "#main/somatic/cn_scatter_plot",
                        "#main/somatic/tumor_antitarget_coverage",
                        "#main/somatic/tumor_target_coverage",
                        "#main/somatic/tumor_bin_level_ratios",
                        "#main/somatic/tumor_segmented_ratios",
                        "#main/somatic/diploid_variants",
                        "#main/somatic/somatic_variants",
                        "#main/somatic/all_candidates",
                        "#main/somatic/small_candidates",
                        "#main/somatic/tumor_only_variants",
                        "#main/somatic/somalier_concordance_metrics",
                        "#main/somatic/somalier_concordance_statistics"
                    ],
                    "id": "#main/somatic"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#main/germline/alignment_summary_metrics",
                    "id": "#main/alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/all_candidates",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/all_candidates"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "outputSource": "#main/extract_alleles/allele_string",
                    "id": "#main/allele_string"
                },
                {
                    "type": "File",
                    "outputSource": "#main/pvacseq/annotated_tsv",
                    "id": "#main/annotated_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#main/pvacseq/annotated_vcf",
                    "id": "#main/annotated_vcf"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/rnaseq/chart",
                    "label": "Plot for RNA-seq diagnosis/quality metrics",
                    "doc": "PDF file for the plot of RNA sequencing coverage at the normalized position across transcript as RNA-seq diagnosis/quality metrics, created by picard CollectRnaSeqMetrics tool\n",
                    "id": "#main/chart"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/cn_diagram",
                    "id": "#main/cn_diagram"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/cn_scatter_plot",
                    "id": "#main/cn_scatter_plot"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "outputSource": "#main/hla_consensus/consensus_alleles",
                    "id": "#main/consensus_alleles"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/cram",
                    "id": "#main/cram"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/diploid_variants",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/diploid_variants"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/docm_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/docm_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/final_bam",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "label": "Sorted BAM from tumor RNA",
                    "doc": "Sorted BAM file of sequencing read alignments by HISAT2 with duplicate reads tagged\n",
                    "id": "#main/final_bam"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/bamcoverage_bigwig",
                    "id": "#main/final_bigwig"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/final_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/final_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/final_tsv",
                    "id": "#main/final_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/flagstats",
                    "id": "#main/flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/gene_abundance",
                    "label": "Gene-level abundance output by tximport with kallisto output",
                    "doc": "Tab-delimited file containing the abundance estimates summarized in the gene level with kallisto output by Bioconductor tximport tool\n",
                    "id": "#main/gene_abundance"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/germline_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/final_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/germline_final_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/raw_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/germline_raw_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/vep_summary",
                    "id": "#main/germline_vep_summary"
                },
                {
                    "type": "Directory",
                    "outputSource": "#main/hla_consensus/hla_call_files",
                    "id": "#main/hla_call_files"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/hs_metrics",
                    "id": "#main/hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/insert_size_histogram",
                    "id": "#main/insert_size_histogram"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/insert_size_metrics",
                    "id": "#main/insert_size_metrics"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/intervals_antitarget",
                    "id": "#main/intervals_antitarget"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/intervals_target",
                    "id": "#main/intervals_target"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/mark_duplicates_metrics",
                    "id": "#main/mark_duplicates_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/metrics",
                    "label": "RNA-seq Diagnosis/quality metrics from tumor RNA",
                    "doc": "RNA-seq Diagnosis/quality metrics showing the distribution of the bases within the transcripts, created by picard CollectRnaSeqMetrics tool\n",
                    "id": "#main/metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/mutect_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/mutect_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/mutect_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/mutect_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_alignment_summary_metrics",
                    "label": "Sequencign alignment summary from normal DNA",
                    "doc": "Diagnosis/quality metrics summarizing the quality of sequencing read alignments from a normal DNA sample, reported by the picard CollectAlignmentSummaryMetrics tool\n",
                    "id": "#main/normal_alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_antitarget_coverage",
                    "id": "#main/normal_antitarget_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_cram",
                    "label": "Sorted CRAM from normal DNA",
                    "doc": "Sorted CRAM file of sequencing read alignments by bwa-mem from a normal DNA sample with duplicate reads tagged\n",
                    "id": "#main/normal_cram"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_flagstats",
                    "label": "Sequencing count metrics based on SAM FLAG field from normal sample",
                    "doc": "Summary with the count numbers of alignments for each FLAG type from a normal DNA sample, including 13 categories based on the bit flags in the FLAG field\n",
                    "id": "#main/normal_flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_hs_metrics",
                    "label": "Sequencing coverage summary of target intervals from normal DNA",
                    "doc": "Diagnosis/quality metrics specific for sequencing data generated through hybrid-selection (e.g. whole exome) from a normal DNA sample, for example to assess target coverage\n",
                    "id": "#main/normal_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_indel_bam_readcount_tsv",
                    "id": "#main/normal_indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_insert_size_metrics",
                    "label": "Paired-end sequencing diagnosis/quality metrics from normal DNA",
                    "doc": "Diagnosis/quality metrics including the insert size distribution and read orientation of the paired-end libraries from a normal DNA sample\n",
                    "id": "#main/normal_insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_mark_duplicates_metrics",
                    "label": "Sequencing duplicate metrics from normal DNA",
                    "doc": "Duplication metrics on duplicate sequencing reads from a normal DNA sample, identified by picard MarkDuplicates tool\n",
                    "id": "#main/normal_mark_duplicates_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/normal_per_base_coverage_metrics",
                    "label": "Sequencing per-base coverage summary at target sites from normal DNA",
                    "doc": "Diagnosis/quality metrics showing detailed sequencing coverage per target site (optional, known variant sites of clinical significance from ClinVar for example) from a normal DNA sample\n",
                    "id": "#main/normal_per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/normal_per_base_hs_metrics",
                    "label": "Sequencing coverage summary at target sites from normal DNA",
                    "doc": "Diagnosis/quality metrics for sequencing coverage at target sites (optional, known variant sites of clinical significance from ClinVar for example) from a normal DNA sample\n",
                    "id": "#main/normal_per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/normal_per_target_coverage_metrics",
                    "label": "Sequencing per-target coverage summary of target intervals from normal DNA",
                    "doc": "Diagnosis/quality metrics showing detailed sequencing coverage per target interval (optional, 59 genes recommended by ACMG for clinical exome and genome sequencing for example) from a normal DNA sample\n",
                    "id": "#main/normal_per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/normal_per_target_hs_metrics",
                    "label": "Sequencing coverage summary of target intervals from normal DNA",
                    "doc": "Diagnosis/quality metrics for sequencing coverage for target intervals (optional, 59 genes recommended by ACMG for clinical exome and genome sequencing for example) from a normal DNA sample\n",
                    "id": "#main/normal_per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_snv_bam_readcount_tsv",
                    "id": "#main/normal_snv_bam_readcount_tsv"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/normal_summary_hs_metrics",
                    "id": "#main/normal_summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_target_coverage",
                    "id": "#main/normal_target_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_verify_bam_id_depth",
                    "label": "Sequencing quality assessment metric for normal sample genotyping",
                    "doc": "verifyBamID output files showing the sequencing depth distribution at the marker positions from Omni genotype data with a normal DNA sample, across all readGroups and per readGroup separately\n",
                    "id": "#main/normal_verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/normal_verify_bam_id_metrics",
                    "label": "Sequencing quality assessment metric for normal sample contamination",
                    "doc": "verifyBamID output files containing the contamination estimate in a normal DNA sample, across all readGroups and per readGroup separately\n",
                    "id": "#main/normal_verify_bam_id_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/optitype_plot",
                    "id": "#main/optitype_plot"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/optitype_tsv",
                    "id": "#main/optitype_tsv"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/germline/per_base_coverage_metrics",
                    "id": "#main/per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/germline/per_base_hs_metrics",
                    "id": "#main/per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/germline/per_target_coverage_metrics",
                    "id": "#main/per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/germline/per_target_hs_metrics",
                    "id": "#main/per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/phase_vcf/phased_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/phased_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/pindel_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/pindel_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/pindel_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/pindel_unfiltered_vcf"
                },
                {
                    "type": "Directory",
                    "outputSource": "#main/pvacseq/pvacseq_predictions",
                    "id": "#main/pvacseq_predictions"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/reference_coverage",
                    "id": "#main/reference_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/small_candidates",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/small_candidates"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/somalier_concordance_metrics",
                    "id": "#main/somalier_concordance_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/somalier_concordance_statistics",
                    "id": "#main/somalier_concordance_statistics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/final_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/somatic_final_vcf"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/somatic_variants",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/somatic_variants"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/vep_summary",
                    "id": "#main/somatic_vep_summary"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/strelka_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/strelka_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/strelka_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/strelka_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/stringtie_gene_expression_tsv",
                    "label": "Gene abundance table from tumor RNA by StringTie",
                    "doc": "Tab-delimited file containing gene abundances in FPKM and TPM, created by StringTie\n",
                    "id": "#main/stringtie_gene_expression_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/stringtie_transcript_gtf",
                    "label": "Transcript GTF assembled from tumor RNA by StringTie",
                    "doc": "GTF file containing the transcripts assembled from the tumor RNA sample, created by StringTie\n",
                    "id": "#main/stringtie_transcript_gtf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/germline/summary_hs_metrics",
                    "id": "#main/summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/transcript_abundance_h5",
                    "label": "Transcript-level abundance table in HDF5 format by kallisto",
                    "doc": "HDF5 binary file containing transcript-level abundance esimates, bootstrap estimate, and so on, created by kallisto\n",
                    "id": "#main/transcript_abundance_h5"
                },
                {
                    "type": "File",
                    "outputSource": "#main/rnaseq/transcript_abundance_tsv",
                    "label": "Transcript-level abundance table by kallisto",
                    "doc": "Tab-delimited file containing transcript-level abundance estimates in TPM, created by kallisto\n",
                    "id": "#main/transcript_abundance_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_alignment_summary_metrics",
                    "label": "Sequencign alignment summary from tumor DNA",
                    "doc": "Diagnosis/quality metrics summarizing the quality of sequencing read alignments from a tumor DNA sample, reported by the picard CollectAlignmentSummaryMetrics tool\n",
                    "id": "#main/tumor_alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_antitarget_coverage",
                    "id": "#main/tumor_antitarget_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_bin_level_ratios",
                    "id": "#main/tumor_bin_level_ratios"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_cram",
                    "label": "Sorted CRAM from tumor DNA",
                    "doc": "Sorted CRAM file of sequencing read alignments by bwa-mem from a tumor DNA sample with duplicate reads tagged\n",
                    "id": "#main/tumor_cram"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_flagstats",
                    "label": "Sequencing count metrics based on SAM FLAG field from tumor sample",
                    "doc": "Summary with the count numbers of alignments for each FLAG type from a tumor DNA sample, including 13 categories based on the bit flags in the FLAG field\n",
                    "id": "#main/tumor_flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_hs_metrics",
                    "label": "Sequencing coverage summary of target intervals from tumor DNA",
                    "doc": "Diagnosis/quality metrics specific for sequencing data generated through hybrid-selection (e.g. whole exome) from a tumor DNA sample, for example to assess target coverage of WES\n",
                    "id": "#main/tumor_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_indel_bam_readcount_tsv",
                    "id": "#main/tumor_indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_insert_size_metrics",
                    "label": "Paired-end sequencing diagnosis/quality metrics from tumor DNA",
                    "doc": "Diagnosis/quality metrics including the insert size distribution and read orientation of the paired-end libraries from a tumor DNA sample\n",
                    "id": "#main/tumor_insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_mark_duplicates_metrics",
                    "label": "Sequencing duplicate metrics from tumor DNA",
                    "doc": "Duplication metrics on duplicate sequencing reads from a tumor DNA sample, identified by picard MarkDuplicates tool\n",
                    "id": "#main/tumor_mark_duplicates_metrics"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#main/somatic/tumor_only_variants",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/tumor_only_variants"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/tumor_per_base_coverage_metrics",
                    "label": "Sequencing per-base coverage summary at target sites from tumor DNA",
                    "doc": "Diagnosis/quality metrics showing detailed sequencing coverage per target site (optional, known variant sites of clinical significance from ClinVar for example) from a tumor DNA sample\n",
                    "id": "#main/tumor_per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/tumor_per_base_hs_metrics",
                    "label": "Sequencing coverage summary at target sites from tumor DNA",
                    "doc": "Diagnosis/quality metrics for sequencing coverage at target sites (optional, known variant sites of clinical significance from ClinVar for example) from a tumor DNA sample\n",
                    "id": "#main/tumor_per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/tumor_per_target_coverage_metrics",
                    "label": "Sequencing per-target coverage summary of target intervals from tumor DNA",
                    "doc": "Diagnosis/quality metrics showing detailed sequencing coverage per target interval (optional, 59 genes recommended by ACMG for clinical exome and genome sequencing for example) from a tumor DNA sample\n",
                    "id": "#main/tumor_per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/tumor_per_target_hs_metrics",
                    "label": "Sequencing coverage summary of target intervals from tumor DNA",
                    "doc": "Diagnosis/quality metrics for sequencing coverage for target intervals (optional, 59 genes recommended by ACMG for clinical exome and genome sequencing for example) from a tumor DNA sample\n",
                    "id": "#main/tumor_per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_segmented_ratios",
                    "id": "#main/tumor_segmented_ratios"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_snv_bam_readcount_tsv",
                    "id": "#main/tumor_snv_bam_readcount_tsv"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#main/somatic/tumor_summary_hs_metrics",
                    "id": "#main/tumor_summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_target_coverage",
                    "id": "#main/tumor_target_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_verify_bam_id_depth",
                    "label": "Sequencing quality assessment metric for tumor sample genotyping",
                    "doc": "verifyBamID output files showing the sequencing depth distribution at the marker positions from Omni genotype data with a tumor DNA sample, across all readGroups and per readGroup separately\n",
                    "id": "#main/tumor_verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/tumor_verify_bam_id_metrics",
                    "label": "Sequencing quality assessment metric for tumor sample contamination",
                    "doc": "verifyBamID output files containing the contamination estimate in a tumor DNA sample, across all readGroups and per readGroup separately\n",
                    "id": "#main/tumor_verify_bam_id_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/varscan_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/varscan_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/somatic/varscan_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#main/varscan_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/verify_bam_id_depth",
                    "id": "#main/verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#main/germline/verify_bam_id_metrics",
                    "id": "#main/verify_bam_id_metrics"
                }
            ],
            "id": "#main"
        },
        {
            "class": "Workflow",
            "label": "RNA-Seq alignment and transcript/gene abundance workflow",
            "requirements": [
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "doc": "the assembly used, such as GRCh37/38, GRCm37/38",
                    "id": "#rnaseq.cwl/assembly"
                },
                {
                    "type": "File",
                    "id": "#rnaseq.cwl/gene_transcript_lookup_table"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#rnaseq.cwl/instrument_data_bams"
                },
                {
                    "type": "File",
                    "id": "#rnaseq.cwl/kallisto_index"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#rnaseq.cwl/read_group_fields"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#rnaseq.cwl/read_group_id"
                },
                {
                    "type": "File",
                    "id": "#rnaseq.cwl/refFlat"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#rnaseq.cwl/reference"
                },
                {
                    "type": "File",
                    "id": "#rnaseq.cwl/reference_annotation"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".1.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".2.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".3.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".4.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".5.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".6.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".7.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".8.ht2",
                            "required": null
                        }
                    ],
                    "id": "#rnaseq.cwl/reference_index"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#rnaseq.cwl/ribosomal_intervals"
                },
                {
                    "type": "string",
                    "id": "#rnaseq.cwl/sample_name"
                },
                {
                    "type": "string",
                    "doc": "the species being analyzed, such as homo_sapiens or mus_musculus",
                    "id": "#rnaseq.cwl/species"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#rnaseq.cwl/strand/first",
                                "#rnaseq.cwl/strand/second",
                                "#rnaseq.cwl/strand/unstranded"
                            ]
                        }
                    ],
                    "id": "#rnaseq.cwl/strand"
                },
                {
                    "type": "int",
                    "id": "#rnaseq.cwl/trimming_adapter_min_overlap"
                },
                {
                    "type": "string",
                    "id": "#rnaseq.cwl/trimming_adapter_trim_end"
                },
                {
                    "type": "File",
                    "id": "#rnaseq.cwl/trimming_adapters"
                },
                {
                    "type": "int",
                    "id": "#rnaseq.cwl/trimming_max_uncalled"
                },
                {
                    "type": "int",
                    "id": "#rnaseq.cwl/trimming_min_readlength"
                }
            ],
            "steps": [
                {
                    "run": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl",
                    "scatter": [
                        "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/bam",
                        "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/read_group_id",
                        "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/read_group_fields"
                    ],
                    "scatterMethod": "dotproduct",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/trimming_adapter_min_overlap",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/adapter_min_overlap"
                        },
                        {
                            "source": "#rnaseq.cwl/trimming_adapter_trim_end",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/adapter_trim_end"
                        },
                        {
                            "source": "#rnaseq.cwl/trimming_adapters",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/adapters"
                        },
                        {
                            "source": "#rnaseq.cwl/instrument_data_bams",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/bam"
                        },
                        {
                            "source": "#rnaseq.cwl/trimming_max_uncalled",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/max_uncalled"
                        },
                        {
                            "source": "#rnaseq.cwl/trimming_min_readlength",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/min_readlength"
                        },
                        {
                            "source": "#rnaseq.cwl/read_group_fields",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/read_group_fields"
                        },
                        {
                            "source": "#rnaseq.cwl/read_group_id",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/read_group_id"
                        },
                        {
                            "source": "#rnaseq.cwl/reference_index",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/reference_index"
                        },
                        {
                            "source": "#rnaseq.cwl/strand",
                            "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/strand"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/fastqs",
                        "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/aligned_bam"
                    ],
                    "id": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments"
                },
                {
                    "run": "#bam_to_bigwig.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/mark_dup/sorted_bam",
                            "id": "#rnaseq.cwl/cgpbigwig_bamcoverage/bam"
                        },
                        {
                            "source": "#rnaseq.cwl/reference",
                            "id": "#rnaseq.cwl/cgpbigwig_bamcoverage/reference"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/cgpbigwig_bamcoverage/outfile"
                    ],
                    "id": "#rnaseq.cwl/cgpbigwig_bamcoverage"
                },
                {
                    "run": "#generate_qc_metrics.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/index_bam/indexed_bam",
                            "id": "#rnaseq.cwl/generate_qc_metrics/bam"
                        },
                        {
                            "source": "#rnaseq.cwl/refFlat",
                            "id": "#rnaseq.cwl/generate_qc_metrics/refFlat"
                        },
                        {
                            "source": "#rnaseq.cwl/ribosomal_intervals",
                            "id": "#rnaseq.cwl/generate_qc_metrics/ribosomal_intervals"
                        },
                        {
                            "source": "#rnaseq.cwl/strand",
                            "id": "#rnaseq.cwl/generate_qc_metrics/strand"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/generate_qc_metrics/metrics",
                        "#rnaseq.cwl/generate_qc_metrics/chart"
                    ],
                    "id": "#rnaseq.cwl/generate_qc_metrics"
                },
                {
                    "run": "#index_bam.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/position_sort/sorted_bam",
                            "id": "#rnaseq.cwl/index_bam/bam"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/index_bam/indexed_bam"
                    ],
                    "id": "#rnaseq.cwl/index_bam"
                },
                {
                    "run": "#kallisto.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/fastqs",
                            "id": "#rnaseq.cwl/kallisto/fastqs"
                        },
                        {
                            "source": "#rnaseq.cwl/kallisto_index",
                            "id": "#rnaseq.cwl/kallisto/kallisto_index"
                        },
                        {
                            "source": "#rnaseq.cwl/strand",
                            "id": "#rnaseq.cwl/kallisto/strand"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/kallisto/expression_transcript_table",
                        "#rnaseq.cwl/kallisto/expression_transcript_h5",
                        "#rnaseq.cwl/kallisto/fusion_evidence"
                    ],
                    "id": "#rnaseq.cwl/kallisto"
                },
                {
                    "run": "#mark_duplicates_and_sort.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/index_bam/indexed_bam",
                            "id": "#rnaseq.cwl/mark_dup/bam"
                        },
                        {
                            "default": "coordinate",
                            "id": "#rnaseq.cwl/mark_dup/input_sort_order"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/mark_dup/sorted_bam",
                        "#rnaseq.cwl/mark_dup/metrics_file"
                    ],
                    "id": "#rnaseq.cwl/mark_dup"
                },
                {
                    "run": "#merge_bams.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/bam_to_trimmed_fastq_and_hisat_alignments/aligned_bam",
                            "id": "#rnaseq.cwl/merge/bams"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/merge/merged_bam"
                    ],
                    "id": "#rnaseq.cwl/merge"
                },
                {
                    "run": "#samtools_sort.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/merge/merged_bam",
                            "id": "#rnaseq.cwl/position_sort/input_bam"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/position_sort/sorted_bam"
                    ],
                    "id": "#rnaseq.cwl/position_sort"
                },
                {
                    "run": "#stringtie.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/index_bam/indexed_bam",
                            "id": "#rnaseq.cwl/stringtie/bam"
                        },
                        {
                            "source": "#rnaseq.cwl/reference_annotation",
                            "id": "#rnaseq.cwl/stringtie/reference_annotation"
                        },
                        {
                            "source": "#rnaseq.cwl/sample_name",
                            "id": "#rnaseq.cwl/stringtie/sample_name"
                        },
                        {
                            "source": "#rnaseq.cwl/strand",
                            "id": "#rnaseq.cwl/stringtie/strand"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/stringtie/transcript_gtf",
                        "#rnaseq.cwl/stringtie/gene_expression_tsv"
                    ],
                    "id": "#rnaseq.cwl/stringtie"
                },
                {
                    "run": "#transcript_to_gene.cwl",
                    "in": [
                        {
                            "source": "#rnaseq.cwl/gene_transcript_lookup_table",
                            "id": "#rnaseq.cwl/transcript_to_gene/gene_transcript_lookup_table"
                        },
                        {
                            "source": "#rnaseq.cwl/kallisto/expression_transcript_h5",
                            "id": "#rnaseq.cwl/transcript_to_gene/transcript_table_h5"
                        }
                    ],
                    "out": [
                        "#rnaseq.cwl/transcript_to_gene/gene_abundance"
                    ],
                    "id": "#rnaseq.cwl/transcript_to_gene"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/cgpbigwig_bamcoverage/outfile",
                    "id": "#rnaseq.cwl/bamcoverage_bigwig"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#rnaseq.cwl/generate_qc_metrics/chart",
                    "id": "#rnaseq.cwl/chart"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/mark_dup/sorted_bam",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#rnaseq.cwl/final_bam"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/kallisto/fusion_evidence",
                    "id": "#rnaseq.cwl/fusion_evidence"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/transcript_to_gene/gene_abundance",
                    "id": "#rnaseq.cwl/gene_abundance"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/generate_qc_metrics/metrics",
                    "id": "#rnaseq.cwl/metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/stringtie/gene_expression_tsv",
                    "id": "#rnaseq.cwl/stringtie_gene_expression_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/stringtie/transcript_gtf",
                    "id": "#rnaseq.cwl/stringtie_transcript_gtf"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/kallisto/expression_transcript_h5",
                    "id": "#rnaseq.cwl/transcript_abundance_h5"
                },
                {
                    "type": "File",
                    "outputSource": "#rnaseq.cwl/kallisto/expression_transcript_table",
                    "id": "#rnaseq.cwl/transcript_abundance_tsv"
                }
            ],
            "id": "#rnaseq.cwl"
        },
        {
            "class": "Workflow",
            "label": "somatic_exome: exome alignment and somatic variant detection",
            "doc": "somatic_exome is designed to perform processing of mutant/wildtype H.sapiens\nexome sequencing data. It features BQSR corrected alignments, 4 caller variant\ndetection, and vep style annotations. Structural variants are detected via\nmanta and cnvkit. In addition QC metrics are run, including\nsomalier concordance metrics.\n\nexample input file = analysis_workflows/example_data/somatic_exome.yaml\n",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#labelled_file.yml/labelled_file"
                        },
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#trimming_options.yml/trimming_options"
                        },
                        {
                            "$import": "#vep_custom_annotation.yml/vep_custom_annotation"
                        }
                    ]
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "if set to true, vep only returns consequences that fall in the coding regions of transcripts",
                    "id": "#somatic_exome.cwl/annotate_coding_only"
                },
                {
                    "type": "File",
                    "label": "bait_intervals: interval_list file of baits used in the sequencing experiment",
                    "doc": "bait_intervals is an interval_list corresponding to the baits used in sequencing reagent.\nThese are essentially coordinates for regions you were able to design probes for in the reagent.\nTypically the reagent provider has this information available in bed format and it can be\nconverted to an interval_list with Picard BedToIntervalList. Astrazeneca also maintains a repo\nof baits for common sequencing reagents available at https://github.com/AstraZeneca-NGS/reference_data\n",
                    "id": "#somatic_exome.cwl/bait_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "label": "bqsr_intervals: Array of strings specifying regions for base quality score recalibration",
                    "doc": "bqsr_intervals provides an array of genomic intervals for which to apply\nGATK base quality score recalibrations. Typically intervals are given\nfor the entire chromosome (chr1, chr2, etc.), these names should match\nthe format in the reference file.\n",
                    "id": "#somatic_exome.cwl/bqsr_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "label": "bqsr_known_sites: One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.",
                    "doc": "Known polymorphic indels recommended by GATK for a variety of\ntools including the BaseRecalibrator. This is part of the GATK resource\nbundle available at http://www.broadinstitute.org/gatk/guide/article?id=1213\nFile should be in vcf format, and tabix indexed.\n",
                    "id": "#somatic_exome.cwl/bqsr_known_sites"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "id": "#somatic_exome.cwl/cle_vcf_filter"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "approximate size of split target bins for CNVkit; if not set a suitable window size will be set by CNVkit automatically",
                    "id": "#somatic_exome.cwl/cnvkit_target_average_size"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "The set of alleles that gatk haplotype caller will use to force-call regardless of evidence",
                    "id": "#somatic_exome.cwl/docm_vcf"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "id": "#somatic_exome.cwl/filter_docm_variants"
                },
                {
                    "type": "float",
                    "default": 0,
                    "doc": "Sets the fraction of tumor present in the normal sample (range 0 to 1), used in the somatic llr filter. Useful for heavily contaminated adjacent normals. Range is 0 to 1",
                    "id": "#somatic_exome.cwl/filter_somatic_llr_normal_contamination_rate"
                },
                {
                    "type": "float",
                    "default": 5,
                    "doc": "Sets the stringency (log-likelihood ratio) used to filter out non-somatic variants.  Typical values are 10=high stringency, 5=normal, 3=low stringency. Low stringency may be desirable when read depths are low (as in WGS) or when tumor samples are impure.",
                    "id": "#somatic_exome.cwl/filter_somatic_llr_threshold"
                },
                {
                    "type": "float",
                    "default": 1,
                    "doc": "Sets the purity of the tumor used in the somatic llr filter, used to remove non-somatic variants. Probably only needs to be adjusted for low-purity (< 50%).  Range is 0 to 1",
                    "id": "#somatic_exome.cwl/filter_somatic_llr_tumor_purity"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "bgzip-compressed, tabix-indexed BED file specifiying regions to which manta structural variant analysis is limited",
                    "id": "#somatic_exome.cwl/manta_call_regions"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "toggles on or off manta settings for WES vs. WGS mode for structural variant detection",
                    "id": "#somatic_exome.cwl/manta_non_wgs"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "if set to true configures manta to output assembled contig sequences in the final VCF files",
                    "id": "#somatic_exome.cwl/manta_output_contigs"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "id": "#somatic_exome.cwl/mutect_artifact_detection_mode"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#somatic_exome.cwl/mutect_max_alt_allele_in_normal_fraction"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#somatic_exome.cwl/mutect_max_alt_alleles_in_normal_count"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "normal",
                    "label": "normal_name: String specifying the name of the WT sample",
                    "doc": "normal_name provides a string for what the WT sample will be referred to in the various\noutputs, for example the VCF files.\n",
                    "id": "#somatic_exome.cwl/normal_name"
                },
                {
                    "type": "string",
                    "id": "#somatic_exome.cwl/normal_sample_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "normal_sequence: WT sequencing data and readgroup information",
                    "doc": "normal_sequence represents the sequencing data for the WT sample as either FASTQs or BAMs with\naccompanying readgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#somatic_exome.cwl/normal_sequence"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/omni_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "label": "per_base_intervals: additional intervals over which to summarize coverage/QC at a per-base resolution",
                    "doc": "per_base_intervals is a list of regions (in interval_list format) over which to summarize coverage/QC at a per-base resolution.",
                    "id": "#somatic_exome.cwl/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "label": "per_target_intervals: additional intervals over which to summarize coverage/QC at a per-target resolution",
                    "doc": "per_target_intervals list of regions (in interval_list format) over which to summarize coverage/QC at a per-target resolution.",
                    "id": "#somatic_exome.cwl/per_target_intervals"
                },
                {
                    "type": "string",
                    "id": "#somatic_exome.cwl/picard_metric_accumulation_level"
                },
                {
                    "type": "int",
                    "default": 400,
                    "id": "#somatic_exome.cwl/pindel_insert_size"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#somatic_exome.cwl/qc_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#somatic_exome.cwl/qc_minimum_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        },
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "label": "reference: Reference fasta file for a desired assembly",
                    "doc": "reference contains the nucleotide sequence for a given assembly (hg37, hg38, etc.)\nin fasta format for the entire genome. This is what reads will be aligned to.\nAppropriate files can be found on ensembl at https://ensembl.org/info/data/ftp/index.html\nWhen providing the reference secondary files corresponding to reference indices must be\nlocated in the same directory as the reference itself. These files can be created with\nsamtools index, bwa index, and picard CreateSequenceDictionary.\n",
                    "id": "#somatic_exome.cwl/reference"
                },
                {
                    "type": "int",
                    "doc": "scatters each supported variant detector (varscan, pindel, mutect) into this many parallel jobs",
                    "id": "#somatic_exome.cwl/scatter_count"
                },
                {
                    "type": "File",
                    "doc": "a vcf file of known polymorphic sites for somalier to compare normal and tumor samples for identity; sites files can be found at: https://github.com/brentp/somalier/releases",
                    "id": "#somatic_exome.cwl/somalier_vcf"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#somatic_exome.cwl/strelka_cpu_reserved"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#somatic_exome.cwl/summary_intervals"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "synonyms_file allows the use of different chromosome identifiers in vep inputs or annotation files (cache, database, GFF, custom file, fasta). File should be tab-delimited with the primary identifier in column 1 and the synonym in column 2.",
                    "id": "#somatic_exome.cwl/synonyms_file"
                },
                {
                    "type": "int",
                    "label": "target_interval_padding: number of bp flanking each target region in which to allow variant calls",
                    "doc": "The effective coverage of capture products generally extends out beyond the actual regions\ntargeted. This parameter allows variants to be called in these wingspan regions, extending\nthis many base pairs from each side of the target regions.\n",
                    "default": 100,
                    "id": "#somatic_exome.cwl/target_interval_padding"
                },
                {
                    "type": "File",
                    "label": "target_intervals: interval_list file of targets used in the sequencing experiment",
                    "doc": "target_intervals is an interval_list corresponding to the targets for the capture reagent.\nBed files with this information can be converted to interval_lists with Picard BedToIntervalList.\nIn general for a WES exome reagent bait_intervals and target_intervals are the same.\n",
                    "id": "#somatic_exome.cwl/target_intervals"
                },
                {
                    "type": [
                        "#trimming_options.yml/trimming_options",
                        "null"
                    ],
                    "id": "#somatic_exome.cwl/trimming"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "tumor",
                    "label": "tumor_name: String specifying the name of the MT sample",
                    "doc": "tumor_name provides a string for what the MT sample will be referred to in the various\noutputs, for example the VCF files.\n",
                    "id": "#somatic_exome.cwl/tumor_name"
                },
                {
                    "type": "string",
                    "id": "#somatic_exome.cwl/tumor_sample_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "label": "tumor_sequence: MT sequencing data and readgroup information",
                    "doc": "tumor_sequence represents the sequencing data for the MT sample as either FASTQs or BAMs with\naccompanying readgroup information. Note that in the @RG field ID and SM are required.\n",
                    "id": "#somatic_exome.cwl/tumor_sequence"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "An optional VCF with variants that will be flagged as 'VALIDATED' if found in this pipeline's main output VCF",
                    "id": "#somatic_exome.cwl/validated_variants"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "CHROM",
                        "POS",
                        "ID",
                        "REF",
                        "ALT",
                        "set",
                        "AC",
                        "AF"
                    ],
                    "doc": "The names of one or more standard VCF fields or INFO fields to include in the output table",
                    "id": "#somatic_exome.cwl/variants_to_table_fields"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "GT",
                        "AD"
                    ],
                    "doc": "The name of a genotype field to include in the output table",
                    "id": "#somatic_exome.cwl/variants_to_table_genotype_fields"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#somatic_exome.cwl/varscan_max_normal_freq"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#somatic_exome.cwl/varscan_min_coverage"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.05,
                    "id": "#somatic_exome.cwl/varscan_min_var_freq"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.99,
                    "id": "#somatic_exome.cwl/varscan_p_value"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#somatic_exome.cwl/varscan_strand_filter"
                },
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "doc": "path to the vep cache directory, available at: https://useast.ensembl.org/info/docs/tools/vep/script/vep_cache.html#pre",
                    "id": "#somatic_exome.cwl/vep_cache_dir"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#vep_custom_annotation.yml/vep_custom_annotation"
                    },
                    "doc": "custom type, check types directory for input format",
                    "id": "#somatic_exome.cwl/vep_custom_annotations"
                },
                {
                    "type": "string",
                    "doc": "genome assembly to use in vep. Examples: GRCh38 or GRCm38",
                    "id": "#somatic_exome.cwl/vep_ensembl_assembly"
                },
                {
                    "type": "string",
                    "doc": "ensembl species - Must be present in the cache directory. Examples: homo_sapiens or mus_musculus",
                    "id": "#somatic_exome.cwl/vep_ensembl_species"
                },
                {
                    "type": "string",
                    "doc": "ensembl version - Must be present in the cache directory. Example: 95",
                    "id": "#somatic_exome.cwl/vep_ensembl_version"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#somatic_exome.cwl/vep_pick/pick",
                                "#somatic_exome.cwl/vep_pick/flag_pick",
                                "#somatic_exome.cwl/vep_pick/pick_allele",
                                "#somatic_exome.cwl/vep_pick/per_gene",
                                "#somatic_exome.cwl/vep_pick/pick_allele_gene",
                                "#somatic_exome.cwl/vep_pick/flag_pick_allele",
                                "#somatic_exome.cwl/vep_pick/flag_pick_allele_gene"
                            ]
                        }
                    ],
                    "doc": "configures how vep will annotate genomic features that each variant overlaps; for a detailed description of each option see https://useast.ensembl.org/info/docs/tools/vep/script/vep_other.html#pick_allele_gene_eg",
                    "id": "#somatic_exome.cwl/vep_pick"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "HGVSc",
                        "HGVSp"
                    ],
                    "doc": "VEP fields in final output",
                    "id": "#somatic_exome.cwl/vep_to_table_fields"
                }
            ],
            "steps": [
                {
                    "run": "#cnvkit_batch.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/bait_intervals",
                            "id": "#somatic_exome.cwl/cnvkit/bait_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/cnvkit_target_average_size",
                            "id": "#somatic_exome.cwl/cnvkit/cnvkit_target_average_size"
                        },
                        {
                            "source": [
                                "#somatic_exome.cwl/normal_alignment_and_qc/bam",
                                "#somatic_exome.cwl/reference"
                            ],
                            "valueFrom": "${\n  var normal = self[0];\n  var fasta = self[1];\n  return {'normal_bam': normal, 'fasta_file': fasta};\n}\n",
                            "id": "#somatic_exome.cwl/cnvkit/reference"
                        },
                        {
                            "source": "#somatic_exome.cwl/tumor_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/cnvkit/tumor_bam"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/cnvkit/intervals_antitarget",
                        "#somatic_exome.cwl/cnvkit/intervals_target",
                        "#somatic_exome.cwl/cnvkit/normal_antitarget_coverage",
                        "#somatic_exome.cwl/cnvkit/normal_target_coverage",
                        "#somatic_exome.cwl/cnvkit/reference_coverage",
                        "#somatic_exome.cwl/cnvkit/cn_diagram",
                        "#somatic_exome.cwl/cnvkit/cn_scatter_plot",
                        "#somatic_exome.cwl/cnvkit/tumor_antitarget_coverage",
                        "#somatic_exome.cwl/cnvkit/tumor_target_coverage",
                        "#somatic_exome.cwl/cnvkit/tumor_bin_level_ratios",
                        "#somatic_exome.cwl/cnvkit/tumor_segmented_ratios"
                    ],
                    "id": "#somatic_exome.cwl/cnvkit"
                },
                {
                    "run": "#concordance.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/tumor_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/concordance/bam_1"
                        },
                        {
                            "source": "#somatic_exome.cwl/normal_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/concordance/bam_2"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/concordance/reference"
                        },
                        {
                            "source": "#somatic_exome.cwl/somalier_vcf",
                            "id": "#somatic_exome.cwl/concordance/vcf"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/concordance/somalier_pairs",
                        "#somatic_exome.cwl/concordance/somalier_samples"
                    ],
                    "id": "#somatic_exome.cwl/concordance"
                },
                {
                    "run": "#detect_variants.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/annotate_coding_only",
                            "id": "#somatic_exome.cwl/detect_variants/annotate_coding_only"
                        },
                        {
                            "source": "#somatic_exome.cwl/cle_vcf_filter",
                            "id": "#somatic_exome.cwl/detect_variants/cle_vcf_filter"
                        },
                        {
                            "source": "#somatic_exome.cwl/docm_vcf",
                            "id": "#somatic_exome.cwl/detect_variants/docm_vcf"
                        },
                        {
                            "source": "#somatic_exome.cwl/filter_docm_variants",
                            "id": "#somatic_exome.cwl/detect_variants/filter_docm_variants"
                        },
                        {
                            "source": "#somatic_exome.cwl/filter_somatic_llr_normal_contamination_rate",
                            "id": "#somatic_exome.cwl/detect_variants/filter_somatic_llr_normal_contamination_rate"
                        },
                        {
                            "source": "#somatic_exome.cwl/filter_somatic_llr_threshold",
                            "id": "#somatic_exome.cwl/detect_variants/filter_somatic_llr_threshold"
                        },
                        {
                            "source": "#somatic_exome.cwl/filter_somatic_llr_tumor_purity",
                            "id": "#somatic_exome.cwl/detect_variants/filter_somatic_llr_tumor_purity"
                        },
                        {
                            "source": "#somatic_exome.cwl/normal_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/detect_variants/normal_bam"
                        },
                        {
                            "source": "#somatic_exome.cwl/normal_sample_name",
                            "id": "#somatic_exome.cwl/detect_variants/normal_sample_name"
                        },
                        {
                            "source": "#somatic_exome.cwl/pindel_insert_size",
                            "id": "#somatic_exome.cwl/detect_variants/pindel_insert_size"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/detect_variants/reference"
                        },
                        {
                            "source": "#somatic_exome.cwl/pad_target_intervals/expanded_interval_list",
                            "id": "#somatic_exome.cwl/detect_variants/roi_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/scatter_count",
                            "id": "#somatic_exome.cwl/detect_variants/scatter_count"
                        },
                        {
                            "source": "#somatic_exome.cwl/strelka_cpu_reserved",
                            "id": "#somatic_exome.cwl/detect_variants/strelka_cpu_reserved"
                        },
                        {
                            "default": true,
                            "id": "#somatic_exome.cwl/detect_variants/strelka_exome_mode"
                        },
                        {
                            "source": "#somatic_exome.cwl/synonyms_file",
                            "id": "#somatic_exome.cwl/detect_variants/synonyms_file"
                        },
                        {
                            "source": "#somatic_exome.cwl/tumor_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/detect_variants/tumor_bam"
                        },
                        {
                            "source": "#somatic_exome.cwl/tumor_sample_name",
                            "id": "#somatic_exome.cwl/detect_variants/tumor_sample_name"
                        },
                        {
                            "source": "#somatic_exome.cwl/validated_variants",
                            "id": "#somatic_exome.cwl/detect_variants/validated_variants"
                        },
                        {
                            "source": "#somatic_exome.cwl/variants_to_table_fields",
                            "id": "#somatic_exome.cwl/detect_variants/variants_to_table_fields"
                        },
                        {
                            "source": "#somatic_exome.cwl/variants_to_table_genotype_fields",
                            "id": "#somatic_exome.cwl/detect_variants/variants_to_table_genotype_fields"
                        },
                        {
                            "source": "#somatic_exome.cwl/varscan_max_normal_freq",
                            "id": "#somatic_exome.cwl/detect_variants/varscan_max_normal_freq"
                        },
                        {
                            "source": "#somatic_exome.cwl/varscan_min_coverage",
                            "id": "#somatic_exome.cwl/detect_variants/varscan_min_coverage"
                        },
                        {
                            "source": "#somatic_exome.cwl/varscan_min_var_freq",
                            "id": "#somatic_exome.cwl/detect_variants/varscan_min_var_freq"
                        },
                        {
                            "source": "#somatic_exome.cwl/varscan_p_value",
                            "id": "#somatic_exome.cwl/detect_variants/varscan_p_value"
                        },
                        {
                            "source": "#somatic_exome.cwl/varscan_strand_filter",
                            "id": "#somatic_exome.cwl/detect_variants/varscan_strand_filter"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_cache_dir",
                            "id": "#somatic_exome.cwl/detect_variants/vep_cache_dir"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_custom_annotations",
                            "id": "#somatic_exome.cwl/detect_variants/vep_custom_annotations"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_ensembl_assembly",
                            "id": "#somatic_exome.cwl/detect_variants/vep_ensembl_assembly"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_ensembl_species",
                            "id": "#somatic_exome.cwl/detect_variants/vep_ensembl_species"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_ensembl_version",
                            "id": "#somatic_exome.cwl/detect_variants/vep_ensembl_version"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_pick",
                            "id": "#somatic_exome.cwl/detect_variants/vep_pick"
                        },
                        {
                            "source": "#somatic_exome.cwl/vep_to_table_fields",
                            "id": "#somatic_exome.cwl/detect_variants/vep_to_table_fields"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/detect_variants/mutect_unfiltered_vcf",
                        "#somatic_exome.cwl/detect_variants/mutect_filtered_vcf",
                        "#somatic_exome.cwl/detect_variants/strelka_unfiltered_vcf",
                        "#somatic_exome.cwl/detect_variants/strelka_filtered_vcf",
                        "#somatic_exome.cwl/detect_variants/varscan_unfiltered_vcf",
                        "#somatic_exome.cwl/detect_variants/varscan_filtered_vcf",
                        "#somatic_exome.cwl/detect_variants/pindel_unfiltered_vcf",
                        "#somatic_exome.cwl/detect_variants/pindel_filtered_vcf",
                        "#somatic_exome.cwl/detect_variants/docm_filtered_vcf",
                        "#somatic_exome.cwl/detect_variants/final_vcf",
                        "#somatic_exome.cwl/detect_variants/final_filtered_vcf",
                        "#somatic_exome.cwl/detect_variants/final_tsv",
                        "#somatic_exome.cwl/detect_variants/vep_summary",
                        "#somatic_exome.cwl/detect_variants/tumor_snv_bam_readcount_tsv",
                        "#somatic_exome.cwl/detect_variants/tumor_indel_bam_readcount_tsv",
                        "#somatic_exome.cwl/detect_variants/normal_snv_bam_readcount_tsv",
                        "#somatic_exome.cwl/detect_variants/normal_indel_bam_readcount_tsv"
                    ],
                    "id": "#somatic_exome.cwl/detect_variants"
                },
                {
                    "run": "#manta_somatic.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/manta_call_regions",
                            "id": "#somatic_exome.cwl/manta/call_regions"
                        },
                        {
                            "source": "#somatic_exome.cwl/manta_non_wgs",
                            "id": "#somatic_exome.cwl/manta/non_wgs"
                        },
                        {
                            "source": "#somatic_exome.cwl/normal_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/manta/normal_bam"
                        },
                        {
                            "source": "#somatic_exome.cwl/manta_output_contigs",
                            "id": "#somatic_exome.cwl/manta/output_contigs"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/manta/reference"
                        },
                        {
                            "source": "#somatic_exome.cwl/tumor_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/manta/tumor_bam"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/manta/diploid_variants",
                        "#somatic_exome.cwl/manta/somatic_variants",
                        "#somatic_exome.cwl/manta/all_candidates",
                        "#somatic_exome.cwl/manta/small_candidates",
                        "#somatic_exome.cwl/manta/tumor_only_variants"
                    ],
                    "id": "#somatic_exome.cwl/manta"
                },
                {
                    "run": "#alignment_exome.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/bait_intervals",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/bait_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/bqsr_intervals",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/bqsr_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/bqsr_known_sites",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/bqsr_known_sites"
                        },
                        {
                            "source": "#somatic_exome.cwl/normal_name",
                            "valueFrom": "$(self).bam",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/final_name"
                        },
                        {
                            "source": "#somatic_exome.cwl/omni_vcf",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/omni_vcf"
                        },
                        {
                            "source": "#somatic_exome.cwl/per_base_intervals",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/per_base_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/per_target_intervals",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/per_target_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/picard_metric_accumulation_level",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#somatic_exome.cwl/qc_minimum_base_quality",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/qc_minimum_base_quality"
                        },
                        {
                            "source": "#somatic_exome.cwl/qc_minimum_mapping_quality",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/qc_minimum_mapping_quality"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/reference"
                        },
                        {
                            "source": "#somatic_exome.cwl/normal_sequence",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/sequence"
                        },
                        {
                            "source": "#somatic_exome.cwl/summary_intervals",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/summary_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/target_intervals",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/target_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/trimming",
                            "id": "#somatic_exome.cwl/normal_alignment_and_qc/trimming"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/normal_alignment_and_qc/bam",
                        "#somatic_exome.cwl/normal_alignment_and_qc/mark_duplicates_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/insert_size_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/alignment_summary_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/hs_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/per_target_coverage_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/per_target_hs_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/per_base_coverage_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/per_base_hs_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/summary_hs_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/flagstats",
                        "#somatic_exome.cwl/normal_alignment_and_qc/verify_bam_id_metrics",
                        "#somatic_exome.cwl/normal_alignment_and_qc/verify_bam_id_depth"
                    ],
                    "id": "#somatic_exome.cwl/normal_alignment_and_qc"
                },
                {
                    "run": "#bam_to_cram.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/normal_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/normal_bam_to_cram/bam"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/normal_bam_to_cram/reference"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/normal_bam_to_cram/cram"
                    ],
                    "id": "#somatic_exome.cwl/normal_bam_to_cram"
                },
                {
                    "run": "#index_cram.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/normal_bam_to_cram/cram",
                            "id": "#somatic_exome.cwl/normal_index_cram/cram"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/normal_index_cram/indexed_cram"
                    ],
                    "id": "#somatic_exome.cwl/normal_index_cram"
                },
                {
                    "run": "#interval_list_expand.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/target_intervals",
                            "id": "#somatic_exome.cwl/pad_target_intervals/interval_list"
                        },
                        {
                            "source": "#somatic_exome.cwl/target_interval_padding",
                            "id": "#somatic_exome.cwl/pad_target_intervals/roi_padding"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/pad_target_intervals/expanded_interval_list"
                    ],
                    "id": "#somatic_exome.cwl/pad_target_intervals"
                },
                {
                    "run": "#alignment_exome.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/bait_intervals",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/bait_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/bqsr_intervals",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/bqsr_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/bqsr_known_sites",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/bqsr_known_sites"
                        },
                        {
                            "source": "#somatic_exome.cwl/tumor_name",
                            "valueFrom": "$(self).bam",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/final_name"
                        },
                        {
                            "source": "#somatic_exome.cwl/omni_vcf",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/omni_vcf"
                        },
                        {
                            "source": "#somatic_exome.cwl/per_base_intervals",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/per_base_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/per_target_intervals",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/per_target_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/picard_metric_accumulation_level",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/picard_metric_accumulation_level"
                        },
                        {
                            "source": "#somatic_exome.cwl/qc_minimum_base_quality",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/qc_minimum_base_quality"
                        },
                        {
                            "source": "#somatic_exome.cwl/qc_minimum_mapping_quality",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/qc_minimum_mapping_quality"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/reference"
                        },
                        {
                            "source": "#somatic_exome.cwl/tumor_sequence",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/sequence"
                        },
                        {
                            "source": "#somatic_exome.cwl/summary_intervals",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/summary_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/target_intervals",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/target_intervals"
                        },
                        {
                            "source": "#somatic_exome.cwl/trimming",
                            "id": "#somatic_exome.cwl/tumor_alignment_and_qc/trimming"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/tumor_alignment_and_qc/bam",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/mark_duplicates_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/insert_size_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/alignment_summary_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/hs_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/per_target_coverage_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/per_target_hs_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/per_base_coverage_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/per_base_hs_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/summary_hs_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/flagstats",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/verify_bam_id_metrics",
                        "#somatic_exome.cwl/tumor_alignment_and_qc/verify_bam_id_depth"
                    ],
                    "id": "#somatic_exome.cwl/tumor_alignment_and_qc"
                },
                {
                    "run": "#bam_to_cram.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/tumor_alignment_and_qc/bam",
                            "id": "#somatic_exome.cwl/tumor_bam_to_cram/bam"
                        },
                        {
                            "source": "#somatic_exome.cwl/reference",
                            "id": "#somatic_exome.cwl/tumor_bam_to_cram/reference"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/tumor_bam_to_cram/cram"
                    ],
                    "id": "#somatic_exome.cwl/tumor_bam_to_cram"
                },
                {
                    "run": "#index_cram.cwl",
                    "in": [
                        {
                            "source": "#somatic_exome.cwl/tumor_bam_to_cram/cram",
                            "id": "#somatic_exome.cwl/tumor_index_cram/cram"
                        }
                    ],
                    "out": [
                        "#somatic_exome.cwl/tumor_index_cram/indexed_cram"
                    ],
                    "id": "#somatic_exome.cwl/tumor_index_cram"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/manta/all_candidates",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/all_candidates"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/cnvkit/cn_diagram",
                    "id": "#somatic_exome.cwl/cn_diagram"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/cnvkit/cn_scatter_plot",
                    "id": "#somatic_exome.cwl/cn_scatter_plot"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/manta/diploid_variants",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/diploid_variants"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/docm_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/docm_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/final_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/final_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/final_tsv",
                    "id": "#somatic_exome.cwl/final_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/final_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/final_vcf"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/cnvkit/intervals_antitarget",
                    "id": "#somatic_exome.cwl/intervals_antitarget"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/cnvkit/intervals_target",
                    "id": "#somatic_exome.cwl/intervals_target"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/mutect_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/mutect_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/mutect_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/mutect_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/alignment_summary_metrics",
                    "id": "#somatic_exome.cwl/normal_alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/cnvkit/normal_antitarget_coverage",
                    "id": "#somatic_exome.cwl/normal_antitarget_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_index_cram/indexed_cram",
                    "id": "#somatic_exome.cwl/normal_cram"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/flagstats",
                    "id": "#somatic_exome.cwl/normal_flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/hs_metrics",
                    "id": "#somatic_exome.cwl/normal_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/normal_indel_bam_readcount_tsv",
                    "id": "#somatic_exome.cwl/normal_indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/insert_size_metrics",
                    "id": "#somatic_exome.cwl/normal_insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/mark_duplicates_metrics",
                    "id": "#somatic_exome.cwl/normal_mark_duplicates_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/per_base_coverage_metrics",
                    "id": "#somatic_exome.cwl/normal_per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/per_base_hs_metrics",
                    "id": "#somatic_exome.cwl/normal_per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/per_target_coverage_metrics",
                    "id": "#somatic_exome.cwl/normal_per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/per_target_hs_metrics",
                    "id": "#somatic_exome.cwl/normal_per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/normal_snv_bam_readcount_tsv",
                    "id": "#somatic_exome.cwl/normal_snv_bam_readcount_tsv"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/summary_hs_metrics",
                    "id": "#somatic_exome.cwl/normal_summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/cnvkit/normal_target_coverage",
                    "id": "#somatic_exome.cwl/normal_target_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/verify_bam_id_depth",
                    "id": "#somatic_exome.cwl/normal_verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/normal_alignment_and_qc/verify_bam_id_metrics",
                    "id": "#somatic_exome.cwl/normal_verify_bam_id_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/pindel_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/pindel_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/pindel_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/pindel_unfiltered_vcf"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/cnvkit/reference_coverage",
                    "id": "#somatic_exome.cwl/reference_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/manta/small_candidates",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/small_candidates"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/concordance/somalier_pairs",
                    "id": "#somatic_exome.cwl/somalier_concordance_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/concordance/somalier_samples",
                    "id": "#somatic_exome.cwl/somalier_concordance_statistics"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/manta/somatic_variants",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/somatic_variants"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/strelka_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/strelka_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/strelka_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/strelka_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/alignment_summary_metrics",
                    "id": "#somatic_exome.cwl/tumor_alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/cnvkit/tumor_antitarget_coverage",
                    "id": "#somatic_exome.cwl/tumor_antitarget_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/cnvkit/tumor_bin_level_ratios",
                    "id": "#somatic_exome.cwl/tumor_bin_level_ratios"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_index_cram/indexed_cram",
                    "id": "#somatic_exome.cwl/tumor_cram"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/flagstats",
                    "id": "#somatic_exome.cwl/tumor_flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/hs_metrics",
                    "id": "#somatic_exome.cwl/tumor_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/tumor_indel_bam_readcount_tsv",
                    "id": "#somatic_exome.cwl/tumor_indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/insert_size_metrics",
                    "id": "#somatic_exome.cwl/tumor_insert_size_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/mark_duplicates_metrics",
                    "id": "#somatic_exome.cwl/tumor_mark_duplicates_metrics"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#somatic_exome.cwl/manta/tumor_only_variants",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/tumor_only_variants"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/per_base_coverage_metrics",
                    "id": "#somatic_exome.cwl/tumor_per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/per_base_hs_metrics",
                    "id": "#somatic_exome.cwl/tumor_per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/per_target_coverage_metrics",
                    "id": "#somatic_exome.cwl/tumor_per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/per_target_hs_metrics",
                    "id": "#somatic_exome.cwl/tumor_per_target_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/cnvkit/tumor_segmented_ratios",
                    "id": "#somatic_exome.cwl/tumor_segmented_ratios"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/tumor_snv_bam_readcount_tsv",
                    "id": "#somatic_exome.cwl/tumor_snv_bam_readcount_tsv"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/summary_hs_metrics",
                    "id": "#somatic_exome.cwl/tumor_summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/cnvkit/tumor_target_coverage",
                    "id": "#somatic_exome.cwl/tumor_target_coverage"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/verify_bam_id_depth",
                    "id": "#somatic_exome.cwl/tumor_verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/tumor_alignment_and_qc/verify_bam_id_metrics",
                    "id": "#somatic_exome.cwl/tumor_verify_bam_id_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/varscan_filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/varscan_filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/varscan_unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#somatic_exome.cwl/varscan_unfiltered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#somatic_exome.cwl/detect_variants/vep_summary",
                    "id": "#somatic_exome.cwl/vep_summary"
                }
            ],
            "id": "#somatic_exome.cwl"
        },
        {
            "class": "Workflow",
            "label": "bam_readcount workflow",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#bam_readcount.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#bam_readcount.cwl/min_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#bam_readcount.cwl/min_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#bam_readcount.cwl/reference_fasta"
                },
                {
                    "type": "string",
                    "id": "#bam_readcount.cwl/sample"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#bam_readcount.cwl/vcf"
                }
            ],
            "steps": [
                {
                    "run": "#bam_readcount.cwl_2",
                    "in": [
                        {
                            "source": "#bam_readcount.cwl/bam",
                            "id": "#bam_readcount.cwl/bam_readcount/bam"
                        },
                        {
                            "source": "#bam_readcount.cwl/min_base_quality",
                            "id": "#bam_readcount.cwl/bam_readcount/min_base_quality"
                        },
                        {
                            "source": "#bam_readcount.cwl/min_mapping_quality",
                            "id": "#bam_readcount.cwl/bam_readcount/min_mapping_quality"
                        },
                        {
                            "source": "#bam_readcount.cwl/reference_fasta",
                            "id": "#bam_readcount.cwl/bam_readcount/reference_fasta"
                        },
                        {
                            "source": "#bam_readcount.cwl/sample",
                            "id": "#bam_readcount.cwl/bam_readcount/sample"
                        },
                        {
                            "source": "#bam_readcount.cwl/decompose_variants/decomposed_vcf",
                            "id": "#bam_readcount.cwl/bam_readcount/vcf"
                        }
                    ],
                    "out": [
                        "#bam_readcount.cwl/bam_readcount/snv_bam_readcount_tsv",
                        "#bam_readcount.cwl/bam_readcount/indel_bam_readcount_tsv"
                    ],
                    "id": "#bam_readcount.cwl/bam_readcount"
                },
                {
                    "run": "#vt_decompose.cwl",
                    "in": [
                        {
                            "source": "#bam_readcount.cwl/normalize_variants/normalized_vcf",
                            "id": "#bam_readcount.cwl/decompose_variants/vcf"
                        }
                    ],
                    "out": [
                        "#bam_readcount.cwl/decompose_variants/decomposed_vcf"
                    ],
                    "id": "#bam_readcount.cwl/decompose_variants"
                },
                {
                    "run": "#normalize_variants.cwl",
                    "in": [
                        {
                            "source": "#bam_readcount.cwl/reference_fasta",
                            "id": "#bam_readcount.cwl/normalize_variants/reference"
                        },
                        {
                            "source": "#bam_readcount.cwl/vcf",
                            "id": "#bam_readcount.cwl/normalize_variants/vcf"
                        }
                    ],
                    "out": [
                        "#bam_readcount.cwl/normalize_variants/normalized_vcf"
                    ],
                    "id": "#bam_readcount.cwl/normalize_variants"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#bam_readcount.cwl/bam_readcount/indel_bam_readcount_tsv",
                    "id": "#bam_readcount.cwl/indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#bam_readcount.cwl/decompose_variants/decomposed_vcf",
                    "id": "#bam_readcount.cwl/normalized_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#bam_readcount.cwl/bam_readcount/snv_bam_readcount_tsv",
                    "id": "#bam_readcount.cwl/snv_bam_readcount_tsv"
                }
            ],
            "id": "#bam_readcount.cwl"
        },
        {
            "class": "Workflow",
            "label": "bam to trimmed fastqs and HISAT alignments",
            "requirements": [
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "int",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/adapter_min_overlap"
                },
                {
                    "type": "string",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/adapter_trim_end"
                },
                {
                    "type": "File",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/adapters"
                },
                {
                    "type": "File",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam"
                },
                {
                    "type": "int",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/max_uncalled"
                },
                {
                    "type": "int",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/min_readlength"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/read_group_fields"
                },
                {
                    "type": "string",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/read_group_id"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".1.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".2.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".3.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".4.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".5.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".6.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".7.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".8.ht2",
                            "required": null
                        }
                    ],
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/reference_index"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/strand/first",
                                "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/strand/second",
                                "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/strand/unstranded"
                            ]
                        }
                    ],
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/strand"
                }
            ],
            "steps": [
                {
                    "run": "#bam_to_fastq.cwl",
                    "in": [
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam_to_fastq/bam"
                        }
                    ],
                    "out": [
                        "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam_to_fastq/fastq1",
                        "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam_to_fastq/fastq2"
                    ],
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam_to_fastq"
                },
                {
                    "run": "#hisat2_align.cwl",
                    "in": [
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/fastqs",
                            "valueFrom": "$(self[0])",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/fastq1"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/fastqs",
                            "valueFrom": "$(self[1])",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/fastq2"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/read_group_fields",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/read_group_fields"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/read_group_id",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/read_group_id"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/reference_index",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/reference_index"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/strand",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/strand"
                        }
                    ],
                    "out": [
                        "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/aligned_bam"
                    ],
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align"
                },
                {
                    "run": "#trim_fastq.cwl",
                    "in": [
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/adapter_min_overlap",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/adapter_min_overlap"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/adapter_trim_end",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/adapter_trim_end"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/adapters",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/adapters"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/max_uncalled",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/max_uncalled"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/min_readlength",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/min_readlength"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam_to_fastq/fastq1",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/reads1"
                        },
                        {
                            "source": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/bam_to_fastq/fastq2",
                            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/reads2"
                        }
                    ],
                    "out": [
                        "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/fastqs"
                    ],
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/hisat2_align/aligned_bam",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/aligned_bam"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/trim_fastq/fastqs",
                    "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl/fastqs"
                }
            ],
            "id": "#bam_to_trimmed_fastq_and_hisat_alignments.cwl"
        },
        {
            "class": "Workflow",
            "label": "bgzip and index VCF",
            "inputs": [
                {
                    "type": "File",
                    "id": "#bgzip_and_index.cwl/vcf"
                }
            ],
            "steps": [
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#bgzip_and_index.cwl/vcf",
                            "id": "#bgzip_and_index.cwl/bgzip/file"
                        }
                    ],
                    "out": [
                        "#bgzip_and_index.cwl/bgzip/bgzipped_file"
                    ],
                    "id": "#bgzip_and_index.cwl/bgzip"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#bgzip_and_index.cwl/bgzip/bgzipped_file",
                            "id": "#bgzip_and_index.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#bgzip_and_index.cwl/index/indexed_vcf"
                    ],
                    "id": "#bgzip_and_index.cwl/index"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#bgzip_and_index.cwl/index/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#bgzip_and_index.cwl/indexed_vcf"
                }
            ],
            "id": "#bgzip_and_index.cwl"
        },
        {
            "class": "Workflow",
            "label": "Detect Docm variants",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#docm_cle.cwl/docm_vcf"
                },
                {
                    "type": "boolean",
                    "id": "#docm_cle.cwl/filter_docm_variants"
                },
                {
                    "type": "File",
                    "id": "#docm_cle.cwl/interval_list"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#docm_cle.cwl/normal_bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#docm_cle.cwl/reference"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#docm_cle.cwl/tumor_bam"
                }
            ],
            "steps": [
                {
                    "run": "#docm_gatk_haplotype_caller.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/tumor_bam",
                            "id": "#docm_cle.cwl/GATK_haplotype_caller/bam"
                        },
                        {
                            "source": "#docm_cle.cwl/docm_vcf",
                            "id": "#docm_cle.cwl/GATK_haplotype_caller/docm_vcf"
                        },
                        {
                            "source": "#docm_cle.cwl/interval_list",
                            "id": "#docm_cle.cwl/GATK_haplotype_caller/interval_list"
                        },
                        {
                            "source": "#docm_cle.cwl/normal_bam",
                            "id": "#docm_cle.cwl/GATK_haplotype_caller/normal_bam"
                        },
                        {
                            "source": "#docm_cle.cwl/reference",
                            "id": "#docm_cle.cwl/GATK_haplotype_caller/reference"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/GATK_haplotype_caller/docm_raw_variants"
                    ],
                    "id": "#docm_cle.cwl/GATK_haplotype_caller"
                },
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/GATK_haplotype_caller/docm_raw_variants",
                            "id": "#docm_cle.cwl/bgzip/file"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/bgzip/bgzipped_file"
                    ],
                    "id": "#docm_cle.cwl/bgzip"
                },
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/docm_filter/docm_filtered_variants",
                            "id": "#docm_cle.cwl/bgzip2/file"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/bgzip2/bgzipped_file"
                    ],
                    "id": "#docm_cle.cwl/bgzip2"
                },
                {
                    "run": "#vt_decompose.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/index/indexed_vcf",
                            "id": "#docm_cle.cwl/decompose/vcf"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/decompose/decomposed_vcf"
                    ],
                    "id": "#docm_cle.cwl/decompose"
                },
                {
                    "run": "#filter_vcf_docm.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/decompose/decomposed_vcf",
                            "id": "#docm_cle.cwl/docm_filter/docm_raw_variants"
                        },
                        {
                            "source": "#docm_cle.cwl/filter_docm_variants",
                            "id": "#docm_cle.cwl/docm_filter/filter_docm_variants"
                        },
                        {
                            "source": "#docm_cle.cwl/normal_bam",
                            "id": "#docm_cle.cwl/docm_filter/normal_bam"
                        },
                        {
                            "source": "#docm_cle.cwl/tumor_bam",
                            "id": "#docm_cle.cwl/docm_filter/tumor_bam"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/docm_filter/docm_filtered_variants"
                    ],
                    "id": "#docm_cle.cwl/docm_filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/bgzip/bgzipped_file",
                            "id": "#docm_cle.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/index/indexed_vcf"
                    ],
                    "id": "#docm_cle.cwl/index"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#docm_cle.cwl/bgzip2/bgzipped_file",
                            "id": "#docm_cle.cwl/index2/vcf"
                        }
                    ],
                    "out": [
                        "#docm_cle.cwl/index2/indexed_vcf"
                    ],
                    "id": "#docm_cle.cwl/index2"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#docm_cle.cwl/index2/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#docm_cle.cwl/docm_variants_vcf"
                }
            ],
            "id": "#docm_cle.cwl"
        },
        {
            "class": "Workflow",
            "label": "Apply filters to VCF file",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "boolean",
                    "id": "#filter_vcf.cwl/do_cle_vcf_filter"
                },
                {
                    "type": "float",
                    "id": "#filter_vcf.cwl/filter_gnomADe_maximum_population_allele_frequency"
                },
                {
                    "type": "float",
                    "id": "#filter_vcf.cwl/filter_mapq0_threshold"
                },
                {
                    "type": "int",
                    "id": "#filter_vcf.cwl/filter_minimum_depth"
                },
                {
                    "type": "float",
                    "id": "#filter_vcf.cwl/filter_somatic_llr_normal_contamination_rate"
                },
                {
                    "type": "float",
                    "id": "#filter_vcf.cwl/filter_somatic_llr_threshold"
                },
                {
                    "type": "float",
                    "id": "#filter_vcf.cwl/filter_somatic_llr_tumor_purity"
                },
                {
                    "type": "string",
                    "id": "#filter_vcf.cwl/gnomad_field_name"
                },
                {
                    "type": "string",
                    "id": "#filter_vcf.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#filter_vcf.cwl/reference"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#filter_vcf.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#filter_vcf.cwl/tumor_sample_name"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "An optional VCF with variants that will be flagged as 'VALIDATED' if found in this pipeline's main output VCF",
                    "id": "#filter_vcf.cwl/validated_variants"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#filter_vcf.cwl/vcf"
                }
            ],
            "steps": [
                {
                    "run": "#filter_known_variants.cwl",
                    "in": [
                        {
                            "source": "#filter_vcf.cwl/validated_variants",
                            "id": "#filter_vcf.cwl/filter_known_variants/validated_variants"
                        },
                        {
                            "source": "#filter_vcf.cwl/vcf",
                            "id": "#filter_vcf.cwl/filter_known_variants/vcf"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/filter_known_variants/validated_annotated_vcf"
                    ],
                    "id": "#filter_vcf.cwl/filter_known_variants"
                },
                {
                    "run": "#filter_vcf_cle.cwl",
                    "in": [
                        {
                            "source": "#filter_vcf.cwl/do_cle_vcf_filter",
                            "id": "#filter_vcf.cwl/filter_vcf_cle/filter"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_vcf_mapq0/mapq0_filtered_vcf",
                            "id": "#filter_vcf.cwl/filter_vcf_cle/vcf"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/filter_vcf_cle/cle_filtered_vcf"
                    ],
                    "id": "#filter_vcf.cwl/filter_vcf_cle"
                },
                {
                    "run": "#filter_vcf_depth.cwl",
                    "in": [
                        {
                            "source": "#filter_vcf.cwl/filter_minimum_depth",
                            "id": "#filter_vcf.cwl/filter_vcf_depth/minimum_depth"
                        },
                        {
                            "source": [
                                "#filter_vcf.cwl/normal_sample_name",
                                "#filter_vcf.cwl/tumor_sample_name"
                            ],
                            "linkMerge": "merge_flattened",
                            "id": "#filter_vcf.cwl/filter_vcf_depth/sample_names"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_vcf_cle/cle_filtered_vcf",
                            "id": "#filter_vcf.cwl/filter_vcf_depth/vcf"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/filter_vcf_depth/depth_filtered_vcf"
                    ],
                    "id": "#filter_vcf.cwl/filter_vcf_depth"
                },
                {
                    "run": "#filter_vcf_custom_allele_freq.cwl",
                    "in": [
                        {
                            "source": "#filter_vcf.cwl/gnomad_field_name",
                            "id": "#filter_vcf.cwl/filter_vcf_gnomADe_allele_freq/field_name"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_gnomADe_maximum_population_allele_frequency",
                            "id": "#filter_vcf.cwl/filter_vcf_gnomADe_allele_freq/maximum_population_allele_frequency"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_known_variants/validated_annotated_vcf",
                            "id": "#filter_vcf.cwl/filter_vcf_gnomADe_allele_freq/vcf"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/filter_vcf_gnomADe_allele_freq/filtered_vcf"
                    ],
                    "id": "#filter_vcf.cwl/filter_vcf_gnomADe_allele_freq"
                },
                {
                    "run": "#filter_vcf_mapq0.cwl",
                    "in": [
                        {
                            "source": "#filter_vcf.cwl/reference",
                            "id": "#filter_vcf.cwl/filter_vcf_mapq0/reference"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_mapq0_threshold",
                            "id": "#filter_vcf.cwl/filter_vcf_mapq0/threshold"
                        },
                        {
                            "source": "#filter_vcf.cwl/tumor_bam",
                            "id": "#filter_vcf.cwl/filter_vcf_mapq0/tumor_bam"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_vcf_gnomADe_allele_freq/filtered_vcf",
                            "id": "#filter_vcf.cwl/filter_vcf_mapq0/vcf"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/filter_vcf_mapq0/mapq0_filtered_vcf"
                    ],
                    "id": "#filter_vcf.cwl/filter_vcf_mapq0"
                },
                {
                    "run": "#filter_vcf_somatic_llr.cwl",
                    "in": [
                        {
                            "source": "#filter_vcf.cwl/filter_somatic_llr_normal_contamination_rate",
                            "id": "#filter_vcf.cwl/filter_vcf_somatic_llr/normal_contamination_rate"
                        },
                        {
                            "source": "#filter_vcf.cwl/normal_sample_name",
                            "id": "#filter_vcf.cwl/filter_vcf_somatic_llr/normal_sample_name"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_somatic_llr_threshold",
                            "id": "#filter_vcf.cwl/filter_vcf_somatic_llr/threshold"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_somatic_llr_tumor_purity",
                            "id": "#filter_vcf.cwl/filter_vcf_somatic_llr/tumor_purity"
                        },
                        {
                            "source": "#filter_vcf.cwl/tumor_sample_name",
                            "id": "#filter_vcf.cwl/filter_vcf_somatic_llr/tumor_sample_name"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_vcf_depth/depth_filtered_vcf",
                            "id": "#filter_vcf.cwl/filter_vcf_somatic_llr/vcf"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/filter_vcf_somatic_llr/somatic_llr_filtered_vcf"
                    ],
                    "id": "#filter_vcf.cwl/filter_vcf_somatic_llr"
                },
                {
                    "run": "#staged_rename.cwl",
                    "in": [
                        {
                            "valueFrom": "annotated_filtered.vcf",
                            "id": "#filter_vcf.cwl/set_final_vcf_name/name"
                        },
                        {
                            "source": "#filter_vcf.cwl/filter_vcf_somatic_llr/somatic_llr_filtered_vcf",
                            "id": "#filter_vcf.cwl/set_final_vcf_name/original"
                        }
                    ],
                    "out": [
                        "#filter_vcf.cwl/set_final_vcf_name/replacement"
                    ],
                    "id": "#filter_vcf.cwl/set_final_vcf_name"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#filter_vcf.cwl/set_final_vcf_name/replacement",
                    "id": "#filter_vcf.cwl/filtered_vcf"
                }
            ],
            "id": "#filter_vcf.cwl"
        },
        {
            "class": "Workflow",
            "label": "fp_filter workflow",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#fp_filter.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#fp_filter.cwl/min_var_freq"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#fp_filter.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#fp_filter.cwl/sample_name"
                },
                {
                    "type": "string",
                    "id": "#fp_filter.cwl/variant_caller"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#fp_filter.cwl/vcf"
                }
            ],
            "steps": [
                {
                    "run": "#vt_decompose.cwl",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/normalize_variants/normalized_vcf",
                            "id": "#fp_filter.cwl/decompose_variants/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/decompose_variants/decomposed_vcf"
                    ],
                    "id": "#fp_filter.cwl/decompose_variants"
                },
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/fp_filter/filtered_vcf",
                            "id": "#fp_filter.cwl/fp_bgzip/file"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/fp_bgzip/bgzipped_file"
                    ],
                    "id": "#fp_filter.cwl/fp_bgzip"
                },
                {
                    "run": "#fp_filter.cwl_2",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/bam",
                            "id": "#fp_filter.cwl/fp_filter/bam"
                        },
                        {
                            "source": "#fp_filter.cwl/min_var_freq",
                            "id": "#fp_filter.cwl/fp_filter/min_var_freq"
                        },
                        {
                            "source": "#fp_filter.cwl/variant_caller",
                            "valueFrom": "$(self)_full",
                            "id": "#fp_filter.cwl/fp_filter/output_vcf_basename"
                        },
                        {
                            "source": "#fp_filter.cwl/reference",
                            "id": "#fp_filter.cwl/fp_filter/reference"
                        },
                        {
                            "source": "#fp_filter.cwl/sample_name",
                            "id": "#fp_filter.cwl/fp_filter/sample_name"
                        },
                        {
                            "source": "#fp_filter.cwl/index/indexed_vcf",
                            "id": "#fp_filter.cwl/fp_filter/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/fp_filter/filtered_vcf"
                    ],
                    "id": "#fp_filter.cwl/fp_filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/fp_bgzip/bgzipped_file",
                            "id": "#fp_filter.cwl/fp_index/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/fp_index/indexed_vcf"
                    ],
                    "id": "#fp_filter.cwl/fp_index"
                },
                {
                    "run": "#select_variants.cwl",
                    "in": [
                        {
                            "default": true,
                            "id": "#fp_filter.cwl/hard_filter/exclude_filtered"
                        },
                        {
                            "source": "#fp_filter.cwl/variant_caller",
                            "valueFrom": "$(self)_filtered",
                            "id": "#fp_filter.cwl/hard_filter/output_vcf_basename"
                        },
                        {
                            "source": "#fp_filter.cwl/reference",
                            "id": "#fp_filter.cwl/hard_filter/reference"
                        },
                        {
                            "source": "#fp_filter.cwl/fp_index/indexed_vcf",
                            "id": "#fp_filter.cwl/hard_filter/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/hard_filter/filtered_vcf"
                    ],
                    "id": "#fp_filter.cwl/hard_filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/decompose_variants/decomposed_vcf",
                            "id": "#fp_filter.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/index/indexed_vcf"
                    ],
                    "id": "#fp_filter.cwl/index"
                },
                {
                    "run": "#normalize_variants.cwl",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/reference",
                            "id": "#fp_filter.cwl/normalize_variants/reference"
                        },
                        {
                            "source": "#fp_filter.cwl/sanitize_vcf/sanitized_vcf",
                            "id": "#fp_filter.cwl/normalize_variants/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/normalize_variants/normalized_vcf"
                    ],
                    "id": "#fp_filter.cwl/normalize_variants"
                },
                {
                    "run": "#vcf_sanitize.cwl",
                    "in": [
                        {
                            "source": "#fp_filter.cwl/vcf",
                            "id": "#fp_filter.cwl/sanitize_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#fp_filter.cwl/sanitize_vcf/sanitized_vcf"
                    ],
                    "id": "#fp_filter.cwl/sanitize_vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#fp_filter.cwl/hard_filter/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#fp_filter.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#fp_filter.cwl/fp_index/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#fp_filter.cwl/unfiltered_vcf"
                }
            ],
            "id": "#fp_filter.cwl"
        },
        {
            "class": "Workflow",
            "label": "scatter GATK HaplotypeCaller over intervals",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/contamination_fraction"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/dbsnp_vcf"
                },
                {
                    "type": {
                        "type": "enum",
                        "symbols": [
                            "#gatk_haplotypecaller_iterator.cwl/emit_reference_confidence/NONE",
                            "#gatk_haplotypecaller_iterator.cwl/emit_reference_confidence/BP_RESOLUTION",
                            "#gatk_haplotypecaller_iterator.cwl/emit_reference_confidence/GVCF"
                        ]
                    },
                    "id": "#gatk_haplotypecaller_iterator.cwl/emit_reference_confidence"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#gatk_haplotypecaller_iterator.cwl/gvcf_gq_bands"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#gatk_haplotypecaller_iterator.cwl/intervals"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/max_alternate_alleles"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "an optional string to prepend to the output filename",
                    "id": "#gatk_haplotypecaller_iterator.cwl/output_prefix"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/ploidy"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/read_filter"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/reference"
                }
            ],
            "steps": [
                {
                    "scatter": [
                        "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/intervals"
                    ],
                    "run": "#gatk_haplotype_caller.cwl",
                    "in": [
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/bam",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/bam"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/contamination_fraction",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/contamination_fraction"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/dbsnp_vcf",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/dbsnp_vcf"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/emit_reference_confidence",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/emit_reference_confidence"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/gvcf_gq_bands",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/gvcf_gq_bands"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/intervals",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/intervals"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/max_alternate_alleles",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/max_alternate_alleles"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/output_prefix",
                            "valueFrom": "${ var prefix = self !== null ? self : \"\"; if (inputs.intervals.length == 1 && inputs.intervals[0].match(/^[0-9A-Za-z]+$/)) { return prefix + inputs.intervals[0] + \".g.vcf.gz\"; } else { return prefix + \"output.g.vcf.gz\"; } }",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/output_file_name"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/ploidy",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/ploidy"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/read_filter",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/read_filter"
                        },
                        {
                            "source": "#gatk_haplotypecaller_iterator.cwl/reference",
                            "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/reference"
                        }
                    ],
                    "out": [
                        "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/gvcf"
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#gatk_haplotypecaller_iterator.cwl/haplotype_caller/gvcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotypecaller_iterator.cwl/gvcf"
                }
            ],
            "id": "#gatk_haplotypecaller_iterator.cwl"
        },
        {
            "class": "Workflow",
            "label": "exome alignment and germline variant detection",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#vep_custom_annotation.yml/vep_custom_annotation"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#germline_detect_variants.cwl/annotate_coding_only"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#germline_detect_variants.cwl/contamination_fraction"
                },
                {
                    "type": "float",
                    "default": 0.05,
                    "id": "#germline_detect_variants.cwl/filter_gnomAD_maximum_population_allele_frequency"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "variants",
                    "id": "#germline_detect_variants.cwl/final_tsv_prefix"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#germline_detect_variants.cwl/gvcf_gq_bands"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "string"
                        }
                    },
                    "id": "#germline_detect_variants.cwl/intervals"
                },
                {
                    "type": "File",
                    "id": "#germline_detect_variants.cwl/limit_variant_intervals"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#germline_detect_variants.cwl/ploidy"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#germline_detect_variants.cwl/synonyms_file"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "default": [
                        "CHROM",
                        "POS",
                        "ID",
                        "REF",
                        "ALT"
                    ],
                    "id": "#germline_detect_variants.cwl/variants_to_table_fields"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/variants_to_table_genotype_fields"
                },
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "id": "#germline_detect_variants.cwl/vep_cache_dir"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#vep_custom_annotation.yml/vep_custom_annotation"
                    },
                    "doc": "custom type, check types directory for input format",
                    "id": "#germline_detect_variants.cwl/vep_custom_annotations"
                },
                {
                    "type": "string",
                    "doc": "genome assembly to use in vep. Examples: GRCh38 or GRCm38",
                    "id": "#germline_detect_variants.cwl/vep_ensembl_assembly"
                },
                {
                    "type": "string",
                    "doc": "ensembl species - Must be present in the cache directory. Examples: homo_sapiens or mus_musculus",
                    "id": "#germline_detect_variants.cwl/vep_ensembl_species"
                },
                {
                    "type": "string",
                    "doc": "ensembl version - Must be present in the cache directory. Example: 95",
                    "id": "#germline_detect_variants.cwl/vep_ensembl_version"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "Frameshift",
                        "Wildtype"
                    ],
                    "id": "#germline_detect_variants.cwl/vep_plugins"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/vep_to_table_fields"
                }
            ],
            "steps": [
                {
                    "run": "#vep.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/vep_cache_dir",
                            "id": "#germline_detect_variants.cwl/annotate_variants/cache_dir"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/annotate_coding_only",
                            "id": "#germline_detect_variants.cwl/annotate_variants/coding_only"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_custom_annotations",
                            "id": "#germline_detect_variants.cwl/annotate_variants/custom_annotations"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_ensembl_assembly",
                            "id": "#germline_detect_variants.cwl/annotate_variants/ensembl_assembly"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_ensembl_species",
                            "id": "#germline_detect_variants.cwl/annotate_variants/ensembl_species"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_ensembl_version",
                            "id": "#germline_detect_variants.cwl/annotate_variants/ensembl_version"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_plugins",
                            "id": "#germline_detect_variants.cwl/annotate_variants/plugins"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/reference",
                            "id": "#germline_detect_variants.cwl/annotate_variants/reference"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/synonyms_file",
                            "id": "#germline_detect_variants.cwl/annotate_variants/synonyms_file"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/merge_vcfs/merged_vcf",
                            "id": "#germline_detect_variants.cwl/annotate_variants/vcf"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/annotate_variants/annotated_vcf",
                        "#germline_detect_variants.cwl/annotate_variants/vep_summary"
                    ],
                    "id": "#germline_detect_variants.cwl/annotate_variants"
                },
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/annotate_variants/annotated_vcf",
                            "id": "#germline_detect_variants.cwl/bgzip_annotated_vcf/file"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/bgzip_annotated_vcf/bgzipped_file"
                    ],
                    "id": "#germline_detect_variants.cwl/bgzip_annotated_vcf"
                },
                {
                    "run": "#germline_filter_vcf.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/annotate_variants/annotated_vcf",
                            "id": "#germline_detect_variants.cwl/filter_vcf/annotated_vcf"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filter_gnomAD_maximum_population_allele_frequency",
                            "id": "#germline_detect_variants.cwl/filter_vcf/filter_gnomAD_maximum_population_allele_frequency"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_custom_annotations",
                            "valueFrom": "${\n   if(self){\n        for(var i=0; i<self.length; i++){\n            if(self[i].annotation.gnomad_filter){\n                return(self[i].annotation.name + '_AF');\n            }\n        }\n    }\n    return('gnomAD_AF');\n}\n",
                            "id": "#germline_detect_variants.cwl/filter_vcf/gnomad_field_name"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/limit_variant_intervals",
                            "id": "#germline_detect_variants.cwl/filter_vcf/limit_variant_intervals"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/reference",
                            "id": "#germline_detect_variants.cwl/filter_vcf/reference"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/filter_vcf/filtered_vcf",
                        "#germline_detect_variants.cwl/filter_vcf/final_vcf"
                    ],
                    "id": "#germline_detect_variants.cwl/filter_vcf"
                },
                {
                    "run": "#add_vep_fields_to_table.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/final_tsv_prefix",
                            "id": "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table/prefix"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filtered_variants_to_table/variants_tsv",
                            "id": "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table/tsv"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filter_vcf/filtered_vcf",
                            "id": "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table/vcf"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_to_table_fields",
                            "id": "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table/vep_fields"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table/annotated_variants_tsv"
                    ],
                    "id": "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table"
                },
                {
                    "run": "#variants_to_table.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/variants_to_table_fields",
                            "id": "#germline_detect_variants.cwl/filtered_variants_to_table/fields"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/variants_to_table_genotype_fields",
                            "id": "#germline_detect_variants.cwl/filtered_variants_to_table/genotype_fields"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/reference",
                            "id": "#germline_detect_variants.cwl/filtered_variants_to_table/reference"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filter_vcf/filtered_vcf",
                            "id": "#germline_detect_variants.cwl/filtered_variants_to_table/vcf"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/filtered_variants_to_table/variants_tsv"
                    ],
                    "id": "#germline_detect_variants.cwl/filtered_variants_to_table"
                },
                {
                    "run": "#add_vep_fields_to_table.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/final_tsv_prefix",
                            "id": "#germline_detect_variants.cwl/final_add_vep_fields_to_table/prefix"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/final_variants_to_table/variants_tsv",
                            "id": "#germline_detect_variants.cwl/final_add_vep_fields_to_table/tsv"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filter_vcf/final_vcf",
                            "id": "#germline_detect_variants.cwl/final_add_vep_fields_to_table/vcf"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/vep_to_table_fields",
                            "id": "#germline_detect_variants.cwl/final_add_vep_fields_to_table/vep_fields"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/final_add_vep_fields_to_table/annotated_variants_tsv"
                    ],
                    "id": "#germline_detect_variants.cwl/final_add_vep_fields_to_table"
                },
                {
                    "run": "#variants_to_table.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/variants_to_table_fields",
                            "id": "#germline_detect_variants.cwl/final_variants_to_table/fields"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/variants_to_table_genotype_fields",
                            "id": "#germline_detect_variants.cwl/final_variants_to_table/genotype_fields"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/reference",
                            "id": "#germline_detect_variants.cwl/final_variants_to_table/reference"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filter_vcf/final_vcf",
                            "id": "#germline_detect_variants.cwl/final_variants_to_table/vcf"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/final_variants_to_table/variants_tsv"
                    ],
                    "id": "#germline_detect_variants.cwl/final_variants_to_table"
                },
                {
                    "run": "#gatk_haplotypecaller_iterator.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/bam",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/bam"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/contamination_fraction",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/contamination_fraction"
                        },
                        {
                            "default": "NONE",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/emit_reference_confidence"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/gvcf_gq_bands",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/gvcf_gq_bands"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/intervals",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/intervals"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/ploidy",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/ploidy"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/reference",
                            "id": "#germline_detect_variants.cwl/haplotype_caller/reference"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/haplotype_caller/gvcf"
                    ],
                    "id": "#germline_detect_variants.cwl/haplotype_caller"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/bgzip_annotated_vcf/bgzipped_file",
                            "id": "#germline_detect_variants.cwl/index_annotated_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/index_annotated_vcf/indexed_vcf"
                    ],
                    "id": "#germline_detect_variants.cwl/index_annotated_vcf"
                },
                {
                    "run": "#picard_merge_vcfs.cwl",
                    "in": [
                        {
                            "source": "#germline_detect_variants.cwl/haplotype_caller/gvcf",
                            "id": "#germline_detect_variants.cwl/merge_vcfs/vcfs"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/merge_vcfs/merged_vcf"
                    ],
                    "id": "#germline_detect_variants.cwl/merge_vcfs"
                },
                {
                    "run": "#staged_rename.cwl",
                    "in": [
                        {
                            "valueFrom": "annotated.filtered.tsv",
                            "id": "#germline_detect_variants.cwl/set_filtered_tsv_name/name"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/filtered_add_vep_fields_to_table/annotated_variants_tsv",
                            "id": "#germline_detect_variants.cwl/set_filtered_tsv_name/original"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/set_filtered_tsv_name/replacement"
                    ],
                    "id": "#germline_detect_variants.cwl/set_filtered_tsv_name"
                },
                {
                    "run": "#staged_rename.cwl",
                    "in": [
                        {
                            "valueFrom": "annotated.filtered.final.tsv",
                            "id": "#germline_detect_variants.cwl/set_final_tsv_name/name"
                        },
                        {
                            "source": "#germline_detect_variants.cwl/final_add_vep_fields_to_table/annotated_variants_tsv",
                            "id": "#germline_detect_variants.cwl/set_final_tsv_name/original"
                        }
                    ],
                    "out": [
                        "#germline_detect_variants.cwl/set_final_tsv_name/replacement"
                    ],
                    "id": "#germline_detect_variants.cwl/set_final_tsv_name"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#germline_detect_variants.cwl/set_filtered_tsv_name/replacement",
                    "id": "#germline_detect_variants.cwl/filtered_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_detect_variants.cwl/filter_vcf/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_detect_variants.cwl/set_final_tsv_name/replacement",
                    "id": "#germline_detect_variants.cwl/final_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_detect_variants.cwl/filter_vcf/final_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/final_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_detect_variants.cwl/merge_vcfs/merged_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#germline_detect_variants.cwl/raw_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#germline_detect_variants.cwl/annotate_variants/vep_summary",
                    "id": "#germline_detect_variants.cwl/vep_summary"
                }
            ],
            "id": "#germline_detect_variants.cwl"
        },
        {
            "class": "Workflow",
            "label": "Apply filters to VCF file",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#germline_filter_vcf.cwl/annotated_vcf"
                },
                {
                    "type": "float",
                    "id": "#germline_filter_vcf.cwl/filter_gnomAD_maximum_population_allele_frequency"
                },
                {
                    "type": "string",
                    "id": "#germline_filter_vcf.cwl/gnomad_field_name"
                },
                {
                    "type": "File",
                    "id": "#germline_filter_vcf.cwl/limit_variant_intervals"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#germline_filter_vcf.cwl/reference"
                }
            ],
            "steps": [
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#germline_filter_vcf.cwl/set_filtered_vcf_name/replacement",
                            "id": "#germline_filter_vcf.cwl/bgzip_filtered_vcf/file"
                        }
                    ],
                    "out": [
                        "#germline_filter_vcf.cwl/bgzip_filtered_vcf/bgzipped_file"
                    ],
                    "id": "#germline_filter_vcf.cwl/bgzip_filtered_vcf"
                },
                {
                    "run": "#filter_vcf_coding_variant.cwl",
                    "in": [
                        {
                            "source": "#germline_filter_vcf.cwl/annotated_vcf",
                            "id": "#germline_filter_vcf.cwl/coding_variant_filter/vcf"
                        }
                    ],
                    "out": [
                        "#germline_filter_vcf.cwl/coding_variant_filter/filtered_vcf"
                    ],
                    "id": "#germline_filter_vcf.cwl/coding_variant_filter"
                },
                {
                    "run": "#filter_vcf_custom_allele_freq.cwl",
                    "in": [
                        {
                            "source": "#germline_filter_vcf.cwl/gnomad_field_name",
                            "id": "#germline_filter_vcf.cwl/gnomad_frequency_filter/field_name"
                        },
                        {
                            "source": "#germline_filter_vcf.cwl/filter_gnomAD_maximum_population_allele_frequency",
                            "id": "#germline_filter_vcf.cwl/gnomad_frequency_filter/maximum_population_allele_frequency"
                        },
                        {
                            "source": "#germline_filter_vcf.cwl/coding_variant_filter/filtered_vcf",
                            "id": "#germline_filter_vcf.cwl/gnomad_frequency_filter/vcf"
                        }
                    ],
                    "out": [
                        "#germline_filter_vcf.cwl/gnomad_frequency_filter/filtered_vcf"
                    ],
                    "id": "#germline_filter_vcf.cwl/gnomad_frequency_filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#germline_filter_vcf.cwl/bgzip_filtered_vcf/bgzipped_file",
                            "id": "#germline_filter_vcf.cwl/index_filtered_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#germline_filter_vcf.cwl/index_filtered_vcf/indexed_vcf"
                    ],
                    "id": "#germline_filter_vcf.cwl/index_filtered_vcf"
                },
                {
                    "run": "#select_variants.cwl",
                    "in": [
                        {
                            "default": true,
                            "id": "#germline_filter_vcf.cwl/limit_variants/exclude_filtered"
                        },
                        {
                            "source": "#germline_filter_vcf.cwl/limit_variant_intervals",
                            "id": "#germline_filter_vcf.cwl/limit_variants/interval_list"
                        },
                        {
                            "default": "annotated.filtered.final",
                            "id": "#germline_filter_vcf.cwl/limit_variants/output_vcf_basename"
                        },
                        {
                            "source": "#germline_filter_vcf.cwl/reference",
                            "id": "#germline_filter_vcf.cwl/limit_variants/reference"
                        },
                        {
                            "source": "#germline_filter_vcf.cwl/index_filtered_vcf/indexed_vcf",
                            "id": "#germline_filter_vcf.cwl/limit_variants/vcf"
                        }
                    ],
                    "out": [
                        "#germline_filter_vcf.cwl/limit_variants/filtered_vcf"
                    ],
                    "id": "#germline_filter_vcf.cwl/limit_variants"
                },
                {
                    "run": "#staged_rename.cwl",
                    "in": [
                        {
                            "valueFrom": "annotated.filtered.vcf",
                            "id": "#germline_filter_vcf.cwl/set_filtered_vcf_name/name"
                        },
                        {
                            "source": "#germline_filter_vcf.cwl/gnomad_frequency_filter/filtered_vcf",
                            "id": "#germline_filter_vcf.cwl/set_filtered_vcf_name/original"
                        }
                    ],
                    "out": [
                        "#germline_filter_vcf.cwl/set_filtered_vcf_name/replacement"
                    ],
                    "id": "#germline_filter_vcf.cwl/set_filtered_vcf_name"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "outputSource": "#germline_filter_vcf.cwl/index_filtered_vcf/indexed_vcf",
                    "id": "#germline_filter_vcf.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "outputSource": "#germline_filter_vcf.cwl/limit_variants/filtered_vcf",
                    "id": "#germline_filter_vcf.cwl/final_vcf"
                }
            ],
            "id": "#germline_filter_vcf.cwl"
        },
        {
            "class": "Workflow",
            "label": "HS Metrics workflow",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#labelled_file.yml/labelled_file"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#hs_metrics.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#hs_metrics.cwl/minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#hs_metrics.cwl/minimum_mapping_quality"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#hs_metrics.cwl/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#hs_metrics.cwl/per_target_intervals"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#hs_metrics.cwl/reference"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#hs_metrics.cwl/summary_intervals"
                }
            ],
            "steps": [
                {
                    "run": "#collect_hs_metrics.cwl",
                    "scatter": [
                        "#hs_metrics.cwl/collect_per_base_hs_metrics/bait_intervals",
                        "#hs_metrics.cwl/collect_per_base_hs_metrics/target_intervals",
                        "#hs_metrics.cwl/collect_per_base_hs_metrics/output_prefix"
                    ],
                    "scatterMethod": "dotproduct",
                    "in": [
                        {
                            "source": "#hs_metrics.cwl/per_base_intervals",
                            "valueFrom": "$(self.file)",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/bait_intervals"
                        },
                        {
                            "source": "#hs_metrics.cwl/bam",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/bam"
                        },
                        {
                            "valueFrom": "ALL_READS",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/metric_accumulation_level"
                        },
                        {
                            "source": "#hs_metrics.cwl/minimum_base_quality",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/minimum_base_quality"
                        },
                        {
                            "source": "#hs_metrics.cwl/minimum_mapping_quality",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/minimum_mapping_quality"
                        },
                        {
                            "source": "#hs_metrics.cwl/per_base_intervals",
                            "valueFrom": "base-$(self.label)",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/output_prefix"
                        },
                        {
                            "default": true,
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/per_base_coverage"
                        },
                        {
                            "default": false,
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/per_target_coverage"
                        },
                        {
                            "source": "#hs_metrics.cwl/reference",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/reference"
                        },
                        {
                            "source": "#hs_metrics.cwl/per_base_intervals",
                            "valueFrom": "$(self.file)",
                            "id": "#hs_metrics.cwl/collect_per_base_hs_metrics/target_intervals"
                        }
                    ],
                    "out": [
                        "#hs_metrics.cwl/collect_per_base_hs_metrics/hs_metrics",
                        "#hs_metrics.cwl/collect_per_base_hs_metrics/per_base_coverage_metrics"
                    ],
                    "id": "#hs_metrics.cwl/collect_per_base_hs_metrics"
                },
                {
                    "run": "#collect_hs_metrics.cwl",
                    "scatter": [
                        "#hs_metrics.cwl/collect_per_target_hs_metrics/bait_intervals",
                        "#hs_metrics.cwl/collect_per_target_hs_metrics/target_intervals",
                        "#hs_metrics.cwl/collect_per_target_hs_metrics/output_prefix"
                    ],
                    "scatterMethod": "dotproduct",
                    "in": [
                        {
                            "source": "#hs_metrics.cwl/per_target_intervals",
                            "valueFrom": "$(self.file)",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/bait_intervals"
                        },
                        {
                            "source": "#hs_metrics.cwl/bam",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/bam"
                        },
                        {
                            "valueFrom": "ALL_READS",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/metric_accumulation_level"
                        },
                        {
                            "source": "#hs_metrics.cwl/minimum_base_quality",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/minimum_base_quality"
                        },
                        {
                            "source": "#hs_metrics.cwl/minimum_mapping_quality",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/minimum_mapping_quality"
                        },
                        {
                            "source": "#hs_metrics.cwl/per_target_intervals",
                            "valueFrom": "target-$(self.label)",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/output_prefix"
                        },
                        {
                            "default": false,
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/per_base_coverage"
                        },
                        {
                            "default": true,
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/per_target_coverage"
                        },
                        {
                            "source": "#hs_metrics.cwl/reference",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/reference"
                        },
                        {
                            "source": "#hs_metrics.cwl/per_target_intervals",
                            "valueFrom": "$(self.file)",
                            "id": "#hs_metrics.cwl/collect_per_target_hs_metrics/target_intervals"
                        }
                    ],
                    "out": [
                        "#hs_metrics.cwl/collect_per_target_hs_metrics/hs_metrics",
                        "#hs_metrics.cwl/collect_per_target_hs_metrics/per_target_coverage_metrics"
                    ],
                    "id": "#hs_metrics.cwl/collect_per_target_hs_metrics"
                },
                {
                    "run": "#collect_hs_metrics.cwl",
                    "scatter": [
                        "#hs_metrics.cwl/collect_summary_hs_metrics/bait_intervals",
                        "#hs_metrics.cwl/collect_summary_hs_metrics/target_intervals",
                        "#hs_metrics.cwl/collect_summary_hs_metrics/output_prefix"
                    ],
                    "scatterMethod": "dotproduct",
                    "in": [
                        {
                            "source": "#hs_metrics.cwl/summary_intervals",
                            "valueFrom": "$(self.file)",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/bait_intervals"
                        },
                        {
                            "source": "#hs_metrics.cwl/bam",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/bam"
                        },
                        {
                            "valueFrom": "ALL_READS",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/metric_accumulation_level"
                        },
                        {
                            "source": "#hs_metrics.cwl/minimum_base_quality",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/minimum_base_quality"
                        },
                        {
                            "source": "#hs_metrics.cwl/minimum_mapping_quality",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/minimum_mapping_quality"
                        },
                        {
                            "source": "#hs_metrics.cwl/summary_intervals",
                            "valueFrom": "summary-$(self.label)",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/output_prefix"
                        },
                        {
                            "default": false,
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/per_base_coverage"
                        },
                        {
                            "default": false,
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/per_target_coverage"
                        },
                        {
                            "source": "#hs_metrics.cwl/reference",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/reference"
                        },
                        {
                            "source": "#hs_metrics.cwl/summary_intervals",
                            "valueFrom": "$(self.file)",
                            "id": "#hs_metrics.cwl/collect_summary_hs_metrics/target_intervals"
                        }
                    ],
                    "out": [
                        "#hs_metrics.cwl/collect_summary_hs_metrics/hs_metrics"
                    ],
                    "id": "#hs_metrics.cwl/collect_summary_hs_metrics"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#hs_metrics.cwl/collect_per_base_hs_metrics/per_base_coverage_metrics",
                    "id": "#hs_metrics.cwl/per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#hs_metrics.cwl/collect_per_base_hs_metrics/hs_metrics",
                    "id": "#hs_metrics.cwl/per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#hs_metrics.cwl/collect_per_target_hs_metrics/per_target_coverage_metrics",
                    "id": "#hs_metrics.cwl/per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#hs_metrics.cwl/collect_per_target_hs_metrics/hs_metrics",
                    "id": "#hs_metrics.cwl/per_target_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#hs_metrics.cwl/collect_summary_hs_metrics/hs_metrics",
                    "id": "#hs_metrics.cwl/summary_hs_metrics"
                }
            ],
            "id": "#hs_metrics.cwl"
        },
        {
            "class": "Workflow",
            "label": "mutect parallel workflow",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#mutect.cwl/interval_list"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl/normal_bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl/reference"
                },
                {
                    "type": "int",
                    "id": "#mutect.cwl/scatter_count"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        },
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#mutect.cwl/tumor_sample_name"
                }
            ],
            "steps": [
                {
                    "run": "#fp_filter.cwl",
                    "in": [
                        {
                            "source": "#mutect.cwl/tumor_bam",
                            "id": "#mutect.cwl/filter/bam"
                        },
                        {
                            "source": "#mutect.cwl/reference",
                            "id": "#mutect.cwl/filter/reference"
                        },
                        {
                            "source": "#mutect.cwl/tumor_sample_name",
                            "id": "#mutect.cwl/filter/sample_name"
                        },
                        {
                            "valueFrom": "mutect",
                            "id": "#mutect.cwl/filter/variant_caller"
                        },
                        {
                            "source": "#mutect.cwl/index/indexed_vcf",
                            "id": "#mutect.cwl/filter/vcf"
                        }
                    ],
                    "out": [
                        "#mutect.cwl/filter/unfiltered_vcf",
                        "#mutect.cwl/filter/filtered_vcf"
                    ],
                    "id": "#mutect.cwl/filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#mutect.cwl/merge/merged_vcf",
                            "id": "#mutect.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#mutect.cwl/index/indexed_vcf"
                    ],
                    "id": "#mutect.cwl/index"
                },
                {
                    "run": "#merge_vcf.cwl",
                    "in": [
                        {
                            "source": "#mutect.cwl/mutect/vcf",
                            "id": "#mutect.cwl/merge/vcfs"
                        }
                    ],
                    "out": [
                        "#mutect.cwl/merge/merged_vcf"
                    ],
                    "id": "#mutect.cwl/merge"
                },
                {
                    "scatter": "#mutect.cwl/mutect/interval_list",
                    "run": "#mutect.cwl_2",
                    "in": [
                        {
                            "source": "#mutect.cwl/split_interval_list/split_interval_lists",
                            "id": "#mutect.cwl/mutect/interval_list"
                        },
                        {
                            "source": "#mutect.cwl/normal_bam",
                            "id": "#mutect.cwl/mutect/normal_bam"
                        },
                        {
                            "source": "#mutect.cwl/reference",
                            "id": "#mutect.cwl/mutect/reference"
                        },
                        {
                            "source": "#mutect.cwl/tumor_bam",
                            "id": "#mutect.cwl/mutect/tumor_bam"
                        }
                    ],
                    "out": [
                        "#mutect.cwl/mutect/vcf"
                    ],
                    "id": "#mutect.cwl/mutect"
                },
                {
                    "run": "#split_interval_list.cwl",
                    "in": [
                        {
                            "source": "#mutect.cwl/interval_list",
                            "id": "#mutect.cwl/split_interval_list/interval_list"
                        },
                        {
                            "source": "#mutect.cwl/scatter_count",
                            "id": "#mutect.cwl/split_interval_list/scatter_count"
                        }
                    ],
                    "out": [
                        "#mutect.cwl/split_interval_list/split_interval_lists"
                    ],
                    "id": "#mutect.cwl/split_interval_list"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#mutect.cwl/filter/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#mutect.cwl/filter/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl/unfiltered_vcf"
                }
            ],
            "id": "#mutect.cwl"
        },
        {
            "class": "Workflow",
            "label": "phase VCF",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": {
                        "pattern": "${if (self.nameext === \".bam\") {return self.basename + \".bai\"} else {return self.basename + \".crai\"}}",
                        "required": null
                    },
                    "id": "#phase_vcf.cwl/bam"
                },
                {
                    "type": "File",
                    "id": "#phase_vcf.cwl/germline_vcf"
                },
                {
                    "type": "string",
                    "id": "#phase_vcf.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#phase_vcf.cwl/reference"
                },
                {
                    "type": "File",
                    "id": "#phase_vcf.cwl/reference_dict"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#phase_vcf.cwl/somatic_vcf"
                },
                {
                    "type": "string",
                    "id": "#phase_vcf.cwl/tumor_sample_name"
                }
            ],
            "steps": [
                {
                    "run": "#bgzip_and_index.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/sort/sorted_vcf",
                            "id": "#phase_vcf.cwl/bgzip_and_index/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/bgzip_and_index/indexed_vcf"
                    ],
                    "id": "#phase_vcf.cwl/bgzip_and_index"
                },
                {
                    "run": "#bgzip_and_index.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/phase_vcf/phased_vcf",
                            "id": "#phase_vcf.cwl/bgzip_and_index_phased_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/bgzip_and_index_phased_vcf/indexed_vcf"
                    ],
                    "id": "#phase_vcf.cwl/bgzip_and_index_phased_vcf"
                },
                {
                    "run": "#pvacseq_combine_variants.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/index_renamed_germline/indexed_vcf",
                            "id": "#phase_vcf.cwl/combine_variants/germline_vcf"
                        },
                        {
                            "source": "#phase_vcf.cwl/reference",
                            "id": "#phase_vcf.cwl/combine_variants/reference"
                        },
                        {
                            "source": "#phase_vcf.cwl/index_filtered_somatic/indexed_vcf",
                            "id": "#phase_vcf.cwl/combine_variants/somatic_vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/combine_variants/combined_vcf"
                    ],
                    "id": "#phase_vcf.cwl/combine_variants"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/select_somatic_tumor_sample/filtered_vcf",
                            "id": "#phase_vcf.cwl/index_filtered_somatic/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/index_filtered_somatic/indexed_vcf"
                    ],
                    "id": "#phase_vcf.cwl/index_filtered_somatic"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/rename_germline_vcf/renamed_vcf",
                            "id": "#phase_vcf.cwl/index_renamed_germline/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/index_renamed_germline/indexed_vcf"
                    ],
                    "id": "#phase_vcf.cwl/index_renamed_germline"
                },
                {
                    "run": "#read_backed_phasing.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/bam",
                            "id": "#phase_vcf.cwl/phase_vcf/bam"
                        },
                        {
                            "source": "#phase_vcf.cwl/reference",
                            "id": "#phase_vcf.cwl/phase_vcf/reference"
                        },
                        {
                            "source": "#phase_vcf.cwl/bgzip_and_index/indexed_vcf",
                            "id": "#phase_vcf.cwl/phase_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/phase_vcf/phased_vcf"
                    ],
                    "id": "#phase_vcf.cwl/phase_vcf"
                },
                {
                    "run": "#replace_vcf_sample_name.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/germline_vcf",
                            "id": "#phase_vcf.cwl/rename_germline_vcf/input_vcf"
                        },
                        {
                            "source": "#phase_vcf.cwl/tumor_sample_name",
                            "id": "#phase_vcf.cwl/rename_germline_vcf/new_sample_name"
                        },
                        {
                            "source": "#phase_vcf.cwl/normal_sample_name",
                            "id": "#phase_vcf.cwl/rename_germline_vcf/sample_to_replace"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/rename_germline_vcf/renamed_vcf"
                    ],
                    "id": "#phase_vcf.cwl/rename_germline_vcf"
                },
                {
                    "run": "#select_variants.cwl",
                    "in": [
                        {
                            "default": "somatic_tumor_only",
                            "id": "#phase_vcf.cwl/select_somatic_tumor_sample/output_vcf_basename"
                        },
                        {
                            "source": "#phase_vcf.cwl/reference",
                            "id": "#phase_vcf.cwl/select_somatic_tumor_sample/reference"
                        },
                        {
                            "source": "#phase_vcf.cwl/tumor_sample_name",
                            "valueFrom": "${ return [self]; }",
                            "id": "#phase_vcf.cwl/select_somatic_tumor_sample/samples_to_include"
                        },
                        {
                            "source": "#phase_vcf.cwl/somatic_vcf",
                            "id": "#phase_vcf.cwl/select_somatic_tumor_sample/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/select_somatic_tumor_sample/filtered_vcf"
                    ],
                    "id": "#phase_vcf.cwl/select_somatic_tumor_sample"
                },
                {
                    "run": "#sort_vcf.cwl",
                    "in": [
                        {
                            "source": "#phase_vcf.cwl/reference_dict",
                            "id": "#phase_vcf.cwl/sort/reference_dict"
                        },
                        {
                            "source": "#phase_vcf.cwl/combine_variants/combined_vcf",
                            "id": "#phase_vcf.cwl/sort/vcf"
                        }
                    ],
                    "out": [
                        "#phase_vcf.cwl/sort/sorted_vcf"
                    ],
                    "id": "#phase_vcf.cwl/sort"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#phase_vcf.cwl/bgzip_and_index_phased_vcf/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#phase_vcf.cwl/phased_vcf"
                }
            ],
            "id": "#phase_vcf.cwl"
        },
        {
            "class": "Workflow",
            "label": "pindel parallel workflow",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "int",
                    "default": 400,
                    "id": "#pindel.cwl/insert_size"
                },
                {
                    "type": "File",
                    "id": "#pindel.cwl/interval_list"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#pindel.cwl/normal_bam"
                },
                {
                    "type": "string",
                    "id": "#pindel.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#pindel.cwl/reference"
                },
                {
                    "type": "int",
                    "default": 50,
                    "id": "#pindel.cwl/scatter_count"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#pindel.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#pindel.cwl/tumor_sample_name"
                }
            ],
            "steps": [
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/somaticfilter/vcf",
                            "id": "#pindel.cwl/bgzip/file"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/bgzip/bgzipped_file"
                    ],
                    "id": "#pindel.cwl/bgzip"
                },
                {
                    "run": "#cat_all.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/pindel_cat/per_region_pindel_out",
                            "id": "#pindel.cwl/cat_all/region_pindel_outs"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/cat_all/all_region_pindel_head"
                    ],
                    "id": "#pindel.cwl/cat_all"
                },
                {
                    "run": "#fp_filter.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/tumor_bam",
                            "id": "#pindel.cwl/filter/bam"
                        },
                        {
                            "source": "#pindel.cwl/reference",
                            "id": "#pindel.cwl/filter/reference"
                        },
                        {
                            "source": "#pindel.cwl/tumor_sample_name",
                            "id": "#pindel.cwl/filter/sample_name"
                        },
                        {
                            "valueFrom": "pindel",
                            "id": "#pindel.cwl/filter/variant_caller"
                        },
                        {
                            "source": "#pindel.cwl/reindex/indexed_vcf",
                            "id": "#pindel.cwl/filter/vcf"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/filter/unfiltered_vcf",
                        "#pindel.cwl/filter/filtered_vcf"
                    ],
                    "id": "#pindel.cwl/filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/bgzip/bgzipped_file",
                            "id": "#pindel.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/index/indexed_vcf"
                    ],
                    "id": "#pindel.cwl/index"
                },
                {
                    "scatter": "#pindel.cwl/pindel_cat/region_file",
                    "run": "#pindel_cat.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/insert_size",
                            "id": "#pindel.cwl/pindel_cat/insert_size"
                        },
                        {
                            "source": "#pindel.cwl/normal_bam",
                            "id": "#pindel.cwl/pindel_cat/normal_bam"
                        },
                        {
                            "source": "#pindel.cwl/normal_sample_name",
                            "id": "#pindel.cwl/pindel_cat/normal_sample_name"
                        },
                        {
                            "source": "#pindel.cwl/reference",
                            "id": "#pindel.cwl/pindel_cat/reference"
                        },
                        {
                            "source": "#pindel.cwl/split_interval_list_to_bed/split_beds",
                            "id": "#pindel.cwl/pindel_cat/region_file"
                        },
                        {
                            "source": "#pindel.cwl/tumor_bam",
                            "id": "#pindel.cwl/pindel_cat/tumor_bam"
                        },
                        {
                            "source": "#pindel.cwl/tumor_sample_name",
                            "id": "#pindel.cwl/pindel_cat/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/pindel_cat/per_region_pindel_out"
                    ],
                    "id": "#pindel.cwl/pindel_cat"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/remove_end_tags/processed_vcf",
                            "id": "#pindel.cwl/reindex/vcf"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/reindex/indexed_vcf"
                    ],
                    "id": "#pindel.cwl/reindex"
                },
                {
                    "run": "#remove_end_tags.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/index/indexed_vcf",
                            "id": "#pindel.cwl/remove_end_tags/vcf"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/remove_end_tags/processed_vcf"
                    ],
                    "id": "#pindel.cwl/remove_end_tags"
                },
                {
                    "run": "#pindel_somatic_filter.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/cat_all/all_region_pindel_head",
                            "id": "#pindel.cwl/somaticfilter/pindel_output_summary"
                        },
                        {
                            "source": "#pindel.cwl/reference",
                            "id": "#pindel.cwl/somaticfilter/reference"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/somaticfilter/vcf"
                    ],
                    "id": "#pindel.cwl/somaticfilter"
                },
                {
                    "run": "#split_interval_list_to_bed.cwl",
                    "in": [
                        {
                            "source": "#pindel.cwl/interval_list",
                            "id": "#pindel.cwl/split_interval_list_to_bed/interval_list"
                        },
                        {
                            "source": "#pindel.cwl/scatter_count",
                            "id": "#pindel.cwl/split_interval_list_to_bed/scatter_count"
                        }
                    ],
                    "out": [
                        "#pindel.cwl/split_interval_list_to_bed/split_beds"
                    ],
                    "id": "#pindel.cwl/split_interval_list_to_bed"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#pindel.cwl/filter/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#pindel.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#pindel.cwl/filter/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#pindel.cwl/unfiltered_vcf"
                }
            ],
            "id": "#pindel.cwl"
        },
        {
            "class": "Workflow",
            "label": "Per-region pindel",
            "requirements": [
                {
                    "class": "MultipleInputFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "int",
                    "default": 400,
                    "id": "#pindel_cat.cwl/insert_size"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#pindel_cat.cwl/normal_bam"
                },
                {
                    "type": "string",
                    "id": "#pindel_cat.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#pindel_cat.cwl/reference"
                },
                {
                    "type": "File",
                    "id": "#pindel_cat.cwl/region_file"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#pindel_cat.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#pindel_cat.cwl/tumor_sample_name"
                }
            ],
            "steps": [
                {
                    "run": "#cat_out.cwl",
                    "in": [
                        {
                            "source": [
                                "#pindel_cat.cwl/pindel/deletions",
                                "#pindel_cat.cwl/pindel/insertions",
                                "#pindel_cat.cwl/pindel/tandems",
                                "#pindel_cat.cwl/pindel/long_insertions",
                                "#pindel_cat.cwl/pindel/inversions"
                            ],
                            "id": "#pindel_cat.cwl/cat/pindel_outs"
                        }
                    ],
                    "out": [
                        "#pindel_cat.cwl/cat/pindel_out"
                    ],
                    "id": "#pindel_cat.cwl/cat"
                },
                {
                    "run": "#pindel.cwl_2",
                    "in": [
                        {
                            "source": "#pindel_cat.cwl/insert_size",
                            "id": "#pindel_cat.cwl/pindel/insert_size"
                        },
                        {
                            "source": "#pindel_cat.cwl/normal_bam",
                            "id": "#pindel_cat.cwl/pindel/normal_bam"
                        },
                        {
                            "source": "#pindel_cat.cwl/normal_sample_name",
                            "id": "#pindel_cat.cwl/pindel/normal_sample_name"
                        },
                        {
                            "source": "#pindel_cat.cwl/reference",
                            "id": "#pindel_cat.cwl/pindel/reference"
                        },
                        {
                            "source": "#pindel_cat.cwl/region_file",
                            "id": "#pindel_cat.cwl/pindel/region_file"
                        },
                        {
                            "source": "#pindel_cat.cwl/tumor_bam",
                            "id": "#pindel_cat.cwl/pindel/tumor_bam"
                        },
                        {
                            "source": "#pindel_cat.cwl/tumor_sample_name",
                            "id": "#pindel_cat.cwl/pindel/tumor_sample_name"
                        }
                    ],
                    "out": [
                        "#pindel_cat.cwl/pindel/deletions",
                        "#pindel_cat.cwl/pindel/insertions",
                        "#pindel_cat.cwl/pindel/tandems",
                        "#pindel_cat.cwl/pindel/long_insertions",
                        "#pindel_cat.cwl/pindel/inversions"
                    ],
                    "id": "#pindel_cat.cwl/pindel"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#pindel_cat.cwl/cat/pindel_out",
                    "id": "#pindel_cat.cwl/per_region_pindel_out"
                }
            ],
            "id": "#pindel_cat.cwl"
        },
        {
            "class": "Workflow",
            "label": "Workflow to run pVACseq from detect_variants and rnaseq pipeline outputs",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl/additional_report_columns/sample_name"
                            ]
                        }
                    ],
                    "id": "#pvacseq.cwl/additional_report_columns"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#pvacseq.cwl/allele_specific_binding_thresholds"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#pvacseq.cwl/alleles"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/binding_threshold"
                },
                {
                    "type": "File",
                    "id": "#pvacseq.cwl/detect_variants_vcf"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#pvacseq.cwl/downstream_sequence_length"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "id": "#pvacseq.cwl/epitope_lengths_class_i"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "id": "#pvacseq.cwl/epitope_lengths_class_ii"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#pvacseq.cwl/exclude_nas"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#pvacseq.cwl/expn_val"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "kallisto",
                    "id": "#pvacseq.cwl/expression_tool"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/fasta_size"
                },
                {
                    "type": "File",
                    "id": "#pvacseq.cwl/gene_expression_file"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl/maximum_transcript_support_level/1",
                                "#pvacseq.cwl/maximum_transcript_support_level/2",
                                "#pvacseq.cwl/maximum_transcript_support_level/3",
                                "#pvacseq.cwl/maximum_transcript_support_level/4",
                                "#pvacseq.cwl/maximum_transcript_support_level/5"
                            ]
                        }
                    ],
                    "id": "#pvacseq.cwl/maximum_transcript_support_level"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#pvacseq.cwl/minimum_fold_change"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/n_threads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl/net_chop_method/cterm",
                                "#pvacseq.cwl/net_chop_method/20s"
                            ]
                        }
                    ],
                    "id": "#pvacseq.cwl/net_chop_method"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#pvacseq.cwl/net_chop_threshold"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#pvacseq.cwl/netmhc_stab"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/normal_cov"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "NORMAL",
                    "id": "#pvacseq.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#pvacseq.cwl/normal_vaf"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/peptide_sequence_length"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/percentile_threshold"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#pvacseq.cwl/phased_proximal_variants_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#pvacseq.cwl/prediction_algorithms"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/readcount_minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/readcount_minimum_mapping_quality"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#pvacseq.cwl/reference_fasta"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#pvacseq.cwl/rnaseq_bam"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#pvacseq.cwl/run_reference_proteome_similarity"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "TUMOR",
                    "id": "#pvacseq.cwl/sample_name"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/tdna_cov"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#pvacseq.cwl/tdna_vaf"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl/top_score_metric/lowest",
                                "#pvacseq.cwl/top_score_metric/median"
                            ]
                        }
                    ],
                    "id": "#pvacseq.cwl/top_score_metric"
                },
                {
                    "type": "File",
                    "id": "#pvacseq.cwl/transcript_expression_file"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#pvacseq.cwl/trna_cov"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#pvacseq.cwl/trna_vaf"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "default": [
                        "CHROM",
                        "POS",
                        "ID",
                        "REF",
                        "ALT"
                    ],
                    "id": "#pvacseq.cwl/variants_to_table_fields"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "default": [
                        "GT",
                        "AD",
                        "AF",
                        "DP",
                        "RAD",
                        "RAF",
                        "RDP",
                        "GX",
                        "TX"
                    ],
                    "id": "#pvacseq.cwl/variants_to_table_genotype_fields"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "default": [
                        "HGVSc",
                        "HGVSp"
                    ],
                    "id": "#pvacseq.cwl/vep_to_table_fields"
                }
            ],
            "steps": [
                {
                    "run": "#vcf_expression_annotator.cwl",
                    "in": [
                        {
                            "default": "gene",
                            "id": "#pvacseq.cwl/add_gene_expression_data_to_vcf/data_type"
                        },
                        {
                            "source": "#pvacseq.cwl/gene_expression_file",
                            "id": "#pvacseq.cwl/add_gene_expression_data_to_vcf/expression_file"
                        },
                        {
                            "source": "#pvacseq.cwl/expression_tool",
                            "id": "#pvacseq.cwl/add_gene_expression_data_to_vcf/expression_tool"
                        },
                        {
                            "source": "#pvacseq.cwl/sample_name",
                            "id": "#pvacseq.cwl/add_gene_expression_data_to_vcf/sample_name"
                        },
                        {
                            "source": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/annotated_bam_readcount_vcf",
                            "id": "#pvacseq.cwl/add_gene_expression_data_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/add_gene_expression_data_to_vcf/annotated_expression_vcf"
                    ],
                    "id": "#pvacseq.cwl/add_gene_expression_data_to_vcf"
                },
                {
                    "run": "#vcf_expression_annotator.cwl",
                    "in": [
                        {
                            "default": "transcript",
                            "id": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/data_type"
                        },
                        {
                            "source": "#pvacseq.cwl/transcript_expression_file",
                            "id": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/expression_file"
                        },
                        {
                            "source": "#pvacseq.cwl/expression_tool",
                            "id": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/expression_tool"
                        },
                        {
                            "source": "#pvacseq.cwl/sample_name",
                            "id": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/sample_name"
                        },
                        {
                            "source": "#pvacseq.cwl/add_gene_expression_data_to_vcf/annotated_expression_vcf",
                            "id": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/add_transcript_expression_data_to_vcf/annotated_expression_vcf"
                    ],
                    "id": "#pvacseq.cwl/add_transcript_expression_data_to_vcf"
                },
                {
                    "run": "#vcf_readcount_annotator.cwl",
                    "in": [
                        {
                            "default": "RNA",
                            "id": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/data_type"
                        },
                        {
                            "source": "#pvacseq.cwl/tumor_rna_bam_readcount/indel_bam_readcount_tsv",
                            "id": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/indel_bam_readcount_tsv"
                        },
                        {
                            "source": "#pvacseq.cwl/sample_name",
                            "id": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/sample_name"
                        },
                        {
                            "source": "#pvacseq.cwl/tumor_rna_bam_readcount/snv_bam_readcount_tsv",
                            "id": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/snv_bam_readcount_tsv"
                        },
                        {
                            "source": "#pvacseq.cwl/tumor_rna_bam_readcount/normalized_vcf",
                            "id": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf/annotated_bam_readcount_vcf"
                    ],
                    "id": "#pvacseq.cwl/add_tumor_rna_bam_readcount_to_vcf"
                },
                {
                    "run": "#add_vep_fields_to_table.cwl",
                    "in": [
                        {
                            "default": "pvacseq",
                            "id": "#pvacseq.cwl/add_vep_fields_to_table/prefix"
                        },
                        {
                            "source": "#pvacseq.cwl/variants_to_table/variants_tsv",
                            "id": "#pvacseq.cwl/add_vep_fields_to_table/tsv"
                        },
                        {
                            "source": "#pvacseq.cwl/index/indexed_vcf",
                            "id": "#pvacseq.cwl/add_vep_fields_to_table/vcf"
                        },
                        {
                            "source": "#pvacseq.cwl/vep_to_table_fields",
                            "id": "#pvacseq.cwl/add_vep_fields_to_table/vep_fields"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/add_vep_fields_to_table/annotated_variants_tsv"
                    ],
                    "id": "#pvacseq.cwl/add_vep_fields_to_table"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/annotated_expression_vcf",
                            "id": "#pvacseq.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/index/indexed_vcf"
                    ],
                    "id": "#pvacseq.cwl/index"
                },
                {
                    "run": "#pvacseq.cwl_2",
                    "in": [
                        {
                            "source": "#pvacseq.cwl/additional_report_columns",
                            "id": "#pvacseq.cwl/pvacseq/additional_report_columns"
                        },
                        {
                            "source": "#pvacseq.cwl/alleles",
                            "id": "#pvacseq.cwl/pvacseq/alleles"
                        },
                        {
                            "source": "#pvacseq.cwl/binding_threshold",
                            "id": "#pvacseq.cwl/pvacseq/binding_threshold"
                        },
                        {
                            "source": "#pvacseq.cwl/downstream_sequence_length",
                            "id": "#pvacseq.cwl/pvacseq/downstream_sequence_length"
                        },
                        {
                            "source": "#pvacseq.cwl/epitope_lengths_class_i",
                            "id": "#pvacseq.cwl/pvacseq/epitope_lengths_class_i"
                        },
                        {
                            "source": "#pvacseq.cwl/epitope_lengths_class_ii",
                            "id": "#pvacseq.cwl/pvacseq/epitope_lengths_class_ii"
                        },
                        {
                            "source": "#pvacseq.cwl/exclude_nas",
                            "id": "#pvacseq.cwl/pvacseq/exclude_nas"
                        },
                        {
                            "source": "#pvacseq.cwl/expn_val",
                            "id": "#pvacseq.cwl/pvacseq/expn_val"
                        },
                        {
                            "source": "#pvacseq.cwl/fasta_size",
                            "id": "#pvacseq.cwl/pvacseq/fasta_size"
                        },
                        {
                            "source": "#pvacseq.cwl/index/indexed_vcf",
                            "id": "#pvacseq.cwl/pvacseq/input_vcf"
                        },
                        {
                            "source": "#pvacseq.cwl/maximum_transcript_support_level",
                            "id": "#pvacseq.cwl/pvacseq/maximum_transcript_support_level"
                        },
                        {
                            "source": "#pvacseq.cwl/minimum_fold_change",
                            "id": "#pvacseq.cwl/pvacseq/minimum_fold_change"
                        },
                        {
                            "source": "#pvacseq.cwl/n_threads",
                            "id": "#pvacseq.cwl/pvacseq/n_threads"
                        },
                        {
                            "source": "#pvacseq.cwl/net_chop_method",
                            "id": "#pvacseq.cwl/pvacseq/net_chop_method"
                        },
                        {
                            "source": "#pvacseq.cwl/net_chop_threshold",
                            "id": "#pvacseq.cwl/pvacseq/net_chop_threshold"
                        },
                        {
                            "source": "#pvacseq.cwl/netmhc_stab",
                            "id": "#pvacseq.cwl/pvacseq/netmhc_stab"
                        },
                        {
                            "source": "#pvacseq.cwl/normal_cov",
                            "id": "#pvacseq.cwl/pvacseq/normal_cov"
                        },
                        {
                            "source": "#pvacseq.cwl/normal_sample_name",
                            "id": "#pvacseq.cwl/pvacseq/normal_sample_name"
                        },
                        {
                            "source": "#pvacseq.cwl/normal_vaf",
                            "id": "#pvacseq.cwl/pvacseq/normal_vaf"
                        },
                        {
                            "source": "#pvacseq.cwl/percentile_threshold",
                            "id": "#pvacseq.cwl/pvacseq/percentile_threshold"
                        },
                        {
                            "source": "#pvacseq.cwl/phased_proximal_variants_vcf",
                            "id": "#pvacseq.cwl/pvacseq/phased_proximal_variants_vcf"
                        },
                        {
                            "source": "#pvacseq.cwl/prediction_algorithms",
                            "id": "#pvacseq.cwl/pvacseq/prediction_algorithms"
                        },
                        {
                            "source": "#pvacseq.cwl/run_reference_proteome_similarity",
                            "id": "#pvacseq.cwl/pvacseq/run_reference_proteome_similarity"
                        },
                        {
                            "source": "#pvacseq.cwl/sample_name",
                            "id": "#pvacseq.cwl/pvacseq/sample_name"
                        },
                        {
                            "source": "#pvacseq.cwl/tdna_cov",
                            "id": "#pvacseq.cwl/pvacseq/tdna_cov"
                        },
                        {
                            "source": "#pvacseq.cwl/tdna_vaf",
                            "id": "#pvacseq.cwl/pvacseq/tdna_vaf"
                        },
                        {
                            "source": "#pvacseq.cwl/top_score_metric",
                            "id": "#pvacseq.cwl/pvacseq/top_score_metric"
                        },
                        {
                            "source": "#pvacseq.cwl/trna_cov",
                            "id": "#pvacseq.cwl/pvacseq/trna_cov"
                        },
                        {
                            "source": "#pvacseq.cwl/trna_vaf",
                            "id": "#pvacseq.cwl/pvacseq/trna_vaf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/pvacseq/pvacseq_predictions"
                    ],
                    "id": "#pvacseq.cwl/pvacseq"
                },
                {
                    "run": "#bam_readcount.cwl",
                    "in": [
                        {
                            "source": "#pvacseq.cwl/rnaseq_bam",
                            "id": "#pvacseq.cwl/tumor_rna_bam_readcount/bam"
                        },
                        {
                            "source": "#pvacseq.cwl/readcount_minimum_base_quality",
                            "id": "#pvacseq.cwl/tumor_rna_bam_readcount/min_base_quality"
                        },
                        {
                            "source": "#pvacseq.cwl/readcount_minimum_mapping_quality",
                            "id": "#pvacseq.cwl/tumor_rna_bam_readcount/min_mapping_quality"
                        },
                        {
                            "source": "#pvacseq.cwl/reference_fasta",
                            "id": "#pvacseq.cwl/tumor_rna_bam_readcount/reference_fasta"
                        },
                        {
                            "source": "#pvacseq.cwl/sample_name",
                            "id": "#pvacseq.cwl/tumor_rna_bam_readcount/sample"
                        },
                        {
                            "source": "#pvacseq.cwl/detect_variants_vcf",
                            "id": "#pvacseq.cwl/tumor_rna_bam_readcount/vcf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/tumor_rna_bam_readcount/snv_bam_readcount_tsv",
                        "#pvacseq.cwl/tumor_rna_bam_readcount/indel_bam_readcount_tsv",
                        "#pvacseq.cwl/tumor_rna_bam_readcount/normalized_vcf"
                    ],
                    "id": "#pvacseq.cwl/tumor_rna_bam_readcount"
                },
                {
                    "run": "#variants_to_table.cwl",
                    "in": [
                        {
                            "source": "#pvacseq.cwl/variants_to_table_fields",
                            "id": "#pvacseq.cwl/variants_to_table/fields"
                        },
                        {
                            "source": "#pvacseq.cwl/variants_to_table_genotype_fields",
                            "id": "#pvacseq.cwl/variants_to_table/genotype_fields"
                        },
                        {
                            "source": "#pvacseq.cwl/reference_fasta",
                            "id": "#pvacseq.cwl/variants_to_table/reference"
                        },
                        {
                            "source": "#pvacseq.cwl/index/indexed_vcf",
                            "id": "#pvacseq.cwl/variants_to_table/vcf"
                        }
                    ],
                    "out": [
                        "#pvacseq.cwl/variants_to_table/variants_tsv"
                    ],
                    "id": "#pvacseq.cwl/variants_to_table"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#pvacseq.cwl/add_vep_fields_to_table/annotated_variants_tsv",
                    "id": "#pvacseq.cwl/annotated_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#pvacseq.cwl/add_transcript_expression_data_to_vcf/annotated_expression_vcf",
                    "id": "#pvacseq.cwl/annotated_vcf"
                },
                {
                    "type": "Directory",
                    "outputSource": "#pvacseq.cwl/pvacseq/pvacseq_predictions",
                    "id": "#pvacseq.cwl/pvacseq_predictions"
                }
            ],
            "id": "#pvacseq.cwl"
        },
        {
            "class": "Workflow",
            "label": "Exome QC workflow",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#labelled_file.yml/labelled_file"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#qc_exome.cwl/bait_intervals"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#qc_exome.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#qc_exome.cwl/minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#qc_exome.cwl/minimum_mapping_quality"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#qc_exome.cwl/omni_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#qc_exome.cwl/per_base_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#qc_exome.cwl/per_target_intervals"
                },
                {
                    "type": "string",
                    "default": "ALL_READS",
                    "id": "#qc_exome.cwl/picard_metric_accumulation_level"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#qc_exome.cwl/reference"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#labelled_file.yml/labelled_file"
                    },
                    "id": "#qc_exome.cwl/summary_intervals"
                },
                {
                    "type": "File",
                    "id": "#qc_exome.cwl/target_intervals"
                }
            ],
            "steps": [
                {
                    "run": "#collect_alignment_summary_metrics.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/bam",
                            "id": "#qc_exome.cwl/collect_alignment_summary_metrics/bam"
                        },
                        {
                            "source": "#qc_exome.cwl/picard_metric_accumulation_level",
                            "id": "#qc_exome.cwl/collect_alignment_summary_metrics/metric_accumulation_level"
                        },
                        {
                            "source": "#qc_exome.cwl/reference",
                            "id": "#qc_exome.cwl/collect_alignment_summary_metrics/reference"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/collect_alignment_summary_metrics/alignment_summary_metrics"
                    ],
                    "id": "#qc_exome.cwl/collect_alignment_summary_metrics"
                },
                {
                    "run": "#hs_metrics.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/bam",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/bam"
                        },
                        {
                            "source": "#qc_exome.cwl/minimum_base_quality",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/minimum_base_quality"
                        },
                        {
                            "source": "#qc_exome.cwl/minimum_mapping_quality",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/minimum_mapping_quality"
                        },
                        {
                            "source": "#qc_exome.cwl/per_base_intervals",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/per_base_intervals"
                        },
                        {
                            "source": "#qc_exome.cwl/per_target_intervals",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/per_target_intervals"
                        },
                        {
                            "source": "#qc_exome.cwl/reference",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/reference"
                        },
                        {
                            "source": "#qc_exome.cwl/summary_intervals",
                            "id": "#qc_exome.cwl/collect_detailed_hs_metrics/summary_intervals"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/collect_detailed_hs_metrics/per_base_coverage_metrics",
                        "#qc_exome.cwl/collect_detailed_hs_metrics/per_base_hs_metrics",
                        "#qc_exome.cwl/collect_detailed_hs_metrics/per_target_coverage_metrics",
                        "#qc_exome.cwl/collect_detailed_hs_metrics/per_target_hs_metrics",
                        "#qc_exome.cwl/collect_detailed_hs_metrics/summary_hs_metrics"
                    ],
                    "id": "#qc_exome.cwl/collect_detailed_hs_metrics"
                },
                {
                    "run": "#collect_insert_size_metrics.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/bam",
                            "id": "#qc_exome.cwl/collect_insert_size_metrics/bam"
                        },
                        {
                            "source": "#qc_exome.cwl/picard_metric_accumulation_level",
                            "id": "#qc_exome.cwl/collect_insert_size_metrics/metric_accumulation_level"
                        },
                        {
                            "source": "#qc_exome.cwl/reference",
                            "id": "#qc_exome.cwl/collect_insert_size_metrics/reference"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/collect_insert_size_metrics/insert_size_metrics",
                        "#qc_exome.cwl/collect_insert_size_metrics/insert_size_histogram"
                    ],
                    "id": "#qc_exome.cwl/collect_insert_size_metrics"
                },
                {
                    "run": "#collect_hs_metrics.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/bait_intervals",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/bait_intervals"
                        },
                        {
                            "source": "#qc_exome.cwl/bam",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/bam"
                        },
                        {
                            "valueFrom": "ALL_READS",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/metric_accumulation_level"
                        },
                        {
                            "source": "#qc_exome.cwl/minimum_base_quality",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/minimum_base_quality"
                        },
                        {
                            "source": "#qc_exome.cwl/minimum_mapping_quality",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/minimum_mapping_quality"
                        },
                        {
                            "valueFrom": "roi",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/output_prefix"
                        },
                        {
                            "default": false,
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/per_base_coverage"
                        },
                        {
                            "default": false,
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/per_target_coverage"
                        },
                        {
                            "source": "#qc_exome.cwl/reference",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/reference"
                        },
                        {
                            "source": "#qc_exome.cwl/target_intervals",
                            "id": "#qc_exome.cwl/collect_roi_hs_metrics/target_intervals"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/collect_roi_hs_metrics/hs_metrics"
                    ],
                    "id": "#qc_exome.cwl/collect_roi_hs_metrics"
                },
                {
                    "run": "#samtools_flagstat.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/bam",
                            "id": "#qc_exome.cwl/samtools_flagstat/bam"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/samtools_flagstat/flagstats"
                    ],
                    "id": "#qc_exome.cwl/samtools_flagstat"
                },
                {
                    "run": "#select_variants.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/target_intervals",
                            "id": "#qc_exome.cwl/select_variants/interval_list"
                        },
                        {
                            "source": "#qc_exome.cwl/reference",
                            "id": "#qc_exome.cwl/select_variants/reference"
                        },
                        {
                            "source": "#qc_exome.cwl/omni_vcf",
                            "id": "#qc_exome.cwl/select_variants/vcf"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/select_variants/filtered_vcf"
                    ],
                    "id": "#qc_exome.cwl/select_variants"
                },
                {
                    "run": "#verify_bam_id.cwl",
                    "in": [
                        {
                            "source": "#qc_exome.cwl/bam",
                            "id": "#qc_exome.cwl/verify_bam_id/bam"
                        },
                        {
                            "source": "#qc_exome.cwl/select_variants/filtered_vcf",
                            "id": "#qc_exome.cwl/verify_bam_id/vcf"
                        }
                    ],
                    "out": [
                        "#qc_exome.cwl/verify_bam_id/verify_bam_id_metrics",
                        "#qc_exome.cwl/verify_bam_id/verify_bam_id_depth"
                    ],
                    "id": "#qc_exome.cwl/verify_bam_id"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/collect_alignment_summary_metrics/alignment_summary_metrics",
                    "id": "#qc_exome.cwl/alignment_summary_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/samtools_flagstat/flagstats",
                    "id": "#qc_exome.cwl/flagstats"
                },
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/collect_roi_hs_metrics/hs_metrics",
                    "id": "#qc_exome.cwl/hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/collect_insert_size_metrics/insert_size_histogram",
                    "id": "#qc_exome.cwl/insert_size_histogram"
                },
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/collect_insert_size_metrics/insert_size_metrics",
                    "id": "#qc_exome.cwl/insert_size_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#qc_exome.cwl/collect_detailed_hs_metrics/per_base_coverage_metrics",
                    "id": "#qc_exome.cwl/per_base_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#qc_exome.cwl/collect_detailed_hs_metrics/per_base_hs_metrics",
                    "id": "#qc_exome.cwl/per_base_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#qc_exome.cwl/collect_detailed_hs_metrics/per_target_coverage_metrics",
                    "id": "#qc_exome.cwl/per_target_coverage_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#qc_exome.cwl/collect_detailed_hs_metrics/per_target_hs_metrics",
                    "id": "#qc_exome.cwl/per_target_hs_metrics"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputSource": "#qc_exome.cwl/collect_detailed_hs_metrics/summary_hs_metrics",
                    "id": "#qc_exome.cwl/summary_hs_metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/verify_bam_id/verify_bam_id_depth",
                    "id": "#qc_exome.cwl/verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputSource": "#qc_exome.cwl/verify_bam_id/verify_bam_id_metrics",
                    "id": "#qc_exome.cwl/verify_bam_id_metrics"
                }
            ],
            "id": "#qc_exome.cwl"
        },
        {
            "class": "Workflow",
            "label": "adapter for sequence_align_and_tag",
            "doc": "Some workflow engines won't stage files in our nested structure, so parse it out here",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#trimming_options.yml/trimming_options"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "doc": "bwa-indexed reference file",
                    "id": "#sequence_align_and_tag_adapter.cwl/reference"
                },
                {
                    "type": [
                        "#trimming_options.yml/trimming_options",
                        "null"
                    ],
                    "id": "#sequence_align_and_tag_adapter.cwl/trimming"
                },
                {
                    "type": "#sequence_data.yml/sequence_data",
                    "doc": "the unaligned sequence data with readgroup information",
                    "id": "#sequence_align_and_tag_adapter.cwl/unaligned"
                }
            ],
            "steps": [
                {
                    "run": "#sequence_align_and_tag.cwl",
                    "in": [
                        {
                            "source": "#sequence_align_and_tag_adapter.cwl/unaligned",
                            "valueFrom": "$(self.sequence.hasOwnProperty('bam')? self.sequence.bam : null)",
                            "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag/bam"
                        },
                        {
                            "source": "#sequence_align_and_tag_adapter.cwl/unaligned",
                            "valueFrom": "$(self.sequence.hasOwnProperty('fastq1')? self.sequence.fastq1 : null)",
                            "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag/fastq1"
                        },
                        {
                            "source": "#sequence_align_and_tag_adapter.cwl/unaligned",
                            "valueFrom": "$(self.sequence.hasOwnProperty('fastq2')? self.sequence.fastq2 : null)",
                            "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag/fastq2"
                        },
                        {
                            "source": "#sequence_align_and_tag_adapter.cwl/unaligned",
                            "valueFrom": "$(self.readgroup)",
                            "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag/readgroup"
                        },
                        {
                            "source": "#sequence_align_and_tag_adapter.cwl/reference",
                            "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag/reference"
                        },
                        {
                            "source": "#sequence_align_and_tag_adapter.cwl/trimming",
                            "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag/trimming"
                        }
                    ],
                    "out": [
                        "#sequence_align_and_tag_adapter.cwl/align_and_tag/aligned_bam"
                    ],
                    "id": "#sequence_align_and_tag_adapter.cwl/align_and_tag"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#sequence_align_and_tag_adapter.cwl/align_and_tag/aligned_bam",
                    "id": "#sequence_align_and_tag_adapter.cwl/aligned_bam"
                }
            ],
            "id": "#sequence_align_and_tag_adapter.cwl"
        },
        {
            "class": "Workflow",
            "label": "Raw sequence data to BQSR",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#trimming_options.yml/trimming_options"
                        }
                    ]
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#sequence_to_bqsr.cwl/bqsr_intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.",
                    "id": "#sequence_to_bqsr.cwl/bqsr_known_sites"
                },
                {
                    "type": "string",
                    "default": "final",
                    "id": "#sequence_to_bqsr.cwl/final_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        },
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "id": "#sequence_to_bqsr.cwl/reference"
                },
                {
                    "type": [
                        "#trimming_options.yml/trimming_options",
                        "null"
                    ],
                    "id": "#sequence_to_bqsr.cwl/trimming"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#sequence_data.yml/sequence_data"
                    },
                    "id": "#sequence_to_bqsr.cwl/unaligned"
                }
            ],
            "steps": [
                {
                    "scatter": [
                        "#sequence_to_bqsr.cwl/align/unaligned"
                    ],
                    "scatterMethod": "dotproduct",
                    "run": "#sequence_align_and_tag_adapter.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/reference",
                            "id": "#sequence_to_bqsr.cwl/align/reference"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/trimming",
                            "id": "#sequence_to_bqsr.cwl/align/trimming"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/unaligned",
                            "id": "#sequence_to_bqsr.cwl/align/unaligned"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/align/aligned_bam"
                    ],
                    "id": "#sequence_to_bqsr.cwl/align"
                },
                {
                    "run": "#apply_bqsr.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/mark_duplicates_and_sort/sorted_bam",
                            "id": "#sequence_to_bqsr.cwl/apply_bqsr/bam"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/bqsr/bqsr_table",
                            "id": "#sequence_to_bqsr.cwl/apply_bqsr/bqsr_table"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/final_name",
                            "id": "#sequence_to_bqsr.cwl/apply_bqsr/output_name"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/reference",
                            "id": "#sequence_to_bqsr.cwl/apply_bqsr/reference"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/apply_bqsr/bqsr_bam"
                    ],
                    "id": "#sequence_to_bqsr.cwl/apply_bqsr"
                },
                {
                    "run": "#bqsr.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/mark_duplicates_and_sort/sorted_bam",
                            "id": "#sequence_to_bqsr.cwl/bqsr/bam"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/bqsr_intervals",
                            "id": "#sequence_to_bqsr.cwl/bqsr/intervals"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/bqsr_known_sites",
                            "id": "#sequence_to_bqsr.cwl/bqsr/known_sites"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/reference",
                            "id": "#sequence_to_bqsr.cwl/bqsr/reference"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/bqsr/bqsr_table"
                    ],
                    "id": "#sequence_to_bqsr.cwl/bqsr"
                },
                {
                    "run": "#index_bam.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/apply_bqsr/bqsr_bam",
                            "id": "#sequence_to_bqsr.cwl/index_bam/bam"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/index_bam/indexed_bam"
                    ],
                    "id": "#sequence_to_bqsr.cwl/index_bam"
                },
                {
                    "run": "#mark_duplicates_and_sort.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/name_sort/name_sorted_bam",
                            "id": "#sequence_to_bqsr.cwl/mark_duplicates_and_sort/bam"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/mark_duplicates_and_sort/sorted_bam",
                        "#sequence_to_bqsr.cwl/mark_duplicates_and_sort/metrics_file"
                    ],
                    "id": "#sequence_to_bqsr.cwl/mark_duplicates_and_sort"
                },
                {
                    "run": "#merge_bams.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/align/aligned_bam",
                            "id": "#sequence_to_bqsr.cwl/merge/bams"
                        },
                        {
                            "source": "#sequence_to_bqsr.cwl/final_name",
                            "id": "#sequence_to_bqsr.cwl/merge/name"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/merge/merged_bam"
                    ],
                    "id": "#sequence_to_bqsr.cwl/merge"
                },
                {
                    "run": "#name_sort.cwl",
                    "in": [
                        {
                            "source": "#sequence_to_bqsr.cwl/merge/merged_bam",
                            "id": "#sequence_to_bqsr.cwl/name_sort/bam"
                        }
                    ],
                    "out": [
                        "#sequence_to_bqsr.cwl/name_sort/name_sorted_bam"
                    ],
                    "id": "#sequence_to_bqsr.cwl/name_sort"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#sequence_to_bqsr.cwl/index_bam/indexed_bam",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#sequence_to_bqsr.cwl/final_bam"
                },
                {
                    "type": "File",
                    "outputSource": "#sequence_to_bqsr.cwl/mark_duplicates_and_sort/metrics_file",
                    "id": "#sequence_to_bqsr.cwl/mark_duplicates_metrics_file"
                }
            ],
            "id": "#sequence_to_bqsr.cwl"
        },
        {
            "class": "Workflow",
            "label": "strelka workflow",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#strelka_and_post_processing.cwl/cpu_reserved"
                },
                {
                    "type": "boolean",
                    "id": "#strelka_and_post_processing.cwl/exome_mode"
                },
                {
                    "type": "File",
                    "id": "#strelka_and_post_processing.cwl/interval_list"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#strelka_and_post_processing.cwl/normal_bam"
                },
                {
                    "type": "string",
                    "id": "#strelka_and_post_processing.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#strelka_and_post_processing.cwl/reference"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#strelka_and_post_processing.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#strelka_and_post_processing.cwl/tumor_sample_name"
                }
            ],
            "steps": [
                {
                    "run": "#fp_filter.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/tumor_bam",
                            "id": "#strelka_and_post_processing.cwl/filter/bam"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/reference",
                            "id": "#strelka_and_post_processing.cwl/filter/reference"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/tumor_sample_name",
                            "id": "#strelka_and_post_processing.cwl/filter/sample_name"
                        },
                        {
                            "valueFrom": "strelka",
                            "id": "#strelka_and_post_processing.cwl/filter/variant_caller"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/region_filter/filtered_vcf",
                            "id": "#strelka_and_post_processing.cwl/filter/vcf"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/filter/unfiltered_vcf",
                        "#strelka_and_post_processing.cwl/filter/filtered_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/rename_normal_sample/renamed_vcf",
                            "id": "#strelka_and_post_processing.cwl/index_full/vcf"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/index_full/indexed_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/index_full"
                },
                {
                    "run": "#merge_vcf.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/process/processed_vcf",
                            "id": "#strelka_and_post_processing.cwl/merge/vcfs"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/merge/merged_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/merge"
                },
                {
                    "scatter": "#strelka_and_post_processing.cwl/process/vcf",
                    "run": "#strelka_process_vcf.cwl",
                    "in": [
                        {
                            "source": [
                                "#strelka_and_post_processing.cwl/strelka/snvs",
                                "#strelka_and_post_processing.cwl/strelka/indels"
                            ],
                            "id": "#strelka_and_post_processing.cwl/process/vcf"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/process/processed_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/process"
                },
                {
                    "run": "#select_variants.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/interval_list",
                            "id": "#strelka_and_post_processing.cwl/region_filter/interval_list"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/reference",
                            "id": "#strelka_and_post_processing.cwl/region_filter/reference"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/index_full/indexed_vcf",
                            "id": "#strelka_and_post_processing.cwl/region_filter/vcf"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/region_filter/filtered_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/region_filter"
                },
                {
                    "run": "#replace_vcf_sample_name.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/rename_tumor_sample/renamed_vcf",
                            "id": "#strelka_and_post_processing.cwl/rename_normal_sample/input_vcf"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/normal_sample_name",
                            "id": "#strelka_and_post_processing.cwl/rename_normal_sample/new_sample_name"
                        },
                        {
                            "default": "NORMAL",
                            "id": "#strelka_and_post_processing.cwl/rename_normal_sample/sample_to_replace"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/rename_normal_sample/renamed_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/rename_normal_sample"
                },
                {
                    "run": "#replace_vcf_sample_name.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/merge/merged_vcf",
                            "id": "#strelka_and_post_processing.cwl/rename_tumor_sample/input_vcf"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/tumor_sample_name",
                            "id": "#strelka_and_post_processing.cwl/rename_tumor_sample/new_sample_name"
                        },
                        {
                            "default": "TUMOR",
                            "id": "#strelka_and_post_processing.cwl/rename_tumor_sample/sample_to_replace"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/rename_tumor_sample/renamed_vcf"
                    ],
                    "id": "#strelka_and_post_processing.cwl/rename_tumor_sample"
                },
                {
                    "run": "#strelka.cwl",
                    "in": [
                        {
                            "source": "#strelka_and_post_processing.cwl/cpu_reserved",
                            "id": "#strelka_and_post_processing.cwl/strelka/cpu_reserved"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/exome_mode",
                            "id": "#strelka_and_post_processing.cwl/strelka/exome_mode"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/normal_bam",
                            "id": "#strelka_and_post_processing.cwl/strelka/normal_bam"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/reference",
                            "id": "#strelka_and_post_processing.cwl/strelka/reference"
                        },
                        {
                            "source": "#strelka_and_post_processing.cwl/tumor_bam",
                            "id": "#strelka_and_post_processing.cwl/strelka/tumor_bam"
                        }
                    ],
                    "out": [
                        "#strelka_and_post_processing.cwl/strelka/indels",
                        "#strelka_and_post_processing.cwl/strelka/snvs"
                    ],
                    "id": "#strelka_and_post_processing.cwl/strelka"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#strelka_and_post_processing.cwl/filter/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#strelka_and_post_processing.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#strelka_and_post_processing.cwl/filter/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#strelka_and_post_processing.cwl/unfiltered_vcf"
                }
            ],
            "id": "#strelka_and_post_processing.cwl"
        },
        {
            "class": "Workflow",
            "label": "process VCF workflow",
            "inputs": [
                {
                    "type": "File",
                    "id": "#strelka_process_vcf.cwl/vcf"
                }
            ],
            "steps": [
                {
                    "run": "#add_strelka_gt.cwl",
                    "in": [
                        {
                            "source": "#strelka_process_vcf.cwl/vcf",
                            "id": "#strelka_process_vcf.cwl/add_gt/vcf"
                        }
                    ],
                    "out": [
                        "#strelka_process_vcf.cwl/add_gt/processed_vcf"
                    ],
                    "id": "#strelka_process_vcf.cwl/add_gt"
                },
                {
                    "run": "#bgzip.cwl",
                    "in": [
                        {
                            "source": "#strelka_process_vcf.cwl/add_gt/processed_vcf",
                            "id": "#strelka_process_vcf.cwl/bgzip/file"
                        }
                    ],
                    "out": [
                        "#strelka_process_vcf.cwl/bgzip/bgzipped_file"
                    ],
                    "id": "#strelka_process_vcf.cwl/bgzip"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#strelka_process_vcf.cwl/bgzip/bgzipped_file",
                            "id": "#strelka_process_vcf.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#strelka_process_vcf.cwl/index/indexed_vcf"
                    ],
                    "id": "#strelka_process_vcf.cwl/index"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#strelka_process_vcf.cwl/index/indexed_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#strelka_process_vcf.cwl/processed_vcf"
                }
            ],
            "id": "#strelka_process_vcf.cwl"
        },
        {
            "class": "Workflow",
            "label": "varscan somatic workflow",
            "inputs": [
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#varscan.cwl/max_normal_freq"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#varscan.cwl/min_coverage"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#varscan.cwl/min_var_freq"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#varscan.cwl/normal_bam"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#varscan.cwl/p_value"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#varscan.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#varscan.cwl/roi_bed"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#varscan.cwl/strand_filter"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#varscan.cwl/tumor_bam"
                }
            ],
            "steps": [
                {
                    "run": "#varscan_process_somatic.cwl",
                    "in": [
                        {
                            "source": "#varscan.cwl/max_normal_freq",
                            "id": "#varscan.cwl/process_somatic_indels/max_normal_freq"
                        },
                        {
                            "source": "#varscan.cwl/somatic/indels",
                            "id": "#varscan.cwl/process_somatic_indels/variants"
                        }
                    ],
                    "out": [
                        "#varscan.cwl/process_somatic_indels/somatic_hc",
                        "#varscan.cwl/process_somatic_indels/somatic",
                        "#varscan.cwl/process_somatic_indels/germline_hc",
                        "#varscan.cwl/process_somatic_indels/germline",
                        "#varscan.cwl/process_somatic_indels/loh_hc",
                        "#varscan.cwl/process_somatic_indels/loh"
                    ],
                    "id": "#varscan.cwl/process_somatic_indels"
                },
                {
                    "run": "#varscan_process_somatic.cwl",
                    "in": [
                        {
                            "source": "#varscan.cwl/max_normal_freq",
                            "id": "#varscan.cwl/process_somatic_snvs/max_normal_freq"
                        },
                        {
                            "source": "#varscan.cwl/somatic/snvs",
                            "id": "#varscan.cwl/process_somatic_snvs/variants"
                        }
                    ],
                    "out": [
                        "#varscan.cwl/process_somatic_snvs/somatic_hc",
                        "#varscan.cwl/process_somatic_snvs/somatic",
                        "#varscan.cwl/process_somatic_snvs/germline_hc",
                        "#varscan.cwl/process_somatic_snvs/germline",
                        "#varscan.cwl/process_somatic_snvs/loh_hc",
                        "#varscan.cwl/process_somatic_snvs/loh"
                    ],
                    "id": "#varscan.cwl/process_somatic_snvs"
                },
                {
                    "run": "#varscan_somatic.cwl",
                    "in": [
                        {
                            "source": "#varscan.cwl/min_coverage",
                            "id": "#varscan.cwl/somatic/min_coverage"
                        },
                        {
                            "source": "#varscan.cwl/min_var_freq",
                            "id": "#varscan.cwl/somatic/min_var_freq"
                        },
                        {
                            "source": "#varscan.cwl/normal_bam",
                            "id": "#varscan.cwl/somatic/normal_bam"
                        },
                        {
                            "source": "#varscan.cwl/p_value",
                            "id": "#varscan.cwl/somatic/p_value"
                        },
                        {
                            "source": "#varscan.cwl/reference",
                            "id": "#varscan.cwl/somatic/reference"
                        },
                        {
                            "source": "#varscan.cwl/roi_bed",
                            "id": "#varscan.cwl/somatic/roi_bed"
                        },
                        {
                            "source": "#varscan.cwl/strand_filter",
                            "id": "#varscan.cwl/somatic/strand_filter"
                        },
                        {
                            "source": "#varscan.cwl/tumor_bam",
                            "id": "#varscan.cwl/somatic/tumor_bam"
                        }
                    ],
                    "out": [
                        "#varscan.cwl/somatic/snvs",
                        "#varscan.cwl/somatic/indels"
                    ],
                    "id": "#varscan.cwl/somatic"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_indels/germline_hc",
                    "id": "#varscan.cwl/germline_hc_indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_snvs/germline_hc",
                    "id": "#varscan.cwl/germline_hc_snvs"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_indels/germline",
                    "id": "#varscan.cwl/germline_indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_snvs/germline",
                    "id": "#varscan.cwl/germline_snvs"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/somatic/indels",
                    "id": "#varscan.cwl/indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_indels/loh_hc",
                    "id": "#varscan.cwl/loh_hc_indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_snvs/loh_hc",
                    "id": "#varscan.cwl/loh_hc_snvs"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_indels/loh",
                    "id": "#varscan.cwl/loh_indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_snvs/loh",
                    "id": "#varscan.cwl/loh_snvs"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/somatic/snvs",
                    "id": "#varscan.cwl/snvs"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_indels/somatic_hc",
                    "id": "#varscan.cwl/somatic_hc_indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_snvs/somatic_hc",
                    "id": "#varscan.cwl/somatic_hc_snvs"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_indels/somatic",
                    "id": "#varscan.cwl/somatic_indels"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan.cwl/process_somatic_snvs/somatic",
                    "id": "#varscan.cwl/somatic_snvs"
                }
            ],
            "id": "#varscan.cwl"
        },
        {
            "class": "Workflow",
            "label": "Varscan Workflow",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#varscan_pre_and_post_processing.cwl/interval_list"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/max_normal_freq"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "id": "#varscan_pre_and_post_processing.cwl/min_coverage"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.1,
                    "id": "#varscan_pre_and_post_processing.cwl/min_var_freq"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/normal_bam"
                },
                {
                    "type": "string",
                    "id": "#varscan_pre_and_post_processing.cwl/normal_sample_name"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.99,
                    "id": "#varscan_pre_and_post_processing.cwl/p_value"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/reference"
                },
                {
                    "type": "int",
                    "default": 50,
                    "id": "#varscan_pre_and_post_processing.cwl/scatter_count"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "id": "#varscan_pre_and_post_processing.cwl/strand_filter"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        },
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/tumor_bam"
                },
                {
                    "type": "string",
                    "id": "#varscan_pre_and_post_processing.cwl/tumor_sample_name"
                }
            ],
            "steps": [
                {
                    "run": "#fp_filter.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/tumor_bam",
                            "id": "#varscan_pre_and_post_processing.cwl/filter/bam"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/min_var_freq",
                            "id": "#varscan_pre_and_post_processing.cwl/filter/min_var_freq"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "id": "#varscan_pre_and_post_processing.cwl/filter/reference"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/tumor_sample_name",
                            "id": "#varscan_pre_and_post_processing.cwl/filter/sample_name"
                        },
                        {
                            "valueFrom": "varscan",
                            "id": "#varscan_pre_and_post_processing.cwl/filter/variant_caller"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/index/indexed_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/filter/vcf"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/filter/unfiltered_vcf",
                        "#varscan_pre_and_post_processing.cwl/filter/filtered_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/filter"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/rename_normal_sample/renamed_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/index/vcf"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/index/indexed_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/index"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge_indels/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/index_merged_indels/vcf"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/index_merged_indels/indexed_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/index_merged_indels"
                },
                {
                    "run": "#index_vcf.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge_snvs/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/index_merged_snvs/vcf"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/index_merged_snvs/indexed_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/index_merged_snvs"
                },
                {
                    "scatter": "#varscan_pre_and_post_processing.cwl/intervals_to_bed/interval_list",
                    "run": "#intervals_to_bed.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/split_interval_list/split_interval_lists",
                            "id": "#varscan_pre_and_post_processing.cwl/intervals_to_bed/interval_list"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/intervals_to_bed/interval_bed"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/intervals_to_bed"
                },
                {
                    "run": "#merge_vcf.cwl",
                    "in": [
                        {
                            "source": [
                                "#varscan_pre_and_post_processing.cwl/index_merged_snvs/indexed_vcf",
                                "#varscan_pre_and_post_processing.cwl/index_merged_indels/indexed_vcf"
                            ],
                            "id": "#varscan_pre_and_post_processing.cwl/merge/vcfs"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge"
                },
                {
                    "run": "#set_filter_status.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_indels/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_indels/filtered_vcf"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_indels/reference"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_indels/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_indels/vcf"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge_indels/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge_indels"
                },
                {
                    "run": "#picard_merge_vcfs.cwl",
                    "in": [
                        {
                            "valueFrom": "somatic_hc_indels",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_indels/merged_vcf_basename"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "valueFrom": "$((self.secondaryFiles !== undefined) ? self.secondaryFiles.find(function(x) { return x.nameext === \".dict\" }) : self.replace(/.fa$/,\".dict\") )",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_indels/sequence_dictionary"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/varscan/somatic_hc_indels",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_indels/vcfs"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_indels/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_indels"
                },
                {
                    "run": "#picard_merge_vcfs.cwl",
                    "in": [
                        {
                            "valueFrom": "somatic_hc_snvs",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_snvs/merged_vcf_basename"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "valueFrom": "$((self.secondaryFiles !== undefined) ? self.secondaryFiles.find(function(x) { return x.nameext === \".dict\" }) : self.replace(/.fa$/,\".dict\") )",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_snvs/sequence_dictionary"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/varscan/somatic_hc_snvs",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_snvs/vcfs"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_snvs/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_snvs"
                },
                {
                    "run": "#picard_merge_vcfs.cwl",
                    "in": [
                        {
                            "valueFrom": "somatic_indels",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_indels/merged_vcf_basename"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "valueFrom": "$((self.secondaryFiles !== undefined) ? self.secondaryFiles.find(function(x) { return x.nameext === \".dict\" }) : self.replace(/.fa$/,\".dict\") )",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_indels/sequence_dictionary"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/varscan/somatic_indels",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_indels/vcfs"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_indels/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_indels"
                },
                {
                    "run": "#picard_merge_vcfs.cwl",
                    "in": [
                        {
                            "valueFrom": "somatic_snvs",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_snvs/merged_vcf_basename"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "valueFrom": "$( (self.secondaryFiles !== undefined) ? self.secondaryFiles.find(function(x) { return x.nameext === \".dict\" }) : self.replace(/.fa$/,\".dict\") )",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_snvs/sequence_dictionary"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/varscan/somatic_snvs",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_snvs/vcfs"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_snvs/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_snvs"
                },
                {
                    "run": "#set_filter_status.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_hc_snvs/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_snvs/filtered_vcf"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_snvs/reference"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge_scattered_somatic_snvs/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/merge_snvs/vcf"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/merge_snvs/merged_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/merge_snvs"
                },
                {
                    "run": "#replace_vcf_sample_name.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/rename_tumor_sample/renamed_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/rename_normal_sample/input_vcf"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/normal_sample_name",
                            "id": "#varscan_pre_and_post_processing.cwl/rename_normal_sample/new_sample_name"
                        },
                        {
                            "default": "NORMAL",
                            "id": "#varscan_pre_and_post_processing.cwl/rename_normal_sample/sample_to_replace"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/rename_normal_sample/renamed_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/rename_normal_sample"
                },
                {
                    "run": "#replace_vcf_sample_name.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/merge/merged_vcf",
                            "id": "#varscan_pre_and_post_processing.cwl/rename_tumor_sample/input_vcf"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/tumor_sample_name",
                            "id": "#varscan_pre_and_post_processing.cwl/rename_tumor_sample/new_sample_name"
                        },
                        {
                            "default": "TUMOR",
                            "id": "#varscan_pre_and_post_processing.cwl/rename_tumor_sample/sample_to_replace"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/rename_tumor_sample/renamed_vcf"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/rename_tumor_sample"
                },
                {
                    "run": "#split_interval_list.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/interval_list",
                            "id": "#varscan_pre_and_post_processing.cwl/split_interval_list/interval_list"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/scatter_count",
                            "id": "#varscan_pre_and_post_processing.cwl/split_interval_list/scatter_count"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/split_interval_list/split_interval_lists"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/split_interval_list"
                },
                {
                    "scatter": "#varscan_pre_and_post_processing.cwl/varscan/roi_bed",
                    "run": "#varscan.cwl",
                    "in": [
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/max_normal_freq",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/max_normal_freq"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/min_coverage",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/min_coverage"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/min_var_freq",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/min_var_freq"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/normal_bam",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/normal_bam"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/p_value",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/p_value"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/reference",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/reference"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/intervals_to_bed/interval_bed",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/roi_bed"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/strand_filter",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/strand_filter"
                        },
                        {
                            "source": "#varscan_pre_and_post_processing.cwl/tumor_bam",
                            "id": "#varscan_pre_and_post_processing.cwl/varscan/tumor_bam"
                        }
                    ],
                    "out": [
                        "#varscan_pre_and_post_processing.cwl/varscan/somatic_snvs",
                        "#varscan_pre_and_post_processing.cwl/varscan/somatic_indels",
                        "#varscan_pre_and_post_processing.cwl/varscan/somatic_hc_snvs",
                        "#varscan_pre_and_post_processing.cwl/varscan/somatic_hc_indels"
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/varscan"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#varscan_pre_and_post_processing.cwl/filter/filtered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/filtered_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#varscan_pre_and_post_processing.cwl/filter/unfiltered_vcf",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#varscan_pre_and_post_processing.cwl/unfiltered_vcf"
                }
            ],
            "id": "#varscan_pre_and_post_processing.cwl"
        },
        {
            "class": "Workflow",
            "label": "Add snv and indel bam-readcount files to a vcf",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        {
                            "type": "enum",
                            "symbols": [
                                "#vcf_readcount_annotator.cwl/data_type/DNA",
                                "#vcf_readcount_annotator.cwl/data_type/RNA"
                            ]
                        }
                    ],
                    "id": "#vcf_readcount_annotator.cwl/data_type"
                },
                {
                    "type": "File",
                    "id": "#vcf_readcount_annotator.cwl/indel_bam_readcount_tsv"
                },
                {
                    "type": "string",
                    "id": "#vcf_readcount_annotator.cwl/sample_name"
                },
                {
                    "type": "File",
                    "id": "#vcf_readcount_annotator.cwl/snv_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#vcf_readcount_annotator.cwl/vcf"
                }
            ],
            "steps": [
                {
                    "run": "#vcf_readcount_annotator.cwl_2",
                    "in": [
                        {
                            "source": "#vcf_readcount_annotator.cwl/indel_bam_readcount_tsv",
                            "id": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/bam_readcount_tsv"
                        },
                        {
                            "source": "#vcf_readcount_annotator.cwl/data_type",
                            "id": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/data_type"
                        },
                        {
                            "source": "#vcf_readcount_annotator.cwl/sample_name",
                            "id": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/sample_name"
                        },
                        {
                            "default": "indel",
                            "id": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/variant_type"
                        },
                        {
                            "source": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/annotated_bam_readcount_vcf",
                            "id": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/annotated_bam_readcount_vcf"
                    ],
                    "id": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf"
                },
                {
                    "run": "#vcf_readcount_annotator.cwl_2",
                    "in": [
                        {
                            "source": "#vcf_readcount_annotator.cwl/snv_bam_readcount_tsv",
                            "id": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/bam_readcount_tsv"
                        },
                        {
                            "source": "#vcf_readcount_annotator.cwl/data_type",
                            "id": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/data_type"
                        },
                        {
                            "source": "#vcf_readcount_annotator.cwl/sample_name",
                            "id": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/sample_name"
                        },
                        {
                            "default": "snv",
                            "id": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/variant_type"
                        },
                        {
                            "source": "#vcf_readcount_annotator.cwl/vcf",
                            "id": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/vcf"
                        }
                    ],
                    "out": [
                        "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf/annotated_bam_readcount_vcf"
                    ],
                    "id": "#vcf_readcount_annotator.cwl/add_snv_bam_readcount_to_vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#vcf_readcount_annotator.cwl/add_indel_bam_readcount_to_vcf/annotated_bam_readcount_vcf",
                    "id": "#vcf_readcount_annotator.cwl/annotated_bam_readcount_vcf"
                }
            ],
            "id": "#vcf_readcount_annotator.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "add GT tags",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:bionic"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "add_strelka_gt.pl",
                            "entry": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse feature qw(say);\n\ndie(\"wrong number of arguments\") unless scalar(@ARGV) == 2;\nmy ($strelka_vcf, $outdir) = @ARGV;\n\nopen(my $strelka_vcf_fh, '-|', '/bin/gunzip', '-c', $strelka_vcf) \n    or die(\"couldn't open $strelka_vcf to read\");\nopen(my $add_gt_fh, \">\", \"$outdir/add_gt.vcf\") \n    or die(\"couldn't open add_gt.vcf for write\");\n\nwhile (<$strelka_vcf_fh>) {\n    chomp;\n    if (/^##/) {\n        say $add_gt_fh $_;\n    }\n    elsif (/^#/) { #COLUMN HEADER\n        say $add_gt_fh '##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">';\n        say $add_gt_fh $_;\n    }\n    else {\n        my @columns = split /\\t/, $_;\n        my ($ref, $alt, $info) = map{$columns[$_]}(3, 4, 7);\n        my @alts = split /,/, $alt;\n\n        my ($n_gt, $t_gt);\n\n        if (length($ref) == 1 and length($alts[0]) == 1) {\n            my ($n_gt_info, $n_gt_str, $t_gt_str) = $info =~ /NT=(\\S+?);QSS.*SGT=(\\S+?)\\->(\\S+?);/;\n            unshift @alts, $ref;\n\n            my %ids;\n            my $id = 0;\n\n            for my $base (@alts) {\n                $ids{$base} = $id;\n                $id++;\n            }\n\n            $n_gt = $n_gt_info eq 'ref' ? '0/0' : parse_gt($n_gt_str, \\%ids);\n            $t_gt = parse_gt($t_gt_str, \\%ids);\n        }\n        else {#INDEL\n            my ($n_gt_info, $t_gt_info) = $info =~ /;NT=(\\S+?);.*SGT.*\\->(\\S+?);/;\n\n            my %gt_info = (\n                ref => '0/0',\n                het => '0/1',\n                hom => '1/1',\n                conflict => './.',\n            );\n\n            $n_gt = $gt_info{$n_gt_info};\n            $t_gt = $gt_info{$t_gt_info};\n        }\n\n        $columns[8]  = 'GT:'.$columns[8];\n        $columns[9]  = $n_gt . ':' . $columns[9];\n        $columns[10] = $t_gt . ':' . $columns[10];\n\n        my $new_str = join \"\\t\", @columns;\n        say $add_gt_fh $new_str;\n    }\n}\n\nclose($strelka_vcf_fh);\nclose($add_gt_fh);\n\n\nsub parse_gt {\n    my ($gt_str, $ids) = @_;\n    my @gt_ids = map{$ids->{$_}}(split //, $gt_str);\n    return join '/', sort @gt_ids;\n}\n\n#SNV example\n#1       10231   .       C       A       .       QSS_ref NT=ref;QSS=1;QSS_NT=1;SGT=AC->AC;SOMATIC;TQSS=2;TQSS_NT=2       DP:FDP:SDP:SUBDP:AU:CU:GU:TU    32:4:8:0:0,3:28,60:0,0:0,1      84:6:69:0:7,21:71,192:0,0:0,1\n#INDEL example\n##1     965051  .       ATGTGTG A       .       QSI_ref IC=5;IHP=2;NT=ref;QSI=1;QSI_NT=1;RC=8;RU=TG;SGT=het->het;SOMATIC;TQSI=1;TQSI_NT=1       DP:DP2:TAR:TIR:TOR:DP50:FDP50:SUBDP50   8:8:6,6:0,0:2,4:10.3:0.00:0.00  18:18:8,8:5,6:5,8:21:0.25:0.00\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#add_strelka_gt.cwl/vcf"
                }
            ],
            "arguments": [
                "/usr/bin/perl",
                "add_strelka_gt.pl",
                "$(inputs.vcf.path)",
                "$(runtime.outdir)"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "add_gt.vcf"
                    },
                    "id": "#add_strelka_gt.cwl/processed_vcf"
                }
            ],
            "id": "#add_strelka_gt.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "add VEP annotation to report",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "griffithlab/vatools:4.1.0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "variants",
                    "id": "#add_vep_fields_to_table.cwl/prefix"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "-t"
                    },
                    "id": "#add_vep_fields_to_table.cwl/tsv"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#add_vep_fields_to_table.cwl/vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "default": [
                        "Consequence",
                        "SYMBOL",
                        "Feature",
                        "HGVSc",
                        "HGVSp"
                    ],
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#add_vep_fields_to_table.cwl/vep_fields"
                }
            ],
            "baseCommand": [
                "vep-annotation-reporter"
            ],
            "arguments": [
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.prefix).annotated.tsv"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.prefix).annotated.tsv"
                    },
                    "id": "#add_vep_fields_to_table.cwl/annotated_variants_tsv"
                }
            ],
            "id": "#add_vep_fields_to_table.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "apply BQSR",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-I",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#apply_bqsr.cwl/bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-bqsr",
                        "position": 3
                    },
                    "id": "#apply_bqsr.cwl/bqsr_table"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "final",
                    "id": "#apply_bqsr.cwl/output_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#apply_bqsr.cwl/reference"
                }
            ],
            "baseCommand": [
                "/gatk/gatk",
                "--java-options",
                "-Xmx16g",
                "ApplyBQSR"
            ],
            "arguments": [
                "-O",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.output_name).bam"
                },
                "--static-quantized-quals",
                "10",
                "--static-quantized-quals",
                "20",
                "--static-quantized-quals",
                "30"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_name).bam"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#apply_bqsr.cwl/bqsr_bam"
                }
            ],
            "id": "#apply_bqsr.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "run bam-readcount",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bam_readcount_helper-cwl:1.1.1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "bam_readcount_helper.py",
                            "entry": "#!/usr/bin/env python\n\nimport sys\nimport os\nfrom cyvcf2 import VCF\nimport tempfile\nimport csv\nfrom subprocess import Popen, PIPE\n\ndef generate_region_list(hash):\n    fh = tempfile.NamedTemporaryFile('w', delete=False)\n    writer = csv.writer(fh, delimiter='\\t')\n    for chr, positions in hash.items():\n        for pos in sorted(positions.keys()):\n            writer.writerow([chr, pos, pos])\n    fh.close()\n    return fh.name\n\ndef filter_sites_in_hash(region_list, bam_file, ref_fasta, prefixed_sample, output_dir, insertion_centric, map_qual, base_qual):\n    bam_readcount_cmd = ['/usr/bin/bam-readcount', '-f', ref_fasta, '-l', region_list, '-w', '0', '-b', str(base_qual), '-q', str(map_qual)]\n    if insertion_centric:\n        bam_readcount_cmd.append('-i')\n        output_file = os.path.join(output_dir, prefixed_sample + '_bam_readcount_indel.tsv')\n    else:\n        output_file = os.path.join(output_dir, prefixed_sample + '_bam_readcount_snv.tsv')\n    bam_readcount_cmd.append(bam_file)\n    execution = Popen(bam_readcount_cmd, stdout=PIPE, stderr=PIPE)\n    stdout, stderr = execution.communicate()\n    if execution.returncode == 0:\n        with open(output_file, 'wb') as output_fh:\n            output_fh.write(stdout)\n    else:\n        sys.exit(stderr)\n\n#initializing these with default values\nmin_base_qual = 20\nmin_mapping_qual = 0\n\nif len(sys.argv) == 7:\n    (script_name, vcf_filename, sample, ref_fasta, bam_file, prefix, output_dir)= sys.argv\nelif len(sys.argv) == 8:\n    (script_name, vcf_filename, sample, ref_fasta, bam_file, prefix, output_dir, min_base_qual)= sys.argv\nelif len(sys.argv) == 9: #elif instead of else for explicit safety\n    (script_name, vcf_filename, sample, ref_fasta, bam_file, prefix, output_dir, min_base_qual, min_mapping_qual)= sys.argv\n\nif prefix == 'NOPREFIX':\n    prefixed_sample = sample\nelse:\n    prefixed_sample = '_'.join([prefix, sample])\n\nvcf_file = VCF(vcf_filename)\nsample_index = vcf_file.samples.index(sample)\n\nrc_for_indel = {}\nrc_for_snp   = {}\nfor variant in vcf_file:\n    ref = variant.REF\n    chr = variant.CHROM\n    start = variant.start\n    end = variant.end\n    pos = variant.POS\n    for var in  variant.ALT:\n        if len(ref) > 1 or len(var) > 1:\n            #it's an indel or mnp\n            if len(ref) == len(var) or (len(ref) > 1 and len(var) > 1):\n                sys.stderr.write(\"Complex variant or MNP will be skipped: %s\\t%s\\t%s\\t%s\\n\" % (chr, pos, ref , var))\n                continue\n            elif len(ref) > len(var):\n                #it's a deletion\n                pos += 1\n                unmodified_ref = ref\n                ref = unmodified_ref[1]\n                var = \"-%s\" % unmodified_ref[1:]\n            else:\n                #it's an insertion\n                var = \"+%s\" % var[1:]\n            if chr not in rc_for_indel:\n                rc_for_indel[chr] = {}\n            if pos not in rc_for_indel[chr]:\n                rc_for_indel[chr][pos] = {}\n            if ref not in rc_for_indel[chr][pos]:\n                rc_for_indel[chr][pos][ref] = {}\n            rc_for_indel[chr][pos][ref] = variant\n        else:\n            #it's a SNP\n            if chr not in rc_for_snp:\n                rc_for_snp[chr] = {}\n            if pos not in rc_for_snp[chr]:\n                rc_for_snp[chr][pos] = {}\n            if ref not in rc_for_snp[chr][pos]:\n                rc_for_snp[chr][pos][ref] = {}\n            rc_for_snp[chr][pos][ref] = variant\n\nif len(rc_for_snp.keys()) > 0:\n    region_file = generate_region_list(rc_for_snp)\n    filter_sites_in_hash(region_file, bam_file, ref_fasta, prefixed_sample, output_dir, False, min_mapping_qual, min_base_qual)\nelse:\n    output_file = os.path.join(output_dir, prefixed_sample + '_bam_readcount_snv.tsv')\n    open(output_file, 'w').close()\n\nif len(rc_for_indel.keys()) > 0:\n    region_file = generate_region_list(rc_for_indel)\n    filter_sites_in_hash(region_file, bam_file, ref_fasta, prefixed_sample, output_dir, True, min_mapping_qual, min_base_qual)\nelse:\n    output_file = os.path.join(output_dir, prefixed_sample + '_bam_readcount_indel.tsv')\n    open(output_file, 'w').close()\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -5
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#bam_readcount.cwl_2/bam"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 20,
                    "inputBinding": {
                        "position": -2
                    },
                    "id": "#bam_readcount.cwl_2/min_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "inputBinding": {
                        "position": -1
                    },
                    "id": "#bam_readcount.cwl_2/min_mapping_quality"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "NOPREFIX",
                    "inputBinding": {
                        "position": -4
                    },
                    "id": "#bam_readcount.cwl_2/prefix"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": -6
                    },
                    "id": "#bam_readcount.cwl_2/reference_fasta"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": -7
                    },
                    "id": "#bam_readcount.cwl_2/sample"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -8
                    },
                    "id": "#bam_readcount.cwl_2/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/python",
                "bam_readcount_helper.py"
            ],
            "arguments": [
                {
                    "valueFrom": "$(runtime.outdir)",
                    "position": -3
                }
            ],
            "stdout": "$(inputs.sample)_bam_readcount.tsv",
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "${\n    var name = \"_bam_readcount_indel.tsv\";\n    if (inputs.prefix.equals(\"NOPREFIX\")) {\n        name = inputs.sample + name;\n    }\n    else {\n        name = inputs.prefix + \"_\" + inputs.sample + name;\n    }\n    return name;\n}\n"
                    },
                    "id": "#bam_readcount.cwl_2/indel_bam_readcount_tsv"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "${\n    var name = \"_bam_readcount_snv.tsv\";\n    if (inputs.prefix.equals(\"NOPREFIX\")) {\n        name = inputs.sample + name;\n    }\n    else {\n        name = inputs.prefix + \"_\" + inputs.sample + name;\n    }\n    return name;\n}\n"
                    },
                    "id": "#bam_readcount.cwl_2/snv_bam_readcount_tsv"
                }
            ],
            "id": "#bam_readcount.cwl_2"
        },
        {
            "class": "CommandLineTool",
            "label": "cgpBigWig Converting BAM to BigWig",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/cgpbigwig:1.4.0--h93d22ca_0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 32000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-i"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#bam_to_bigwig.cwl/bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "-r"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#bam_to_bigwig.cwl/reference"
                }
            ],
            "baseCommand": [
                "bam2bw",
                "-a",
                "-F",
                "1024"
            ],
            "arguments": [
                "-o",
                {
                    "valueFrom": "$(inputs.bam.nameroot).bw"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).bw"
                    },
                    "id": "#bam_to_bigwig.cwl/outfile"
                }
            ],
            "id": "#bam_to_bigwig.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "BAM to CRAM conversion",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#bam_to_cram.cwl/bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-T",
                        "position": 1
                    },
                    "id": "#bam_to_cram.cwl/reference"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/samtools",
                "view",
                "-C"
            ],
            "stdout": "$(inputs.bam.nameroot).cram",
            "outputs": [
                {
                    "type": "File",
                    "id": "#bam_to_cram.cwl/cram",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).cram"
                    }
                }
            ],
            "id": "#bam_to_cram.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Picard: BAM to FASTQ",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "ramMin": 6000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/rnaseq:1.0.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "I=",
                        "separate": false,
                        "position": 1
                    },
                    "id": "#bam_to_fastq.cwl/bam"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx4g",
                "-jar",
                "/opt/picard/picard.jar",
                "SamToFastq",
                "VALIDATION_STRINGENCY=SILENT"
            ],
            "arguments": [
                {
                    "valueFrom": "F=$(runtime.outdir)/read1.fastq"
                },
                {
                    "valueFrom": "F2=$(runtime.outdir)/read2.fastq"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "read1.fastq"
                    },
                    "id": "#bam_to_fastq.cwl/fastq1"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "read2.fastq"
                    },
                    "id": "#bam_to_fastq.cwl/fastq2"
                }
            ],
            "id": "#bam_to_fastq.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "bgzip VCF",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#bgzip.cwl/file"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/bgzip"
            ],
            "arguments": [
                "-c"
            ],
            "stdout": "$(inputs.file.basename).gz",
            "outputs": [
                {
                    "type": "File",
                    "id": "#bgzip.cwl/bgzipped_file",
                    "outputBinding": {
                        "glob": "$(inputs.file.basename).gz"
                    }
                }
            ],
            "id": "#bgzip.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "create BQSR table",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-I",
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#bqsr.cwl/bam"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "-L"
                        }
                    },
                    "inputBinding": {
                        "position": 1
                    },
                    "default": [
                        "chr1",
                        "chr2",
                        "chr3",
                        "chr4",
                        "chr5",
                        "chr6",
                        "chr7",
                        "chr8",
                        "chr9",
                        "chr10",
                        "chr11",
                        "chr12",
                        "chr13",
                        "chr14",
                        "chr15",
                        "chr16",
                        "chr17",
                        "chr18",
                        "chr19",
                        "chr20",
                        "chr21",
                        "chr22"
                    ],
                    "id": "#bqsr.cwl/intervals"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File",
                        "inputBinding": {
                            "prefix": "--known-sites",
                            "position": 4
                        }
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#bqsr.cwl/known_sites"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 2
                    },
                    "id": "#bqsr.cwl/reference"
                }
            ],
            "baseCommand": [
                "/gatk/gatk",
                "--java-options",
                "-Xmx16g",
                "BaseRecalibrator"
            ],
            "arguments": [
                "-O",
                {
                    "valueFrom": "$(runtime.outdir)/bqsr.table"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "bqsr.table"
                    },
                    "id": "#bqsr.cwl/bqsr_table"
                }
            ],
            "id": "#bqsr.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:xenial"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "inputBinding": {
                        "position": -1
                    },
                    "id": "#cat_all.cwl/region_pindel_outs"
                }
            ],
            "baseCommand": [
                "/bin/cat"
            ],
            "arguments": [
                {
                    "shellQuote": false,
                    "valueFrom": "|"
                },
                "/bin/grep",
                "ChrID",
                "/dev/stdin"
            ],
            "stdout": "all_region_pindel.head",
            "outputs": [
                {
                    "type": "File",
                    "id": "#cat_all.cwl/all_region_pindel_head",
                    "outputBinding": {
                        "glob": "all_region_pindel.head"
                    }
                }
            ],
            "id": "#cat_all.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:xenial"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#cat_out.cwl/pindel_outs"
                }
            ],
            "baseCommand": [
                "/bin/cat"
            ],
            "stdout": "per_chromosome_pindel.out",
            "outputs": [
                {
                    "type": "File",
                    "id": "#cat_out.cwl/pindel_out",
                    "outputBinding": {
                        "glob": "per_chromosome_pindel.out"
                    }
                }
            ],
            "id": "#cat_out.cwl"
        },
        {
            "class": "CommandLineTool",
            "doc": "Note: cnvkit batch is a complex command that is capable of running all or part of the cnvkit internal\npipeline, depending on the combination of inputs provided to it. In order to take advantage of this,\nmost inputs to this cwl are optional, so that different workflows can use different forms of the\ncommand while still using a single cwl file. For further reading, see the relevant cnvkit docs at\nhttps://cnvkit.readthedocs.io/en/stable/quickstart.html#build-a-reference-from-normal-samples-and-infer-tumor-copy-ratios\nhttps://cnvkit.readthedocs.io/en/stable/pipeline.html#batch\nIn our pipelines, the command form is mainly determined by the components of the reference input. The\nsomatic_exome cwl pipeline provides a fasta file and a normal bam, which causes the batch pipeline to\nconstruct a copy number reference (.cnn file) based on the normal bam. The germline_wgs cwl pipeline\ndoes not provide a normal bam; instead it passes a cnn reference file as an optional input. This file\nis intended to be manually generated from a reference normal sample for use in the pipeline. If it is\nnot provided, cnvkit will automatically generate a flat reference file.\n",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "etal/cnvkit:0.9.8"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "ramMin": 4000,
                    "tmpdirMin": 10000
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 4,
                        "prefix": "--access"
                    },
                    "doc": "Regions of accessible sequence on chromosomes (.bed), as output by the 'access' command",
                    "id": "#cnvkit_batch.cwl/access"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--targets"
                    },
                    "id": "#cnvkit_batch.cwl/bait_intervals"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 6,
                        "prefix": "--diagram"
                    },
                    "doc": "Create an ideogram of copy ratios on chromosomes as a PDF",
                    "id": "#cnvkit_batch.cwl/diagram"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 8,
                        "prefix": "--drop-low-coverage"
                    },
                    "doc": "Drop very-low-coverage bins before segmentation to avoid false-positive deletions in poor-quality tumor samples",
                    "id": "#cnvkit_batch.cwl/drop_low_coverage"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 9,
                        "prefix": "--male-reference"
                    },
                    "doc": "Use or assume a male reference (i.e. female samples will have +1 log-CNR of chrX; otherwise male samples would have -1 chrX)",
                    "id": "#cnvkit_batch.cwl/male_reference"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#cnvkit_batch.cwl/method/hybrid",
                                "#cnvkit_batch.cwl/method/amplicon",
                                "#cnvkit_batch.cwl/method/wgs"
                            ]
                        }
                    ],
                    "default": "hybrid",
                    "inputBinding": {
                        "position": 5,
                        "prefix": "--method"
                    },
                    "doc": "Sequencing protocol used for input data",
                    "id": "#cnvkit_batch.cwl/method"
                },
                {
                    "type": [
                        {
                            "type": "record",
                            "name": "#cnvkit_batch.cwl/reference/cnn_file",
                            "fields": [
                                {
                                    "type": "File",
                                    "inputBinding": {
                                        "position": 2,
                                        "prefix": "--reference"
                                    },
                                    "doc": "Previously generated reference.cnn file",
                                    "name": "#cnvkit_batch.cwl/reference/cnn_file/cnn_file"
                                }
                            ]
                        },
                        {
                            "type": "record",
                            "name": "#cnvkit_batch.cwl/reference/fasta_file",
                            "fields": [
                                {
                                    "type": [
                                        "string",
                                        "File"
                                    ],
                                    "inputBinding": {
                                        "position": 2,
                                        "prefix": "--fasta"
                                    },
                                    "name": "#cnvkit_batch.cwl/reference/fasta_file/fasta_file"
                                },
                                {
                                    "type": [
                                        "null",
                                        "File"
                                    ],
                                    "inputBinding": {
                                        "position": 1
                                    },
                                    "doc": "Normal samples (.bam) used to construct the pooled, paired, or flat reference. If this option is used but no filenames are given, a 'flat' reference will be built. Otherwise, all filenames following this option will be used.",
                                    "name": "#cnvkit_batch.cwl/reference/fasta_file/normal_bam"
                                }
                            ]
                        }
                    ],
                    "id": "#cnvkit_batch.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 7,
                        "prefix": "--scatter"
                    },
                    "doc": "Create a whole-genome copy ratio profile as a PDF scatter plot",
                    "id": "#cnvkit_batch.cwl/scatter_plot"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 10,
                        "prefix": "--target-avg-size"
                    },
                    "doc": "Average size of split target bins (results are approximate)",
                    "id": "#cnvkit_batch.cwl/target_average_size"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -1
                    },
                    "id": "#cnvkit_batch.cwl/tumor_bam"
                }
            ],
            "baseCommand": [
                "/usr/bin/python3",
                "/usr/local/bin/cnvkit.py",
                "batch"
            ],
            "arguments": [
                {
                    "valueFrom": "$((inputs.reference.hasOwnProperty('cnn_file'))? null : '--normal')"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.tumor_bam.nameroot)-diagram.pdf"
                    },
                    "id": "#cnvkit_batch.cwl/cn_diagram"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.tumor_bam.nameroot)-scatter.pdf"
                    },
                    "id": "#cnvkit_batch.cwl/cn_scatter_plot"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${  \n    var glob_base = \".antitarget.bed\";\n    if (inputs.bait_intervals) {\n        glob_base = inputs.bait_intervals.nameroot + glob_base;\n    }   \n    return glob_base;\n}  \n"
                    },
                    "id": "#cnvkit_batch.cwl/intervals_antitarget"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${\n    var glob_base = \".target.bed\";\n    if (inputs.bait_intervals) {\n        glob_base = inputs.bait_intervals.nameroot + glob_base;\n    }\n    return glob_base;\n}\n"
                    },
                    "id": "#cnvkit_batch.cwl/intervals_target"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${\n    var glob_base = \".antitargetcoverage.cnn\";\n    if (inputs.normal_bam) {\n        glob_base = inputs.normal_bam.nameroot + glob_base;\n    }\n    return glob_base;\n}\n"
                    },
                    "id": "#cnvkit_batch.cwl/normal_antitarget_coverage"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${\n    var glob_base = \".targetcoverage.cnn\";\n    if (inputs.normal_bam) {\n        glob_base = inputs.normal_bam.nameroot + glob_base;\n    }\n    return glob_base;\n}\n"
                    },
                    "id": "#cnvkit_batch.cwl/normal_target_coverage"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "reference.cnn"
                    },
                    "id": "#cnvkit_batch.cwl/reference_coverage"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.tumor_bam.nameroot).antitargetcoverage.cnn"
                    },
                    "id": "#cnvkit_batch.cwl/tumor_antitarget_coverage"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.tumor_bam.nameroot).cnr"
                    },
                    "id": "#cnvkit_batch.cwl/tumor_bin_level_ratios"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.tumor_bam.nameroot).cns"
                    },
                    "id": "#cnvkit_batch.cwl/tumor_segmented_ratios"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.tumor_bam.nameroot).targetcoverage.cnn"
                    },
                    "id": "#cnvkit_batch.cwl/tumor_target_coverage"
                }
            ],
            "id": "#cnvkit_batch.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "collect alignment summary metrics",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/picard:2.23.6"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT="
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#collect_alignment_summary_metrics.cwl/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "METRIC_ACCUMULATION_LEVEL="
                    },
                    "id": "#collect_alignment_summary_metrics.cwl/metric_accumulation_level"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "REFERENCE_SEQUENCE="
                    },
                    "id": "#collect_alignment_summary_metrics.cwl/reference"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx16g",
                "-jar",
                "/usr/picard/picard.jar",
                "CollectAlignmentSummaryMetrics"
            ],
            "arguments": [
                "OUTPUT=",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.bam.nameroot).AlignmentSummaryMetrics.txt"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).AlignmentSummaryMetrics.txt"
                    },
                    "id": "#collect_alignment_summary_metrics.cwl/alignment_summary_metrics"
                }
            ],
            "id": "#collect_alignment_summary_metrics.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "collect HS metrics",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 52000
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/picard:2.23.6"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "BAIT_INTERVALS="
                    },
                    "id": "#collect_hs_metrics.cwl/bait_intervals"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "I="
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#collect_hs_metrics.cwl/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "METRIC_ACCUMULATION_LEVEL="
                    },
                    "id": "#collect_hs_metrics.cwl/metric_accumulation_level"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "inputBinding": {
                        "prefix": "MINIMUM_BASE_QUALITY="
                    },
                    "id": "#collect_hs_metrics.cwl/minimum_base_quality"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "inputBinding": {
                        "prefix": "MINIMUM_MAPPING_QUALITY="
                    },
                    "id": "#collect_hs_metrics.cwl/minimum_mapping_quality"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "out",
                    "id": "#collect_hs_metrics.cwl/output_prefix"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "PER_BASE_COVERAGE=",
                        "valueFrom": "${\n    if(self) {\n        return inputs.bam.nameroot + \".\" + inputs.output_prefix + \"-PerBaseCoverage.txt\"\n    } else {\n        return false;\n    }\n}\n"
                    },
                    "id": "#collect_hs_metrics.cwl/per_base_coverage"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "PER_TARGET_COVERAGE=",
                        "valueFrom": "${\n    if(self) {\n        return inputs.bam.nameroot + \".\" + inputs.output_prefix + \"-PerTargetCoverage.txt\"\n    } else {\n        return false;\n    }\n}\n"
                    },
                    "id": "#collect_hs_metrics.cwl/per_target_coverage"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "R="
                    },
                    "id": "#collect_hs_metrics.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "TARGET_INTERVALS="
                    },
                    "id": "#collect_hs_metrics.cwl/target_intervals"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx48g",
                "-jar",
                "/usr/picard/picard.jar",
                "CollectHsMetrics"
            ],
            "arguments": [
                "O=",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.bam.nameroot).$(inputs.output_prefix)-HsMetrics.txt"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).$(inputs.output_prefix)-HsMetrics.txt"
                    },
                    "id": "#collect_hs_metrics.cwl/hs_metrics"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).$(inputs.output_prefix)-PerBaseCoverage.txt"
                    },
                    "id": "#collect_hs_metrics.cwl/per_base_coverage_metrics"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).$(inputs.output_prefix)-PerTargetCoverage.txt"
                    },
                    "id": "#collect_hs_metrics.cwl/per_target_coverage_metrics"
                }
            ],
            "id": "#collect_hs_metrics.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "collect insert size metrics",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/picard:2.23.6"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "I="
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#collect_insert_size_metrics.cwl/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "METRIC_ACCUMULATION_LEVEL="
                    },
                    "id": "#collect_insert_size_metrics.cwl/metric_accumulation_level"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "REFERENCE_SEQUENCE="
                    },
                    "id": "#collect_insert_size_metrics.cwl/reference"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx16g",
                "-jar",
                "/usr/picard/picard.jar",
                "CollectInsertSizeMetrics"
            ],
            "arguments": [
                "O=",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.bam.nameroot).InsertSizeMetrics.txt"
                },
                "H=",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.bam.nameroot).InsertSizeHistogram.pdf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).InsertSizeHistogram.pdf"
                    },
                    "id": "#collect_insert_size_metrics.cwl/insert_size_histogram"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).InsertSizeMetrics.txt"
                    },
                    "id": "#collect_insert_size_metrics.cwl/insert_size_metrics"
                }
            ],
            "id": "#collect_insert_size_metrics.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "CombineVariants (GATK 3.6)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 9000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/gatk-cwl:3.6.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant:mutect",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#combine_variants.cwl/mutect_vcf"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant:pindel",
                        "position": 5
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#combine_variants.cwl/pindel_vcf"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#combine_variants.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant:strelka",
                        "position": 4
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#combine_variants.cwl/strelka_vcf"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant:varscan",
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#combine_variants.cwl/varscan_vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx8g",
                "-jar",
                "/opt/GenomeAnalysisTK.jar",
                "-T",
                "CombineVariants"
            ],
            "arguments": [
                "-genotypeMergeOptions",
                "PRIORITIZE",
                "--rod_priority_list",
                "mutect,varscan,strelka,pindel",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/combined.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "combined.vcf.gz"
                    },
                    "id": "#combine_variants.cwl/combined_vcf"
                }
            ],
            "id": "#combine_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Concordance checking between Tumor and Normal BAM",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "ramMin": 8000,
                    "tmpdirMin": 10000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "brentp/somalier:v0.1.5"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#concordance.cwl/bam_1"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 4
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#concordance.cwl/bam_2"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 5
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#concordance.cwl/bam_3"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-f",
                        "position": 2
                    },
                    "id": "#concordance.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-s",
                        "position": 1
                    },
                    "id": "#concordance.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/somalier"
            ],
            "arguments": [
                "-o",
                "concordance"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "concordance.somalier.pairs.tsv"
                    },
                    "id": "#concordance.cwl/somalier_pairs"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "concordance.somalier.samples.tsv"
                    },
                    "id": "#concordance.cwl/somalier_samples"
                }
            ],
            "id": "#concordance.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "CombineVariants (GATK 3.6)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 9000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/gatk-cwl:3.6.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant:callers",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#docm_add_variants.cwl/callers_vcf"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant:docm",
                        "position": 3
                    },
                    "id": "#docm_add_variants.cwl/docm_vcf"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#docm_add_variants.cwl/reference"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx8g",
                "-jar",
                "/opt/GenomeAnalysisTK.jar",
                "-T",
                "CombineVariants"
            ],
            "arguments": [
                "-genotypeMergeOptions",
                "PRIORITIZE",
                "--rod_priority_list",
                "callers,docm",
                "--setKey",
                "null",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/merged.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "merged.vcf.gz"
                    },
                    "id": "#docm_add_variants.cwl/merged_vcf"
                }
            ],
            "id": "#docm_add_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "HaplotypeCaller (GATK4)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 9000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.2.0"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "docm_haplotypeCaller.sh",
                            "entry": "set -o pipefail\nset -o errexit\n\n# Running haplotype caller using the newly created interval list\nif [[ \"$#\" == 5 ]];then # If normal_bam is passed.\n    # explicitly capturing variables\n    reference=$1\n    normal_bam=$2\n    tumor_bam=$3\n    docm_vcf=$4\n    interval_list=$5\n    # Chaning the interval_list to a new docm_interval_list that spans the docm regions by 200bp\n    cat $interval_list | grep '^@' > docm.interval_list # Extracting the header from the interval_list\n    zcat $docm_vcf | grep ^chr | awk '{FS = \"\\t\";OFS = \"\\t\";print $1,$2-100,$2+100,\"+\",$1\"_\"$2-100\"_\"$2+100}' >> docm.interval_list # Extracting the docm regions with a 100bp flanking region on both directions\n    /gatk/gatk HaplotypeCaller --java-options \"-Xmx8g\" -R $reference -I $normal_bam -I $tumor_bam --alleles $docm_vcf -L docm.interval_list --genotyping-mode GENOTYPE_GIVEN_ALLELES -O docm_raw_variants.vcf\nelse # If normal_bam is not passed\n    reference=$1\n    tumor_bam=$2\n    docm_vcf=$3\n    interval_list=$4\n    # Chaning the interval_list to a new docm_interval_list that spans the docm regions by 200bp\n    cat $interval_list | grep '^@' > docm.interval_list # Extracting the header from the interval_list\n    zcat $docm_vcf | grep ^chr | awk '{FS = \"\\t\";OFS = \"\\t\";print $1,$2-100,$2+100,\"+\",$1\"_\"$2-100\"_\"$2+100}' >> docm.interval_list # Extracting the docm regions with a 100bp flanking region on both directions\n    /gatk/gatk HaplotypeCaller --java-options \"-Xmx8g\" -R $reference -I $tumor_bam --alleles $docm_vcf -L docm.interval_list --genotyping-mode GENOTYPE_GIVEN_ALLELES -O docm_raw_variants.vcf\nfi\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#docm_gatk_haplotype_caller.cwl/bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 4
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#docm_gatk_haplotype_caller.cwl/docm_vcf"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 5
                    },
                    "id": "#docm_gatk_haplotype_caller.cwl/interval_list"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#docm_gatk_haplotype_caller.cwl/normal_bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#docm_gatk_haplotype_caller.cwl/reference"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "docm_haplotypeCaller.sh"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "docm_raw_variants.vcf"
                    },
                    "id": "#docm_gatk_haplotype_caller.cwl/docm_raw_variants"
                }
            ],
            "id": "#docm_gatk_haplotype_caller.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:xenial"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 2000
                },
                {
                    "class": "ShellCommandRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -1
                    },
                    "id": "#extract_hla_alleles.cwl/allele_file"
                }
            ],
            "baseCommand": [
                "/usr/bin/awk",
                "{getline; printf \"HLA-\"$2 \" HLA-\"$3 \" HLA-\"$4 \" HLA-\"$5 \" HLA-\"$6 \" HLA-\"$7}"
            ],
            "arguments": [
                {
                    "shellQuote": false,
                    "valueFrom": ">"
                },
                "helper.txt"
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "outputBinding": {
                        "glob": "helper.txt",
                        "loadContents": true,
                        "outputEval": "$(self[0].contents.split(\" \"))"
                    },
                    "id": "#extract_hla_alleles.cwl/allele_string"
                }
            ],
            "id": "#extract_hla_alleles.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Adds an INFO tag (VALIDATED) flagging variants in the pipeline vcf present in a previously validated vcf file",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bcftools-cwl:1.12"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 8000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "annotate.sh",
                            "entry": "set -eou pipefail\n\nPIPELINE_VCF=\"$1\"\n\nif [ \"$#\" -eq 2 ]; then\n    VALIDATED_VCF=\"$2\"\n    /opt/bcftools/bin/bcftools view -f PASS -Oz -o pass_filtered_validated_variants.vcf.gz $VALIDATED_VCF\n    /opt/bcftools/bin/bcftools index -t pass_filtered_validated_variants.vcf.gz\n    /opt/bcftools/bin/bcftools annotate -Oz -o validated_annotated_pipeline_variants.vcf.gz -a pass_filtered_validated_variants.vcf.gz -m 'VALIDATED' $PIPELINE_VCF\n    /opt/bcftools/bin/bcftools index -t validated_annotated_pipeline_variants.vcf.gz\nelif [ \"$#\" -eq 1 ]; then\n    cp $PIPELINE_VCF validated_annotated_pipeline_variants.vcf.gz\n    cp $PIPELINE_VCF.tbi validated_annotated_pipeline_variants.vcf.gz.tbi\nelse\n    exit 1\nfi\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 2
                    },
                    "doc": "A vcf of previously discovered variants to be marked in the pipeline vcf; if not provided, this tool does nothing but rename the input vcf",
                    "id": "#filter_known_variants.cwl/validated_variants"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 1
                    },
                    "doc": "Each variant in this file that is also in the validated vcf file (if supplied) will be marked with a VALIDATED flag in its INFO field",
                    "id": "#filter_known_variants.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "annotate.sh"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "validated_annotated_pipeline_variants.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#filter_known_variants.cwl/validated_annotated_vcf"
                }
            ],
            "id": "#filter_known_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "cle_annotated_vcf_filter",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.3.1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "boolean",
                    "inputBinding": {
                        "prefix": "filter",
                        "position": 1
                    },
                    "id": "#filter_vcf_cle.cwl/filter"
                },
                {
                    "type": "File",
                    "id": "#filter_vcf_cle.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "/usr/bin/docm_and_coding_indel_selection.pl"
            ],
            "arguments": [
                "$(inputs.vcf.path)",
                "$(runtime.outdir)"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "annotated_filtered.vcf"
                    },
                    "id": "#filter_vcf_cle.cwl/cle_filtered_vcf"
                }
            ],
            "id": "#filter_vcf_cle.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Coding Variant filter",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/vep_helper-cwl:vep_101.0_v1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-i",
                        "position": 1
                    },
                    "id": "#filter_vcf_coding_variant.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "/usr/bin/vcf_check.pl"
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.vcf.path)"
                },
                {
                    "valueFrom": "$(runtime.outdir)/annotated.coding_variant_filtered.vcf"
                },
                "/usr/bin/perl",
                "/opt/vep/src/ensembl-vep/filter_vep",
                "--format",
                "vcf",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/annotated.coding_variant_filtered.vcf"
                },
                "--ontology",
                "--filter",
                "Consequence is coding_sequence_variant"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "annotated.coding_variant_filtered.vcf"
                    },
                    "id": "#filter_vcf_coding_variant.cwl/filtered_vcf"
                }
            ],
            "id": "#filter_vcf_coding_variant.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Custom allele frequency filter",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/vep_helper-cwl:vep_101.0_v1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#filter_vcf_custom_allele_freq.cwl/field_name"
                },
                {
                    "type": "float",
                    "inputBinding": {
                        "valueFrom": "${\n    return [\n        \"--filter\",\n        [\n            inputs.field_name, \"<\", inputs.maximum_population_allele_frequency,\n            \"or not\", inputs.field_name\n        ].join(\" \")\n    ]\n}\n",
                        "position": 2
                    },
                    "id": "#filter_vcf_custom_allele_freq.cwl/maximum_population_allele_frequency"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-i",
                        "position": 1
                    },
                    "id": "#filter_vcf_custom_allele_freq.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "/usr/bin/vcf_check.pl"
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.vcf.path)"
                },
                {
                    "valueFrom": "$(runtime.outdir)/annotated.af_filtered.vcf"
                },
                "/usr/bin/perl",
                "/opt/vep/src/ensembl-vep/filter_vep",
                "--format",
                "vcf",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/annotated.af_filtered.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "annotated.af_filtered.vcf"
                    },
                    "id": "#filter_vcf_custom_allele_freq.cwl/filtered_vcf"
                }
            ],
            "id": "#filter_vcf_custom_allele_freq.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "filter variants at sites below a given sequence depth in each sample",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/depth-filter:0.1.2"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "int",
                    "inputBinding": {
                        "prefix": "--minimum_depth",
                        "position": -3
                    },
                    "id": "#filter_vcf_depth.cwl/minimum_depth"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "inputBinding": {
                        "itemSeparator": ",",
                        "position": -1
                    },
                    "id": "#filter_vcf_depth.cwl/sample_names"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -2
                    },
                    "id": "#filter_vcf_depth.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/opt/conda/bin/python3",
                "/usr/bin/depth_filter.py"
            ],
            "arguments": [
                {
                    "valueFrom": "$(runtime.outdir)/depth_filtered.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "depth_filtered.vcf"
                    },
                    "id": "#filter_vcf_depth.cwl/depth_filtered_vcf"
                }
            ],
            "id": "#filter_vcf_depth.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Filter variants from the DoCM detector",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.4.2"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "docm_filter.pl",
                            "entry": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse feature qw(say);\n\ndie(\"Wrong number of arguments. Provide docm_vcf, normal_cram, tumor_cram, output_vcf_file, set_filter_flag\") unless scalar(@ARGV) == 5;\nmy ($docm_vcf, $normal_cram, $tumor_cram, $output_vcf_file, $set_filter_flag) = @ARGV;\n\nmy $samtools = '/opt/samtools/bin/samtools';\nmy $normal_header_str = `$samtools view -H $normal_cram | grep \"^\\@RG\" | head -n 1`;\nmy $tumor_header_str  = `$samtools view -H $tumor_cram | grep \"^\\@RG\" | head -n 1`;\n\nmy ($normal_name) = $normal_header_str =~ /\\@RG.+\\tSM:([ -~]+)/;\nmy ($tumor_name)  = $tumor_header_str =~ /\\@RG.+\\tSM:([ -~]+)/;\n\nunless ($normal_name and $tumor_name) {\n    die \"Failed to get normal_name: $normal_name from $normal_cram AND tumor_name: $tumor_name from $tumor_cram\";\n}\n\nmy $docm_vcf_fh;\nif($docm_vcf =~ /.gz$/){\n    open($docm_vcf_fh, \"gunzip -c $docm_vcf |\") or die(\"couldn't open $docm_vcf to read\");\n} else {\n    open($docm_vcf_fh, $docm_vcf) or die(\"couldn't open $docm_vcf to read\");\n}\nopen(my $docm_out_fh, \">\", \"$output_vcf_file\") or die(\"couldn't open $output_vcf_file for write\");\n\nmy ($normal_index, $tumor_index);\n\nwhile (<$docm_vcf_fh>) {\n    chomp;\n    if (/^##/) {\n        say $docm_out_fh $_;\n    }\n    elsif (/^#CHROM/) {\n        if ($set_filter_flag) {\n            say $docm_out_fh '##FILTER=<ID=DOCM_ONLY,Description=\"ignore Docm variants\">';\n        }\n        my @columns = split /\\t/, $_;\n        my %index = (\n            $columns[9]  => 9,\n            $columns[10] => 10,\n        );\n        ($normal_index, $tumor_index) = map{$index{$_}}($normal_name, $tumor_name);\n        unless ($normal_index and $tumor_index) {\n            die \"Failed to get normal_index: $normal_index for $normal_name AND tumor_index: $tumor_index for $tumor_name\";\n        }\n        $columns[9]  = $normal_name;\n        $columns[10] = $tumor_name;\n        my $header = join \"\\t\", @columns;\n        say $docm_out_fh $header;\n    }\n    else {\n        my @columns = split /\\t/, $_;\n        my @tumor_info = split /:/, $columns[$tumor_index];\n        my ($AD, $DP) = ($tumor_info[1], $tumor_info[2]);\n        next unless $AD;\n        my @AD = split /,/, $AD;\n        shift @AD; #the first one is ref count\n        \n        for my $ad (@AD) {\n            if ($ad > 5 and $ad/$DP > 0.01) {\n                my ($normal_col, $tumor_col) = map{$columns[$_]}($normal_index, $tumor_index);\n                $columns[9]  = $normal_col;\n                $columns[10] = $tumor_col;\n                if ($set_filter_flag) {\n                    $columns[6] = 'DOCM_ONLY';\n                }\n                else {\n                    $columns[6] = '.';\n                }\n                my $new_line = join \"\\t\", @columns;\n                say $docm_out_fh $new_line;\n                last;\n            }\n        }\n    }\n}\n\nclose($docm_vcf_fh);\nclose($docm_out_fh);\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -4
                    },
                    "id": "#filter_vcf_docm.cwl/docm_raw_variants"
                },
                {
                    "type": "boolean",
                    "inputBinding": {
                        "position": 1,
                        "valueFrom": "${\n  if(inputs.filter_docm_variants){\n    return \"1\";\n  } else {\n    return \"0\";\n  }\n}\n"
                    },
                    "id": "#filter_vcf_docm.cwl/filter_docm_variants"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -3
                    },
                    "id": "#filter_vcf_docm.cwl/normal_bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -2
                    },
                    "id": "#filter_vcf_docm.cwl/tumor_bam"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "docm_filter.pl"
            ],
            "arguments": [
                "$(runtime.outdir)/docm_filtered_variants.vcf"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "docm_filtered_variants.vcf"
                    },
                    "id": "#filter_vcf_docm.cwl/docm_filtered_variants"
                }
            ],
            "id": "#filter_vcf_docm.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "filter vcf for variants with high percentage of mapq0 reads",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/mapq0-filter:v0.3.1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 8000,
                    "tmpdirMin": 10000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#filter_vcf_mapq0.cwl/reference"
                },
                {
                    "type": "float",
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#filter_vcf_mapq0.cwl/threshold"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#filter_vcf_mapq0.cwl/tumor_bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#filter_vcf_mapq0.cwl/vcf"
                }
            ],
            "arguments": [
                "/bin/bash",
                "/usr/bin/mapq0_vcf_filter.sh",
                {
                    "valueFrom": "$(runtime.outdir)/mapq_filtered.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "mapq_filtered.vcf.gz"
                    },
                    "id": "#filter_vcf_mapq0.cwl/mapq0_filtered_vcf"
                }
            ],
            "id": "#filter_vcf_mapq0.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "use the binomial/llr somatic filter to weed out low confidence variants",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/somatic-llr-filter:v0.4.3"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--normal-contamination-rate",
                        "position": -5
                    },
                    "doc": "fraction of tumor present in the normal sample (range 0 to 1) - default 0",
                    "id": "#filter_vcf_somatic_llr.cwl/normal_contamination_rate"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--normal-sample-name"
                    },
                    "id": "#filter_vcf_somatic_llr.cwl/normal_sample_name"
                },
                {
                    "type": "float",
                    "inputBinding": {
                        "prefix": "--llr-threshold",
                        "position": -2
                    },
                    "id": "#filter_vcf_somatic_llr.cwl/threshold"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--tumor-purity",
                        "position": -4
                    },
                    "doc": "tumor cellularity fraction (range 0 to 1) - default 1",
                    "id": "#filter_vcf_somatic_llr.cwl/tumor_purity"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--tumor-sample-name",
                        "position": -3
                    },
                    "id": "#filter_vcf_somatic_llr.cwl/tumor_sample_name"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -1
                    },
                    "id": "#filter_vcf_somatic_llr.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/opt/conda/bin/python3",
                "/usr/bin/somatic_llr_filter.py"
            ],
            "arguments": [
                "--overwrite",
                {
                    "valueFrom": "$(runtime.outdir)/somatic_llr_filtered.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "somatic_llr_filtered.vcf"
                    },
                    "id": "#filter_vcf_somatic_llr.cwl/somatic_llr_filtered_vcf"
                }
            ],
            "id": "#filter_vcf_somatic_llr.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "False Positive filter",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 6000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/fp_filter-cwl:1.0.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--bam-file",
                        "position": 2
                    },
                    "id": "#fp_filter.cwl_2/bam"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.05,
                    "inputBinding": {
                        "prefix": "--min-var-freq",
                        "position": 5
                    },
                    "id": "#fp_filter.cwl_2/min_var_freq"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "fpfilter",
                    "id": "#fp_filter.cwl_2/output_vcf_basename"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--reference",
                        "position": 1
                    },
                    "id": "#fp_filter.cwl_2/reference"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "TUMOR",
                    "inputBinding": {
                        "prefix": "--sample",
                        "position": 4
                    },
                    "id": "#fp_filter.cwl_2/sample_name"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--vcf-file",
                        "position": 3
                    },
                    "id": "#fp_filter.cwl_2/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "/usr/bin/fpfilter.pl"
            ],
            "arguments": [
                "--bam-readcount",
                "/usr/bin/bam-readcount",
                "--samtools",
                "/opt/samtools/bin/samtools",
                "--output",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.output_vcf_basename).vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_vcf_basename).vcf"
                    },
                    "id": "#fp_filter.cwl_2/filtered_vcf"
                }
            ],
            "id": "#fp_filter.cwl_2"
        },
        {
            "class": "CommandLineTool",
            "label": "GATK HaplotypeCaller",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-I",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotype_caller.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "-contamination",
                        "position": 7
                    },
                    "id": "#gatk_haplotype_caller.cwl/contamination_fraction"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "--dbsnp",
                        "position": 6
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotype_caller.cwl/dbsnp_vcf"
                },
                {
                    "type": {
                        "type": "enum",
                        "symbols": [
                            "#gatk_haplotype_caller.cwl/emit_reference_confidence/NONE",
                            "#gatk_haplotype_caller.cwl/emit_reference_confidence/BP_RESOLUTION",
                            "#gatk_haplotype_caller.cwl/emit_reference_confidence/GVCF"
                        ]
                    },
                    "inputBinding": {
                        "prefix": "-ERC",
                        "position": 3
                    },
                    "id": "#gatk_haplotype_caller.cwl/emit_reference_confidence"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "-GQB"
                        }
                    },
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#gatk_haplotype_caller.cwl/gvcf_gq_bands"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "-L"
                        }
                    },
                    "inputBinding": {
                        "position": 5
                    },
                    "id": "#gatk_haplotype_caller.cwl/intervals"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "maximum number of alternate alleles to genotype",
                    "inputBinding": {
                        "prefix": "--max_alternate_alleles",
                        "position": 8
                    },
                    "id": "#gatk_haplotype_caller.cwl/max_alternate_alleles"
                },
                {
                    "type": "string",
                    "default": "output.g.vcf.gz",
                    "inputBinding": {
                        "prefix": "-O",
                        "position": 11
                    },
                    "id": "#gatk_haplotype_caller.cwl/output_file_name"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "number of chromosomes per sample",
                    "inputBinding": {
                        "prefix": "-ploidy",
                        "position": 9
                    },
                    "id": "#gatk_haplotype_caller.cwl/ploidy"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "filters to apply to reads before analysis",
                    "inputBinding": {
                        "prefix": "--read_filter",
                        "position": 10
                    },
                    "id": "#gatk_haplotype_caller.cwl/read_filter"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#gatk_haplotype_caller.cwl/reference"
                }
            ],
            "baseCommand": [
                "/gatk/gatk",
                "--java-options",
                "-Xmx16g",
                "HaplotypeCaller"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_file_name)"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#gatk_haplotype_caller.cwl/gvcf"
                }
            ],
            "id": "#gatk_haplotype_caller.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Picard: RNA Seq Metrics",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000,
                    "coresMin": 1
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/rnaseq:1.0.0"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "I=",
                        "separate": false
                    },
                    "id": "#generate_qc_metrics.cwl/bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "REF_FLAT=",
                        "separate": false
                    },
                    "id": "#generate_qc_metrics.cwl/refFlat"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "RIBOSOMAL_INTERVALS=",
                        "separate": false
                    },
                    "id": "#generate_qc_metrics.cwl/ribosomal_intervals"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#generate_qc_metrics.cwl/strand/first",
                                "#generate_qc_metrics.cwl/strand/second",
                                "#generate_qc_metrics.cwl/strand/unstranded"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "valueFrom": "${\n    if (inputs.strand) {\n        if (inputs.strand == 'first') {  \n            return ['STRAND=SECOND_READ_TRANSCRIPTION_STRAND'];\n        } else if (inputs.strand == 'second') {\n            return ['STRAND=FIRST_READ_TRANSCRIPTION_STRAND'];\n        } else {\n            return ['STRAND=NONE'];\n        }\n    } else {\n            return ['STRAND=NONE']\n    }\n}\n"
                    },
                    "id": "#generate_qc_metrics.cwl/strand"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx16g",
                "-jar",
                "/opt/picard/picard.jar",
                "CollectRnaSeqMetrics"
            ],
            "arguments": [
                {
                    "valueFrom": "O=$(runtime.outdir)/rna_metrics.txt"
                },
                {
                    "valueFrom": "CHART=$(runtime.outdir)/rna_metrics.pdf"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "rna_metrics.pdf"
                    },
                    "id": "#generate_qc_metrics.cwl/chart"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "rna_metrics.txt"
                    },
                    "id": "#generate_qc_metrics.cwl/metrics"
                }
            ],
            "id": "#generate_qc_metrics.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "HISAT2: align",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000,
                    "coresMin": 16
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/hisat2-sambamba:0.1"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-1",
                        "position": -2
                    },
                    "id": "#hisat2_align.cwl/fastq1"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-2",
                        "position": -1
                    },
                    "id": "#hisat2_align.cwl/fastq2"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "--rg"
                        }
                    },
                    "inputBinding": {
                        "position": -4
                    },
                    "id": "#hisat2_align.cwl/read_group_fields"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--rg-id",
                        "position": -5
                    },
                    "id": "#hisat2_align.cwl/read_group_id"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".1.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".2.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".3.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".4.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".5.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".6.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".7.ht2",
                            "required": null
                        },
                        {
                            "pattern": ".8.ht2",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-x",
                        "position": -3
                    },
                    "id": "#hisat2_align.cwl/reference_index"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#hisat2_align.cwl/strand/first",
                                "#hisat2_align.cwl/strand/second",
                                "#hisat2_align.cwl/strand/unstranded"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "valueFrom": "${\n    if (inputs.strand) {\n        if (inputs.strand == 'first') {\n            return ['--rna-strandness RF'];\n        } else if (inputs.strand == 'second') {\n            return ['--rna-strandness FR'];\n        } else {\n            return [];\n        }\n    } else {\n            return []\n    }\n}\n",
                        "position": -6
                    },
                    "id": "#hisat2_align.cwl/strand"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/hisat2"
            ],
            "arguments": [
                "-p",
                "$(runtime.cores)",
                "--dta",
                {
                    "shellQuote": false,
                    "valueFrom": "|"
                },
                "/usr/local/bin/sambamba",
                "view",
                "-S",
                "-f",
                "bam",
                "-l",
                "0",
                "/dev/stdin",
                {
                    "shellQuote": false,
                    "valueFrom": "|"
                },
                "/usr/local/bin/sambamba",
                "sort",
                "-t",
                "$(runtime.cores)",
                "-m",
                "8G",
                "-o",
                "$(runtime.outdir)/aligned.bam",
                "/dev/stdin"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "aligned.bam"
                    },
                    "id": "#hisat2_align.cwl/aligned_bam"
                }
            ],
            "id": "#hisat2_align.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Script to create consensus from optitype and clinical HLA typing",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "python:3.7.4-slim-buster"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "hla_consensus.py",
                            "entry": "#This script produces 2-4 files depending on inputs and their contents\n#All are packaged together into a folder called hla_calls for convenience\n#optitype_calls.txt is always produced, and is essentially a copy of optitype's output\n#consensus_calls.txt is also always produced; if no clinical calls are provided, this\n#file is identical to optitype_calls.txt. If clinical calls are provided, they are\n#reproduced in clinical_calls.txt. If the clinical calls exactly match the optitype calls*, \n#all 3 files described so far will contain the same information, but are not guaranteed to\n#be exactly the same (text ordering may differ, depending on the order calls are given in the input). \n#If the clinical calls and optitype calls do not match, mismatched_calls.txt is then produced;\n#each line represents a gene. See below (section 'write out call files') for more mismatch details.\n#NOTE: optitype only produces MHC class I calls\n\n#optitype input format (should be automatic):\n#HLA-X*01:02\n#clinical input format (each element of the input array):\n#note that each individual call should be a single element of the array\n#a group of alleles separated by '/' indicates an uncertain call and the\n#its possible alleles; the entire group comprises a single element of the array\n#HLA-X*01:02[/HLA-X...]\n#NOTE: hla calls may have up to 4 ':' separated fields; however, this tool strips all\n#      but the first 2, because the downstream tools only support 2 fields\n#      eg HLA-X*01:02:03:04, while valid, will be treated as HLA-X*01:02\n\nimport sys, os\nfrom collections import defaultdict\n\n####################################\n### helper methods for later use ###\n####################################\n\n#helper method that takes in the decomposed version of an hla\n#string and returns the full delimited string\ndef build_hla_str(gene, allele_group, spec_allele):\n    return gene + \"*\" + allele_group + \":\" + spec_allele\n\n#helper method that takes in a full hla string, like HLA-X*01:02:03:04,\n#and splits it into the gene name (HLA-X), allele group (01), and the\n#specific allele (02), dropping any fields beyond this, because downstream\n#tool do not support these fields\ndef split_hla_str(full_hla_str):\n    gene_name, raw_allele_fields = full_hla_str.split('*')\n    split_allele_fields = raw_allele_fields.split(\":\")\n    allele_group_name = split_allele_fields[0]\n    specific_allele_name = split_allele_fields[1]\n    return (gene_name, allele_group_name, specific_allele_name)\n\n#helper method that creates a mismatch file only if any have been found in the tree,\n#and inserts a header upon initially creating the file. Params:\n#previously_written- true if the file has already been created; used control header creation\n#mismatches- dictionary with sources as keys and a list of alleles called only by that\n#            source as values\n#returns true if the file was or has ever been written to, false otherwise\ndef write_mismatch(previously_written, mismatches):\n    if (not(mismatches['optitype'] or mismatches['clinical'])):\n        #In this case, both arrays are empty, so there's no mismatch to write\n        #function has not changed the file state, so return the unmodified flag\n        return previously_written\n\n    with open(\"hla_calls/mismatched_calls.txt\", \"a\") as m_c:\n        if not previously_written:\n            #add header if this is the first time writing to the file\n            m_c.write(\"optitype_calls\\tclinical_calls\\n\")\n        #write the mismatches to the file\n        m_c.write( \",\".join(mismatches['optitype']) + \"\\t\" + \",\".join(mismatches['clinical']) + \"\\n\" )\n\n    return True\n\n########################################\n### parse args from the command line ###\n########################################\n\nclinical_exists = len(sys.argv) > 2 \n\noptitype_calls = sys.argv[1].split(\",\")\n\nif clinical_exists:\n    raw_clinical_i_calls = sys.argv[2].split(\",\") #MHC Class I clinical typing results\n    raw_clinical_ii_calls = sys.argv[3].split(\",\") #MHC Class II clinical typing results\n    #Each clinical call may be a single high confidence call,\n    #or a list of uncertain calls separated by slashes\n    hc_clinical_calls = []\n    u_clinical_calls = []\n    for call in raw_clinical_i_calls:\n        if \"/\" in call:\n            u_clinical_calls.append(call)\n        else:\n            hc_clinical_calls.append(call)\n\n################################################################\n### Load HLA types into data structure for consensus calling ###\n################################################################\n\n#Create a basic tree out of dictionaries to hold the data from all callers;\n#top level keys will be genes, pointing to a nested dictionary with\n#allele groups as keys, pointing to a final dictionary with specific alleles\n#as keys and a set containing call sources as values\n# ex: optitype calls HLA-A*01:02 -> {HLA-A: {01: {02: {optitype}}}}\n\n#defaultdict constructor requires a callable; however, it returns an object\n#lambdas create a callable that allows for nested defaultdicts\nhla_calls = defaultdict( lambda: defaultdict( lambda: defaultdict(set) ) )\n\nfor call in optitype_calls:\n    gene, allele_group, spec_allele = split_hla_str(call)\n\n    #records this call in the tree and tags it as coming from optitype\n    #the tag is added to a set, so any duplicates (such as from an individual homozygous\n    #for a given gene) are collapsed into a single entry\n    hla_calls[gene][allele_group][spec_allele].add('optitype')\n\nif clinical_exists:\n    for call in hc_clinical_calls:\n        gene, allele_group, spec_allele = split_hla_str(call)\n\n        #Case 1: this $call was also called by optitype, so add to the \n        #record indicating that clinical data supports this call\n        #Case 2: this call is unique to the clinical data; create a record \n        #and indicate that only clinical data supports this call\n        hla_calls[gene][allele_group][spec_allele].add('clinical')\n\n    for multi_call in u_clinical_calls:\n        calls = multi_call.split(\"/\")\n        multi_consensus = set()\n        for call in calls:\n            gene, allele_group, spec_allele = split_hla_str(call)\n\n            #check if this call already exists in the tree, which will be treated as\n            #evidence that this call is the correct call out of the current group of\n            #uncertain calls ($multi_call)\n\n            #TODO this may be biased towards creating a homozygous consensus:\n            #since high confidence clinical calls are evaluated before this, one of \n            #these calls could be used as evidence when resolving the uncertain call\n            #using the current method. Is this desirable? Should we only use optitype calls\n            #when resolving uncertain clinical calls?\n            #Example: clinical calls 01:02 and 01:02/01:03/01:04\n            if hla_calls[gene][allele_group][spec_allele]:\n                #add as a tuple to avoid re-splitting later\n                multi_consensus.add( (gene, allele_group, spec_allele) )\n\n        #if one and only one of the calls from the uncertain group was already in the tree,\n        #that is treated as evidence that this particular call was the correct one. It will\n        #be accepted and entered into the tree, while the other calls will be discarded\n        if len(multi_consensus) == 1:\n            accpt_call = multi_consensus.pop()\n            hla_calls[accpt_call[0]][accpt_call[1]][accpt_call[2]].add('clinical')\n        #otherwise, all uncertain calls from the group will be added to the tree; this means\n        #they will be added to the consensus superset (since their validity cannot be disproven),\n        #and also used to construct the mismatch file\n        else:\n            for call in calls:\n                gene, allele_group, spec_allele = split_hla_str(call)\n                hla_calls[gene][allele_group][spec_allele].add('clinical')\n\n##############################################\n### write out caller files for convenience ###\n##############################################\n\nos.mkdir(\"hla_calls\")\n\n#Create an exact copy of optitype calls, to be bundled with other relevant\n#files for convenience/later review. Always generated,\nwith open(\"hla_calls/optitype_calls.txt\", \"w\") as o_c:\n    o_c.write( \",\".join(optitype_calls) )\n\n#Create an exact copy of clinical calls, if they exist, to be bundled with \n#other relevant files for convenience/later review.\nif clinical_exists:\n    with open(\"hla_calls/clinical_calls.txt\", \"w\") as c_c:\n        c_c.write( \",\".join(raw_clinical_i_calls + raw_clinical_ii_calls) )\n\n#########################################################\n### Generate consensus (superset if callers disagree) ###\n#########################################################\n\n#A consensus file is always generated to be passed on to pvacseq. If there are\n#no clinical calls, this file is the same as optitype_calls.txt. If there are, walk\n#through the tree and emit everything present as the consensus. If there is a true\n#consensus, each class I gene (corresponding to the top level keys of the tree) will have\n#at most 2 leaves (1 in the case of a homozygote, or in the rare case that both optitype\n#and clinical data only called one allele for this gene), where each leaf represents\n#a specific allele call supported by both sources. If there is no true consensus, there\n#may be more than 2 leaves per class I gene, and individual leaves may only be supported by\n#1 of the 2 sources. These leaves will still be added to the consensus to form a superset,\n#since there is not enough evidence to discard them, but they will also be added to a\n#mismatch file, which presents side by side lists of the differing alleles called by each\n#source, with one gene per line. Note that optitype only makes class I predictions, so any\n#class II predictions from the clinical data are always added to the consensus and never\n#to the mismatch file\nif not clinical_exists:\n    with open(\"hla_calls/consensus_calls.txt\", \"w\") as c_c:\n        c_c.write( \",\".join(optitype_calls) )\nelse:\n    consensus_calls = []\n    consensus_calls.extend(raw_clinical_ii_calls)\n    mismatch_written = False\n    for gene in hla_calls:\n        mismatches = {'optitype': [], 'clinical': []}\n        for allele_group in hla_calls[gene]:\n            for spec_allele in hla_calls[gene][allele_group]:\n                callers = hla_calls[gene][allele_group][spec_allele]\n\n                #if any uncertain calls were resolved to a single call based on prior\n                #evidence, the discarded calls will have been visited but not tagged,\n                #resulting in leaves with empty sets; these can be ignored\n                if callers:\n                    #there are now only 3 possibilities for the contents of $callers:\n                    #[optitype, clinical], [optitype], [clinical]\n                    #all will be added to the consensus, possibly creating a superset\n                    #those with only 1 caller represent mismatches between the 2\n                    consensus_calls.append( build_hla_str(gene, allele_group, spec_allele) )\n                    if len(callers) == 1:\n                        mismatches[callers.pop()].append( build_hla_str(gene, allele_group, spec_allele) )\n\n        mismatch_written = write_mismatch(mismatch_written, mismatches)\n\n    with open(\"hla_calls/consensus_calls.txt\", \"w\") as c_c:\n        c_c.write( \",\".join(consensus_calls) )\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "inputBinding": {
                        "position": 3,
                        "itemSeparator": ",",
                        "separate": false
                    },
                    "id": "#hla_consensus.cwl/clinical_mhc_classII_alleles"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "inputBinding": {
                        "position": 2,
                        "itemSeparator": ",",
                        "separate": false
                    },
                    "id": "#hla_consensus.cwl/clinical_mhc_classI_alleles"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "inputBinding": {
                        "position": 1,
                        "itemSeparator": ",",
                        "separate": false
                    },
                    "id": "#hla_consensus.cwl/optitype_hla_alleles"
                }
            ],
            "baseCommand": [
                "python",
                "hla_consensus.py"
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "outputBinding": {
                        "glob": "hla_calls/consensus_calls.txt",
                        "loadContents": true,
                        "outputEval": "$(self[0].contents.split(\",\"))"
                    },
                    "id": "#hla_consensus.cwl/consensus_alleles"
                },
                {
                    "type": "Directory",
                    "outputBinding": {
                        "glob": "hla_calls"
                    },
                    "id": "#hla_consensus.cwl/hla_call_files"
                }
            ],
            "id": "#hla_consensus.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "samtools index",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        "${ var f = inputs.bam; delete f.secondaryFiles; return f }"
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#index_bam.cwl/bam"
                }
            ],
            "arguments": [
                "/usr/local/bin/samtools",
                "index",
                "$(runtime.outdir)/$(inputs.bam.basename)",
                "$(runtime.outdir)/$(inputs.bam.basename).bai",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "cp",
                "$(inputs.bam.basename).bai",
                "$(runtime.outdir)/$(inputs.bam.nameroot).bai"
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.bam.basename)"
                    },
                    "id": "#index_bam.cwl/indexed_bam"
                }
            ],
            "id": "#index_bam.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "samtools index cram",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        "${ var f = inputs.cram; delete f.secondaryFiles; return f }"
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#index_cram.cwl/cram"
                }
            ],
            "arguments": [
                "/usr/local/bin/samtools",
                "index",
                "$(runtime.outdir)/$(inputs.cram.basename)",
                "$(runtime.outdir)/$(inputs.cram.basename).crai",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "cp",
                "$(inputs.cram.basename).crai",
                "$(runtime.outdir)/$(inputs.cram.nameroot).crai"
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".crai",
                            "required": null
                        },
                        {
                            "pattern": "^.crai",
                            "required": null
                        }
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.cram.basename)"
                    },
                    "id": "#index_cram.cwl/indexed_cram"
                }
            ],
            "id": "#index_cram.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "vcf index",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "valueFrom": "$(self.basename)",
                        "position": 1
                    },
                    "id": "#index_vcf.cwl/vcf"
                }
            ],
            "arguments": [
                "cp",
                "$(inputs.vcf.path)",
                "$(runtime.outdir)/$(inputs.vcf.basename)",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "/usr/local/bin/tabix",
                "-p",
                "vcf"
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.vcf.basename)"
                    },
                    "id": "#index_vcf.cwl/indexed_vcf"
                }
            ],
            "id": "#index_vcf.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Intersect passing validated variants and passing pipeline variants for use in pvacseq",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bcftools-cwl:1.12"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 8000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "intersect.sh",
                            "entry": "set -eou pipefail\n\nPIPELINE_VCF=\"$1\"\n\nif [ \"$#\" -eq 2 ]; then\n    VALIDATED_VCF=\"$2\"\n    #filter the validated vcf to ensure there are only passing variants, then re-index\n    /opt/bcftools/bin/bcftools view -f PASS -Oz -o pass_filtered_validated_variants.vcf.gz $VALIDATED_VCF\n    /opt/bcftools/bin/bcftools index -t pass_filtered_validated_variants.vcf.gz\n    #intersect the two vcfs; output will contain only passing variants\n    #-n specifies that the output should contain only variants found in both files\n    #-w results in a single output vcf containing the intersection\n    #-p specifies the directory that will contain output files (vcf, index, and summary files)\n    #-Oz specifies the output format as compressed\n    /opt/bcftools/bin/bcftools isec -f PASS -n=2 -w1 -p validated -Oz $PIPELINE_VCF pass_filtered_validated_variants.vcf.gz\nelif [ \"$#\" -eq 1 ]; then\n    mkdir validated \n    cp $PIPELINE_VCF validated/0000.vcf.gz\n    cp $PIPELINE_VCF.tbi validated/0000.vcf.gz.tbi\nelse\n    exit 1\nfi\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 2
                    },
                    "doc": "A vcf of previously discovered variants; if not provided, this tool does nothing but rename the input vcf",
                    "id": "#intersect_known_variants.cwl/validated_variants"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 1
                    },
                    "doc": "Pipeline variants to be intersected with validated variants, if the vcf is present",
                    "id": "#intersect_known_variants.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "intersect.sh"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "validated/0000.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#intersect_known_variants.cwl/validated_and_pipeline_vcf"
                }
            ],
            "id": "#intersect_known_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "expand interval list regions by a given number of basepairs",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/picard:2.23.6"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "separate": false
                    },
                    "id": "#interval_list_expand.cwl/interval_list"
                },
                {
                    "type": "int",
                    "inputBinding": {
                        "prefix": "PADDING=",
                        "separate": false
                    },
                    "id": "#interval_list_expand.cwl/roi_padding"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx3g",
                "-jar",
                "/usr/picard/picard.jar",
                "IntervalListTools"
            ],
            "arguments": [
                {
                    "valueFrom": "OUTPUT=$(runtime.outdir)/$(inputs.interval_list.nameroot).expanded.interval_list"
                },
                "UNIQUE=TRUE"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.interval_list.nameroot).expanded.interval_list"
                    },
                    "id": "#interval_list_expand.cwl/expanded_interval_list"
                }
            ],
            "id": "#interval_list_expand.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:bionic"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "intervals_to_bed.pl",
                            "entry": "use feature qw(say);\n\nfor my $line (<>) {\n    chomp $line;\n\n    next if substr($line,0,1) eq '@'; #skip header lines\n\n    my ($chrom, $start, $stop) = split(/\\t/, $line);\n    say(join(\"\\t\", $chrom, $start-1, $stop));\n}\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#intervals_to_bed.cwl/interval_list"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "intervals_to_bed.pl"
            ],
            "stdout": "interval_list.bed",
            "outputs": [
                {
                    "type": "File",
                    "id": "#intervals_to_bed.cwl/interval_bed",
                    "outputBinding": {
                        "glob": "interval_list.bed"
                    }
                }
            ],
            "id": "#intervals_to_bed.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Kallisto: Quant",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 32000,
                    "coresMin": 8
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/kallisto:0.46.1--h4f7b962_0"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "File"
                        }
                    },
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#kallisto.cwl/fastqs"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-i",
                        "position": 2
                    },
                    "id": "#kallisto.cwl/kallisto_index"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#kallisto.cwl/strand/first",
                                "#kallisto.cwl/strand/second",
                                "#kallisto.cwl/strand/unstranded"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "valueFrom": "${\n    if (inputs.strand) {\n        if (inputs.strand == 'first') {\n            return ['--rf-stranded'];\n        } else if (inputs.strand == 'second') {\n            return ['--fr-stranded'];\n        } else {\n            return [];\n        }\n    } else {\n            return [];\n    }\n}\n",
                        "position": 1
                    },
                    "id": "#kallisto.cwl/strand"
                }
            ],
            "baseCommand": [
                "kallisto"
            ],
            "arguments": [
                "quant",
                "-t",
                "$(runtime.cores)",
                "-b",
                "100",
                "--fusion",
                "-o",
                "kallisto"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "kallisto/abundance.h5"
                    },
                    "id": "#kallisto.cwl/expression_transcript_h5"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "kallisto/abundance.tsv"
                    },
                    "id": "#kallisto.cwl/expression_transcript_table"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "kallisto/fusion.txt"
                    },
                    "id": "#kallisto.cwl/fusion_evidence"
                }
            ],
            "id": "#kallisto.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Set up and execute manta",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/manta_somatic-cwl:1.6.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 12,
                    "ramMin": 24000,
                    "tmpdirMin": 10000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": -5,
                        "prefix": "--callRegions"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "doc": "bgzip-compressed, tabix-indexed BED file specifiying regions to which variant analysis will be restricted",
                    "id": "#manta_somatic.cwl/call_regions"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": -6,
                        "prefix": "--exome"
                    },
                    "doc": "toggles on settings for WES",
                    "id": "#manta_somatic.cwl/non_wgs"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": -2,
                        "prefix": "--normalBam"
                    },
                    "secondaryFiles": {
                        "pattern": "${if (self.nameext === \".bam\") {return self.basename + \".bai\"} else {return self.basename + \".crai\"}}",
                        "required": null
                    },
                    "id": "#manta_somatic.cwl/normal_bam"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": -7,
                        "prefix": "--outputContig"
                    },
                    "doc": "if true, outputs assembled contig sequences in final VCF files, in the INFO field CONTIG",
                    "id": "#manta_somatic.cwl/output_contigs"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": -4,
                        "prefix": "--referenceFasta"
                    },
                    "id": "#manta_somatic.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": -3,
                        "prefix": "--tumorBam"
                    },
                    "secondaryFiles": {
                        "pattern": "${if (self.nameext === \".bam\") {return self.basename + \".bai\"} else {return self.basename + \".crai\"}}",
                        "required": null
                    },
                    "id": "#manta_somatic.cwl/tumor_bam"
                }
            ],
            "baseCommand": [
                "/usr/bin/python",
                "/usr/bin/manta/bin/configManta.py"
            ],
            "arguments": [
                {
                    "position": -1,
                    "valueFrom": "$(runtime.outdir)",
                    "prefix": "--runDir"
                },
                {
                    "shellQuote": false,
                    "valueFrom": "&&"
                },
                "/usr/bin/python",
                "runWorkflow.py",
                "-m",
                "local",
                {
                    "position": 1,
                    "valueFrom": "$(runtime.cores)",
                    "prefix": "-j"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "results/variants/candidateSV.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#manta_somatic.cwl/all_candidates"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "results/variants/diploidSV.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#manta_somatic.cwl/diploid_variants"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "results/variants/candidateSmallIndels.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#manta_somatic.cwl/small_candidates"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "results/variants/somaticSV.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#manta_somatic.cwl/somatic_variants"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "results/variants/tumorSV.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#manta_somatic.cwl/tumor_only_variants"
                }
            ],
            "id": "#manta_somatic.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Mark duplicates and Sort",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": 40000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/mark_duplicates-cwl:1.0.1"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "markduplicates_helper.sh",
                            "entry": "set -o pipefail\nset -o errexit\n\ndeclare MD_BARCODE_TAG\nif [ ! -z \"$6\" ]; then\n  MD_BARCODE_TAG=\"BARCODE_TAG=$6\"\n/usr/bin/java -Xmx16g -jar /opt/picard/picard.jar MarkDuplicates I=$1 O=/dev/stdout ASSUME_SORT_ORDER=$5 METRICS_FILE=$4 QUIET=true COMPRESSION_LEVEL=0 VALIDATION_STRINGENCY=LENIENT \"$MD_BARCODE_TAG\" | /usr/bin/sambamba sort -t $2 -m 18G -o $3 /dev/stdin\nelse\n  /usr/bin/java -Xmx16g -jar /opt/picard/picard.jar MarkDuplicates I=$1 O=/dev/stdout ASSUME_SORT_ORDER=$5 METRICS_FILE=$4 QUIET=true COMPRESSION_LEVEL=0 VALIDATION_STRINGENCY=LENIENT | /usr/bin/sambamba sort -t $2 -m 18G -o $3 /dev/stdin\nfi\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#mark_duplicates_and_sort.cwl/bam"
                },
                {
                    "type": "string",
                    "default": "queryname",
                    "inputBinding": {
                        "position": 5
                    },
                    "id": "#mark_duplicates_and_sort.cwl/input_sort_order"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "MarkedSorted.bam",
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#mark_duplicates_and_sort.cwl/output_name"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "markduplicates_helper.sh"
            ],
            "arguments": [
                {
                    "position": 2,
                    "valueFrom": "$(runtime.cores)"
                },
                {
                    "position": 4,
                    "valueFrom": "$(inputs.bam.nameroot).mark_dups_metrics.txt"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).mark_dups_metrics.txt"
                    },
                    "id": "#mark_duplicates_and_sort.cwl/metrics_file"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_name)"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#mark_duplicates_and_sort.cwl/sorted_bam"
                }
            ],
            "id": "#mark_duplicates_and_sort.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Sambamba: merge",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 8000,
                    "coresMin": 4
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bam-merge:0.1"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "merge.pl",
                            "entry": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Getopt::Std;\nuse File::Copy;\n\nmy %opts;\ngetopts('t:n:s', \\%opts);\nmy $nthreads = $opts{t} // die 'missing thread count';\nmy $outfilename = $opts{n} // die 'missing output filename';\nmy $sorted = $opts{s};\n\nmy @bams = @ARGV;\ndie 'missing input bams' unless scalar(@bams);\n\n#if there is only one bam, just copy it and index it\nif (scalar(@bams) == 1) {\n    copy($bams[0], $outfilename) or die 'failed to copy file:' . $!;\n} else {\n    if ($sorted) {\n        my $rv = system((qw(/usr/bin/sambamba merge -t)), $nthreads, $outfilename, @bams);\n        $rv == 0 or die 'failed to merge with sambamba';\n    } else { #unsorted bams, use picard\n        my @args = (\n            'OUTPUT=' . $outfilename,\n            'ASSUME_SORTED=true',\n            'USE_THREADING=true',\n            'SORT_ORDER=unsorted',\n            'VALIDATION_STRINGENCY=LENIENT',\n            map { 'INPUT=' . $_ } @bams\n        );\n        my $rv = system((qw(java -jar -Xmx6g /opt/picard/picard.jar MergeSamFiles)), @args);\n        $rv == 0 or die 'failed to merge with picard';\n    }\n}\nif ($sorted) {\n    my $rv = system((qw(/usr/bin/sambamba index)), $outfilename);\n    $rv == 0 or die 'failed to index';\n}\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#merge_bams.cwl/bams"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "merged.bam",
                    "inputBinding": {
                        "prefix": "-n",
                        "position": 1
                    },
                    "id": "#merge_bams.cwl/name"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": false,
                    "inputBinding": {
                        "prefix": "-s",
                        "position": 2
                    },
                    "id": "#merge_bams.cwl/sorted"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "merge.pl"
            ],
            "arguments": [
                "-t",
                "$(runtime.cores)"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.name)"
                    },
                    "id": "#merge_bams.cwl/merged_bam"
                }
            ],
            "id": "#merge_bams.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "vcf merge",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bcftools-cwl:1.12"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "merged",
                    "id": "#merge_vcf.cwl/merged_vcf_basename"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "inputBinding": {
                        "position": 1
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#merge_vcf.cwl/vcfs"
                }
            ],
            "baseCommand": [
                "/opt/bcftools/bin/bcftools",
                "concat"
            ],
            "arguments": [
                "--allow-overlaps",
                "--remove-duplicates",
                "--output-type",
                "z",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.merged_vcf_basename).vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.merged_vcf_basename).vcf.gz"
                    },
                    "id": "#merge_vcf.cwl/merged_vcf"
                }
            ],
            "id": "#merge_vcf.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Mutect2 (GATK 4)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 32000,
                    "tmpdirMin": 100000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "Mutect2.sh",
                            "entry": "set -o pipefail\nset -o errexit\n\nexport tumor_bam=\"$3\"\nexport normal_bam=\"$4\"\n\nNORMAL=`samtools view -H $normal_bam | perl -nE 'say $1 if /^\\@RG.+\\tSM:([ -~]+)/' | head -n 1`\nTUMOR=`samtools view -H $tumor_bam | perl -nE 'say $1 if /^\\@RG.+\\tSM:([ -~]+)/' | head -n 1`\n\n/gatk/gatk Mutect2 --java-options \"-Xmx20g\" -O $1 -R $2 -I $3 -tumor \"$TUMOR\" -I $4 -normal \"$NORMAL\" -L $5 #Running Mutect2.\n/gatk/gatk FilterMutectCalls -R $2 -V mutect.vcf.gz -O mutect.filtered.vcf.gz #Running FilterMutectCalls on the output vcf.\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 5
                    },
                    "id": "#mutect.cwl_2/interval_list"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 4
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl_2/normal_bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#mutect.cwl_2/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl_2/tumor_bam"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "Mutect2.sh"
            ],
            "arguments": [
                {
                    "position": 1,
                    "valueFrom": "mutect.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "mutect.filtered.vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#mutect.cwl_2/vcf"
                }
            ],
            "id": "#mutect.cwl_2"
        },
        {
            "class": "CommandLineTool",
            "label": "sort BAM by name",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 26000,
                    "coresMin": 8
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/sambamba-cwl:0.6.4"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#name_sort.cwl/bam"
                }
            ],
            "baseCommand": [
                "/usr/bin/sambamba",
                "sort"
            ],
            "arguments": [
                "-t",
                {
                    "valueFrom": "$(runtime.cores)"
                },
                "-m",
                "22G",
                "-n",
                "-o",
                {
                    "valueFrom": "$(inputs.bam.nameroot).NameSorted.bam"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).NameSorted.bam"
                    },
                    "id": "#name_sort.cwl/name_sorted_bam"
                }
            ],
            "id": "#name_sort.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Normalize variants",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 9000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#normalize_variants.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-V",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#normalize_variants.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/gatk/gatk",
                "--java-options",
                "-Xmx8g",
                "LeftAlignAndTrimVariants"
            ],
            "arguments": [
                "-O",
                {
                    "valueFrom": "$(runtime.outdir)/normalized.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "outputBinding": {
                        "glob": "normalized.vcf.gz"
                    },
                    "id": "#normalize_variants.cwl/normalized_vcf"
                }
            ],
            "id": "#normalize_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Run optitype on dna samples",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 64000,
                    "coresMin": 4,
                    "tmpdirMin": 20000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/immuno_tools-cwl:1.0.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "File to be HLA-typed",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#optitype_dna.cwl/cram"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "optitype",
                    "doc": "A prefix that will be used to name all files produced by the script",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#optitype_dna.cwl/optitype_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        }
                    ],
                    "doc": "Reference fasta used to make the cram",
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#optitype_dna.cwl/reference"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "/usr/bin/optitype_script.sh"
            ],
            "arguments": [
                {
                    "valueFrom": "$(runtime.tmpdir)"
                },
                {
                    "valueFrom": "$(runtime.outdir)"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.optitype_name)_coverage_plot.pdf"
                    },
                    "id": "#optitype_dna.cwl/optitype_plot"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.optitype_name)_result.tsv"
                    },
                    "id": "#optitype_dna.cwl/optitype_tsv"
                }
            ],
            "id": "#optitype_dna.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Picard MergeVcfs",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 40000
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "merged",
                    "id": "#picard_merge_vcfs.cwl/merged_vcf_basename"
                },
                {
                    "type": [
                        "string",
                        "File",
                        "null"
                    ],
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-D"
                    },
                    "id": "#picard_merge_vcfs.cwl/sequence_dictionary"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File",
                        "inputBinding": {
                            "prefix": "-I"
                        }
                    },
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#picard_merge_vcfs.cwl/vcfs"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx38g",
                "-jar",
                "/gatk/gatk.jar",
                "MergeVcfs"
            ],
            "arguments": [
                "-O",
                "$(inputs.merged_vcf_basename).vcf.gz"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.merged_vcf_basename).vcf.gz"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#picard_merge_vcfs.cwl/merged_vcf"
                }
            ],
            "id": "#picard_merge_vcfs.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "pindel v0.2.5b8",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000,
                    "tmpdirMin": 100000,
                    "coresMin": 4
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.4.2"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "pindel_helper.pl",
                            "entry": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse IO::File;\n\nunless (@ARGV > 5) {\n    die \"Usage: $0 normal.bam tumor.bam insert_size normal_sample_name tumor_sample_name <args>\";\n}\n\nmy ($normal_bam, $tumor_bam, $insert_size, $normal_name, $tumor_name, @args) = @ARGV;\n\nmy $fh = IO::File->new(\"> pindel.config\");\n\n$fh->say(join(\"\\t\", $normal_bam, $insert_size, $normal_name));\n$fh->say(join(\"\\t\", $tumor_bam, $insert_size, $tumor_name));\n$fh->close;\n\nexit system(qw(/usr/bin/pindel -i pindel.config -w 30 -T 4 -o all), @args);\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "-c",
                        "position": 7
                    },
                    "id": "#pindel.cwl_2/chromosome"
                },
                {
                    "type": "int",
                    "default": 400,
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#pindel.cwl_2/insert_size"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#pindel.cwl_2/normal_bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 5
                    },
                    "id": "#pindel.cwl_2/normal_sample_name"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-f",
                        "position": 6
                    },
                    "id": "#pindel.cwl_2/reference"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "-j",
                        "position": 8
                    },
                    "id": "#pindel.cwl_2/region_file"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#pindel.cwl_2/tumor_bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#pindel.cwl_2/tumor_sample_name"
                }
            ],
            "arguments": [
                "/usr/bin/perl",
                "pindel_helper.pl"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "all_D"
                    },
                    "id": "#pindel.cwl_2/deletions"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "all_SI"
                    },
                    "id": "#pindel.cwl_2/insertions"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "all_INV"
                    },
                    "id": "#pindel.cwl_2/inversions"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "all_LI"
                    },
                    "id": "#pindel.cwl_2/long_insertions"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "all_TD"
                    },
                    "id": "#pindel.cwl_2/tandems"
                }
            ],
            "id": "#pindel.cwl_2"
        },
        {
            "class": "CommandLineTool",
            "label": "pindel somatic filter v1",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000
                },
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.3.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#pindel_somatic_filter.cwl/pindel_output_summary"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "id": "#pindel_somatic_filter.cwl/reference"
                }
            ],
            "arguments": [
                "/usr/bin/perl",
                "/usr/bin/write_pindel_filter_config.pl",
                "$(inputs.pindel_output_summary.path)",
                "$(inputs.reference)",
                "$(runtime.outdir)",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "/usr/bin/perl",
                "/usr/bin/somatic_indelfilter.pl",
                "filter.config"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "pindel.out.vcf"
                    },
                    "id": "#pindel_somatic_filter.cwl/vcf"
                }
            ],
            "id": "#pindel_somatic_filter.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "run pVACseq",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "griffithlab/pvactools:2.0.1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000,
                    "coresMin": "$(inputs.n_threads)"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl_2/additional_report_columns/sample_name"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-a"
                    },
                    "id": "#pvacseq.cwl_2/additional_report_columns"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "--allele-specific-binding-thresholds"
                    },
                    "id": "#pvacseq.cwl_2/allele_specific_binding_thresholds"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "inputBinding": {
                        "position": 3,
                        "itemSeparator": ",",
                        "separate": false,
                        "prefix": ""
                    },
                    "id": "#pvacseq.cwl_2/alleles"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "-b"
                    },
                    "id": "#pvacseq.cwl_2/binding_threshold"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "-d"
                    },
                    "id": "#pvacseq.cwl_2/downstream_sequence_length"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-e1",
                        "itemSeparator": ","
                    },
                    "id": "#pvacseq.cwl_2/epitope_lengths_class_i"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-e2",
                        "itemSeparator": ","
                    },
                    "id": "#pvacseq.cwl_2/epitope_lengths_class_ii"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "--exclude-NAs"
                    },
                    "id": "#pvacseq.cwl_2/exclude_nas"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--expn-val"
                    },
                    "id": "#pvacseq.cwl_2/expn_val"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "-s"
                    },
                    "id": "#pvacseq.cwl_2/fasta_size"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "-r"
                    },
                    "id": "#pvacseq.cwl_2/iedb_retries"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#pvacseq.cwl_2/input_vcf"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "-k"
                    },
                    "id": "#pvacseq.cwl_2/keep_tmp_files"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl_2/maximum_transcript_support_level/1",
                                "#pvacseq.cwl_2/maximum_transcript_support_level/2",
                                "#pvacseq.cwl_2/maximum_transcript_support_level/3",
                                "#pvacseq.cwl_2/maximum_transcript_support_level/4",
                                "#pvacseq.cwl_2/maximum_transcript_support_level/5"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--maximum-transcript-support-level"
                    },
                    "id": "#pvacseq.cwl_2/maximum_transcript_support_level"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "-c"
                    },
                    "id": "#pvacseq.cwl_2/minimum_fold_change"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "--n-threads"
                    },
                    "default": 8,
                    "id": "#pvacseq.cwl_2/n_threads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl_2/net_chop_method/cterm",
                                "#pvacseq.cwl_2/net_chop_method/20s"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--net-chop-method"
                    },
                    "id": "#pvacseq.cwl_2/net_chop_method"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--net-chop-threshold"
                    },
                    "id": "#pvacseq.cwl_2/net_chop_threshold"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "--netmhc-stab"
                    },
                    "id": "#pvacseq.cwl_2/netmhc_stab"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "--normal-cov"
                    },
                    "id": "#pvacseq.cwl_2/normal_cov"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "--normal-sample-name"
                    },
                    "id": "#pvacseq.cwl_2/normal_sample_name"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--normal-vaf"
                    },
                    "id": "#pvacseq.cwl_2/normal_vaf"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "--percentile-threshold"
                    },
                    "id": "#pvacseq.cwl_2/percentile_threshold"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-p"
                    },
                    "id": "#pvacseq.cwl_2/phased_proximal_variants_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#pvacseq.cwl_2/prediction_algorithms"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "--run-reference-proteome-similarity"
                    },
                    "id": "#pvacseq.cwl_2/run_reference_proteome_similarity"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#pvacseq.cwl_2/sample_name"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "--tdna-cov"
                    },
                    "id": "#pvacseq.cwl_2/tdna_cov"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--tdna-vaf"
                    },
                    "id": "#pvacseq.cwl_2/tdna_vaf"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#pvacseq.cwl_2/top_score_metric/lowest",
                                "#pvacseq.cwl_2/top_score_metric/median"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-m"
                    },
                    "id": "#pvacseq.cwl_2/top_score_metric"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "prefix": "--trna-cov"
                    },
                    "id": "#pvacseq.cwl_2/trna_cov"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--trna-vaf"
                    },
                    "id": "#pvacseq.cwl_2/trna_vaf"
                }
            ],
            "baseCommand": [
                "ln",
                "-s"
            ],
            "arguments": [
                {
                    "valueFrom": "$TMPDIR",
                    "shellQuote": false
                },
                "/tmp/pvacseq",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "export",
                "TMPDIR=/tmp/pvacseq",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "/usr/local/bin/pvacseq",
                "run",
                "--iedb-install-directory",
                "/opt/iedb",
                "--pass-only",
                {
                    "position": 5,
                    "valueFrom": "pvacseq_predictions"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/combined/$(inputs.sample_name).all_epitopes.aggregated.tsv"
                    },
                    "id": "#pvacseq.cwl_2/combined_aggregated_report"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/combined/$(inputs.sample_name).all_epitopes.tsv"
                    },
                    "id": "#pvacseq.cwl_2/combined_all_epitopes"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/combined/$(inputs.sample_name).filtered.tsv"
                    },
                    "id": "#pvacseq.cwl_2/combined_filtered_epitopes"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/MHC_Class_I/$(inputs.sample_name).all_epitopes.aggregated.tsv"
                    },
                    "id": "#pvacseq.cwl_2/mhc_i_aggregated_report"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/MHC_Class_I/$(inputs.sample_name).all_epitopes.tsv"
                    },
                    "id": "#pvacseq.cwl_2/mhc_i_all_epitopes"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/MHC_Class_I/$(inputs.sample_name).filtered.tsv"
                    },
                    "id": "#pvacseq.cwl_2/mhc_i_filtered_epitopes"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/MHC_Class_II/$(inputs.sample_name).all_epitopes.aggregated.tsv"
                    },
                    "id": "#pvacseq.cwl_2/mhc_ii_aggregated_report"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/MHC_Class_II/$(inputs.sample_name).all_epitopes.tsv"
                    },
                    "id": "#pvacseq.cwl_2/mhc_ii_all_epitopes"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "pvacseq_predictions/MHC_Class_II/$(inputs.sample_name).filtered.tsv"
                    },
                    "id": "#pvacseq.cwl_2/mhc_ii_filtered_epitopes"
                },
                {
                    "type": "Directory",
                    "outputBinding": {
                        "glob": "pvacseq_predictions"
                    },
                    "id": "#pvacseq.cwl_2/pvacseq_predictions"
                }
            ],
            "id": "#pvacseq.cwl_2"
        },
        {
            "class": "CommandLineTool",
            "label": "Combine germline and somatic vcf for pVACseq phasing",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 9000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/gatk-cwl:3.6.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-V",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#pvacseq_combine_variants.cwl/germline_vcf"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#pvacseq_combine_variants.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-V",
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#pvacseq_combine_variants.cwl/somatic_vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx8g",
                "-jar",
                "/opt/GenomeAnalysisTK.jar",
                "-T",
                "CombineVariants"
            ],
            "arguments": [
                "--assumeIdenticalSamples",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/combined_somatic_plus_germline.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "combined_somatic_plus_germline.vcf"
                    },
                    "id": "#pvacseq_combine_variants.cwl/combined_vcf"
                }
            ],
            "id": "#pvacseq_combine_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Read-backed phasing",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 9000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/gatk-cwl:3.6.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-I",
                        "position": 2
                    },
                    "secondaryFiles": {
                        "pattern": "${if (self.nameext === \".bam\") {return self.basename + \".bai\"} else {return self.basename + \".crai\"}}",
                        "required": null
                    },
                    "id": "#read_backed_phasing.cwl/bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#read_backed_phasing.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-V",
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#read_backed_phasing.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx8g",
                "-jar",
                "/opt/GenomeAnalysisTK.jar",
                "-T",
                "ReadBackedPhasing"
            ],
            "arguments": [
                "-L",
                {
                    "valueFrom": "$(inputs.vcf)"
                },
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/phased.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "phased.vcf"
                    },
                    "id": "#read_backed_phasing.cwl/phased_vcf"
                }
            ],
            "id": "#read_backed_phasing.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "remove END INFO tags",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bcftools-cwl:1.12"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#remove_end_tags.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/opt/bcftools/bin/bcftools",
                "annotate"
            ],
            "arguments": [
                "-x",
                "INFO/END",
                "-Oz",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/pindel.noend.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "pindel.noend.vcf.gz"
                    },
                    "id": "#remove_end_tags.cwl/processed_vcf"
                }
            ],
            "id": "#remove_end_tags.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 8000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bcftools-cwl:1.12"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "rename_sample.sh",
                            "entry": "#!/bin/bash\nset -eou pipefail\nbasen=`basename \"$3\"`\nbasen=\"renamed.$basen\"\n\n#escape spaces, otherwise bcftools will try to use them as a delimiter\n#triple backslash to escape within backticks and then again within sed\nold_name=`echo \"$1\" | sed 's/ /\\\\\\ /g'`\nnew_name=`echo \"$2\" | sed 's/ /\\\\\\ /g'`\n\necho \"$old_name $new_name\" > sample_update.txt\n/opt/bcftools/bin/bcftools reheader -s sample_update.txt -o \"$basen\" \"$3\"\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 3
                    },
                    "doc": "vcf file to filter",
                    "id": "#replace_vcf_sample_name.cwl/input_vcf"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 2
                    },
                    "doc": "Sample name to replace the other",
                    "id": "#replace_vcf_sample_name.cwl/new_sample_name"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 1
                    },
                    "doc": "Sample name to be replaced",
                    "id": "#replace_vcf_sample_name.cwl/sample_to_replace"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "rename_sample.sh"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(\"renamed.\" + inputs.input_vcf.basename)"
                    },
                    "id": "#replace_vcf_sample_name.cwl/renamed_vcf"
                }
            ],
            "id": "#replace_vcf_sample_name.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "samtools flagstat",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#samtools_flagstat.cwl/bam"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/samtools",
                "flagstat"
            ],
            "stdout": "$(inputs.bam.basename).flagstat",
            "outputs": [
                {
                    "type": "File",
                    "id": "#samtools_flagstat.cwl/flagstats",
                    "outputBinding": {
                        "glob": "$(inputs.bam.basename).flagstat"
                    }
                }
            ],
            "id": "#samtools_flagstat.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "samtools sort",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000,
                    "coresMin": 1
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 50
                    },
                    "id": "#samtools_sort.cwl/input_bam"
                },
                {
                    "type": "string",
                    "default": "sorted.bam",
                    "id": "#samtools_sort.cwl/output_filename"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/samtools",
                "sort"
            ],
            "arguments": [
                {
                    "prefix": "-o",
                    "valueFrom": "$(runtime.outdir)/$(inputs.output_filename)"
                },
                {
                    "prefix": "-@",
                    "valueFrom": "$(runtime.cores)"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_filename)"
                    },
                    "id": "#samtools_sort.cwl/sorted_bam"
                }
            ],
            "id": "#samtools_sort.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "SelectVariants (GATK 4.1.8.1)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 6000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "prefix": "--exclude-filtered",
                        "position": 4
                    },
                    "id": "#select_variants.cwl/exclude_filtered"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "-L",
                        "position": 3
                    },
                    "id": "#select_variants.cwl/interval_list"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "select_variants",
                    "id": "#select_variants.cwl/output_vcf_basename"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#select_variants.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--sample-name",
                        "position": 5
                    },
                    "doc": "include genotypes from this sample",
                    "id": "#select_variants.cwl/samples_to_include"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#select_variants.cwl/select_type/INDEL",
                                "#select_variants.cwl/select_type/SNP",
                                "#select_variants.cwl/select_type/MIXED",
                                "#select_variants.cwl/select_type/MNP",
                                "#select_variants.cwl/select_type/SYMBOLIC",
                                "#select_variants.cwl/select_type/NO_VARIATION"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-select-type",
                        "position": 6
                    },
                    "doc": "select only a certain type of variants",
                    "id": "#select_variants.cwl/select_type"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#select_variants.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/gatk/gatk",
                "--java-options",
                "-Xmx4g",
                "SelectVariants"
            ],
            "arguments": [
                "-O",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.output_vcf_basename).vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.output_vcf_basename).vcf.gz"
                    },
                    "id": "#select_variants.cwl/filtered_vcf"
                }
            ],
            "id": "#select_variants.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "align with bwa_mem and tag",
            "doc": "Due to workflow runner limitations, use sequence_align_and_tag_adapter.cwl subworkflow to call this",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#sequence_data.yml/sequence_data"
                        },
                        {
                            "$import": "#trimming_options.yml/trimming_options"
                        }
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": 20000
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/alignment_helper-cwl:1.1.0"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "sequence_alignment_helper.sh",
                            "entry": "set -o pipefail\nset -o errexit\nset -o nounset\n\nRUN_TRIMMING=\"false\"\n\nwhile getopts \"b:?1:?2:?g:r:n:t:?o:?\" opt; do\n    case \"$opt\" in\n        b)\n            MODE=bam\n            BAM=\"$OPTARG\"\n            ;;\n        1)\n            MODE=fastq\n            FASTQ1=\"$OPTARG\"\n            ;;\n        2)  \n            MODE=fastq\n            FASTQ2=\"$OPTARG\"\n            ;;\n        g)\n            READGROUP=\"$OPTARG\"\n            ;;\n        r)\n            REFERENCE=\"$OPTARG\"\n            ;;\n        n)\n            NTHREADS=\"$OPTARG\"\n            ;;\n        t)\n            RUN_TRIMMING=\"true\"\n            TRIMMING_ADAPTERS=\"$OPTARG\"\n            ;;\n        o)\n            RUN_TRIMMING=\"true\"\n            TRIMMING_ADAPTER_MIN_OVERLAP=\"$OPTARG\"\n            ;;\n    esac\ndone\n\nif [[ \"$MODE\" == 'fastq' ]]; then\n    if [[ \"$RUN_TRIMMING\" == 'false' ]]; then\n        /usr/local/bin/bwa mem -K 100000000 -t \"$NTHREADS\" -Y -R \"$READGROUP\" \"$REFERENCE\" \"$FASTQ1\" \"$FASTQ2\" | /usr/local/bin/samblaster -a --addMateTags | /opt/samtools/bin/samtools view -b -S /dev/stdin\n    else\n        /opt/flexbar/flexbar --adapters \"$TRIMMING_ADAPTERS\" --reads \"$FASTQ1\" --reads2 \"$FASTQ2\" --adapter-trim-end LTAIL --adapter-min-overlap \"$TRIMMING_ADAPTER_MIN_OVERLAP\" --adapter-error-rate 0.1 --max-uncalled 300 --stdout-reads \\\n          | /usr/local/bin/bwa mem -K 100000000 -t \"$NTHREADS\" -Y -p -R \"$READGROUP\" \"$REFERENCE\" /dev/stdin | /usr/local/bin/samblaster -a --addMateTags | /opt/samtools/bin/samtools view -b -S /dev/stdin\n    fi\nfi\nif [[ \"$MODE\" == 'bam' ]]; then\n    if [[ \"$RUN_TRIMMING\" == 'false' ]]; then\n        /usr/bin/java -Xmx4g -jar /opt/picard/picard.jar SamToFastq I=\"$BAM\" INTERLEAVE=true INCLUDE_NON_PF_READS=true FASTQ=/dev/stdout | /usr/local/bin/bwa mem -K 100000000 -t \"$NTHREADS\" -Y -p -R \"$READGROUP\" \"$REFERENCE\" /dev/stdin | /usr/local/bin/samblaster -a --addMateTags | /opt/samtools/bin/samtools view -b -S /dev/stdin\n    else\n       /usr/bin/java -Xmx4g -jar /opt/picard/picard.jar SamToFastq I=\"$BAM\" INTERLEAVE=true INCLUDE_NON_PF_READS=true FASTQ=/dev/stdout \\\n         | /opt/flexbar/flexbar --adapters \"$TRIMMING_ADAPTERS\" --reads - --interleaved --adapter-trim-end LTAIL --adapter-min-overlap \"$TRIMMING_ADAPTER_MIN_OVERLAP\" --adapter-error-rate 0.1 --max-uncalled 300 --stdout-reads \\\n         | /usr/local/bin/bwa mem -K 100000000 -t \"$NTHREADS\" -Y -p -R \"$READGROUP\" \"$REFERENCE\" /dev/stdin | /usr/local/bin/samblaster -a --addMateTags | /opt/samtools/bin/samtools view -b -S /dev/stdin\n    fi\nfi\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "-b"
                    },
                    "id": "#sequence_align_and_tag.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "-1"
                    },
                    "id": "#sequence_align_and_tag.cwl/fastq1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "-2"
                    },
                    "id": "#sequence_align_and_tag.cwl/fastq2"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "-g"
                    },
                    "id": "#sequence_align_and_tag.cwl/readgroup"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".amb",
                            "required": null
                        },
                        {
                            "pattern": ".ann",
                            "required": null
                        },
                        {
                            "pattern": ".bwt",
                            "required": null
                        },
                        {
                            "pattern": ".pac",
                            "required": null
                        },
                        {
                            "pattern": ".sa",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 4,
                        "prefix": "-r"
                    },
                    "doc": "bwa-indexed reference file",
                    "id": "#sequence_align_and_tag.cwl/reference"
                },
                {
                    "type": [
                        "#trimming_options.yml/trimming_options",
                        "null"
                    ],
                    "inputBinding": {
                        "valueFrom": "$( ['-t', self.adapters.path, '-o', self.min_overlap] )"
                    },
                    "id": "#sequence_align_and_tag.cwl/trimming"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "sequence_alignment_helper.sh"
            ],
            "arguments": [
                {
                    "valueFrom": "$(runtime.cores)",
                    "position": 5,
                    "prefix": "-n"
                }
            ],
            "stdout": "refAlign.bam",
            "outputs": [
                {
                    "type": "File",
                    "id": "#sequence_align_and_tag.cwl/aligned_bam",
                    "outputBinding": {
                        "glob": "refAlign.bam"
                    }
                }
            ],
            "id": "#sequence_align_and_tag.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "create filtered VCF",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 6000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/gatk-cwl:3.6.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--mask",
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#set_filter_status.cwl/filtered_vcf"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#set_filter_status.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#set_filter_status.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx4g",
                "-jar",
                "/opt/GenomeAnalysisTK.jar",
                "-T",
                "VariantFiltration"
            ],
            "arguments": [
                "--maskName",
                "processSomatic",
                "--filterNotInMask",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/output.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "output.vcf.gz"
                    },
                    "id": "#set_filter_status.cwl/merged_vcf"
                }
            ],
            "id": "#set_filter_status.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Sort VCF",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 18000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/picard:2.23.6"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "SEQUENCE_DICTIONARY="
                    },
                    "id": "#sort_vcf.cwl/reference_dict"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "I="
                    },
                    "id": "#sort_vcf.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/java",
                "-Xmx16g",
                "-jar",
                "/usr/picard/picard.jar",
                "SortVcf"
            ],
            "arguments": [
                "O=",
                {
                    "valueFrom": "$(runtime.outdir)/sorted.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "sorted.vcf"
                    },
                    "id": "#sort_vcf.cwl/sorted_vcf"
                }
            ],
            "id": "#sort_vcf.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 6000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/picard:2.24.2"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "split_interval_list_helper.pl",
                            "entry": "use File::Copy;\n\ndie \"wrong number of inputs\" unless scalar(@ARGV) == 3;\nmy ($output_dir, $interval_list, $scatter_count) = @ARGV;\n\nmy $i = 1;\n\nif ($scatter_count == 1) {\n    File::Copy::copy($interval_list,qq{$i.interval_list});\n} else {\n\n    my $retval = system('/usr/bin/java', '-jar', '/usr/picard/picard.jar', 'IntervalListTools', 'OUTPUT='.$output_dir, 'INPUT='.$interval_list, 'SCATTER_COUNT='. $scatter_count);\n    exit $retval if $retval != 0;\n\n    for (glob('*/scattered.interval_list')) {\n        #create unique names and relocate all the scattered intervals to a single directory\n        File::Copy::move($_, qq{$i.interval_list});\n        $i++\n    }\n}\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#split_interval_list.cwl/interval_list"
                },
                {
                    "type": "int",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#split_interval_list.cwl/scatter_count"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "split_interval_list_helper.pl"
            ],
            "arguments": [
                {
                    "valueFrom": "$(runtime.outdir)"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*.interval_list"
                    },
                    "id": "#split_interval_list.cwl/split_interval_lists"
                }
            ],
            "id": "#split_interval_list.cwl"
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 6000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.4.2"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "separate": false,
                        "position": 1
                    },
                    "id": "#split_interval_list_to_bed.cwl/interval_list"
                },
                {
                    "type": "int",
                    "inputBinding": {
                        "prefix": "SCATTER_COUNT=",
                        "separate": false,
                        "position": 2
                    },
                    "id": "#split_interval_list_to_bed.cwl/scatter_count"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "/usr/bin/split_interval_list_to_bed_helper.pl"
            ],
            "arguments": [
                {
                    "valueFrom": "OUTPUT=$(runtime.outdir)"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*.interval.bed"
                    },
                    "id": "#split_interval_list_to_bed.cwl/split_beds"
                }
            ],
            "id": "#split_interval_list_to_bed.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Staged Renamer",
            "doc": "Renames a file by staging and then `mv`ing it.  A workaround for workflow engines that don't support rename.cwl.  If running in cwltool, use the other one instead.",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000,
                    "coresMin": 1
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:bionic"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        "$(inputs.original)"
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#staged_rename.cwl/name"
                },
                {
                    "type": "File",
                    "id": "#staged_rename.cwl/original"
                }
            ],
            "baseCommand": [
                "/bin/mv"
            ],
            "arguments": [
                "$(inputs.original.basename)",
                "$(inputs.name)"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.name)"
                    },
                    "id": "#staged_rename.cwl/replacement"
                }
            ],
            "id": "#staged_rename.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "strelka 2.9.9",
            "requirements": [
                {
                    "dockerPull": "mgibio/strelka-cwl:2.9.9",
                    "class": "DockerRequirement"
                },
                {
                    "coresMin": 4,
                    "ramMin": 4000,
                    "class": "ResourceRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#strelka.cwl/cpu_reserved"
                },
                {
                    "type": "boolean",
                    "inputBinding": {
                        "prefix": "--exome",
                        "position": 6
                    },
                    "id": "#strelka.cwl/exome_mode"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--normalBam=",
                        "separate": false,
                        "position": 4
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#strelka.cwl/normal_bam"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--referenceFasta=",
                        "separate": false,
                        "position": 5
                    },
                    "id": "#strelka.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--tumorBam=",
                        "separate": false,
                        "position": 3
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": null
                        },
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#strelka.cwl/tumor_bam"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "/usr/bin/docker_helper.pl"
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.cpu_reserved)",
                    "position": 1
                },
                {
                    "valueFrom": "$(runtime.outdir)",
                    "position": 2
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "results/variants/somatic.indels.vcf.gz"
                    },
                    "id": "#strelka.cwl/indels"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "results/variants/somatic.snvs.vcf.gz"
                    },
                    "id": "#strelka.cwl/snvs"
                }
            ],
            "id": "#strelka.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "StringTie",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000,
                    "coresMin": 12
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/stringtie:2.1.4--h7e0af3c_0"
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#stringtie.cwl/bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-G",
                        "position": 2
                    },
                    "id": "#stringtie.cwl/reference_annotation"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "-l",
                        "position": 3
                    },
                    "id": "#stringtie.cwl/sample_name"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#stringtie.cwl/strand/first",
                                "#stringtie.cwl/strand/second",
                                "#stringtie.cwl/strand/unstranded"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "valueFrom": "${\n    if (inputs.strand) {\n        if (inputs.strand == 'first') {\n            return ['--rf'];\n        } else if (inputs.strand == 'second') {\n            return ['--fr'];\n        } else {\n            return [];\n        }\n    } else {\n            return []\n    }\n}\n",
                        "position": 1
                    },
                    "id": "#stringtie.cwl/strand"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/stringtie"
            ],
            "arguments": [
                "-o",
                "$(runtime.outdir)/stringtie_transcripts.gtf",
                "-A",
                "$(runtime.outdir)/stringtie_gene_expression.tsv",
                "-p",
                "$(runtime.cores)",
                "-e"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "stringtie_gene_expression.tsv"
                    },
                    "id": "#stringtie.cwl/gene_expression_tsv"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "stringtie_transcripts.gtf"
                    },
                    "id": "#stringtie.cwl/transcript_gtf"
                }
            ],
            "id": "#stringtie.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Kallisto: TranscriptToGene",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 2000,
                    "coresMin": 1
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/rnaseq:1.0.0"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#transcript_to_gene.cwl/gene_transcript_lookup_table"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#transcript_to_gene.cwl/transcript_table_h5"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/Rscript"
            ],
            "arguments": [
                "/usr/src/transcript_to_gene.R"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "gene_abundance.tsv"
                    },
                    "id": "#transcript_to_gene.cwl/gene_abundance"
                }
            ],
            "id": "#transcript_to_gene.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Trim FASTQ (flexbar)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 16000,
                    "tmpdirMin": 25000,
                    "coresMin": 4
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/bisulfite:v1.4"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "int",
                    "inputBinding": {
                        "prefix": "--adapter-min-overlap",
                        "position": 3
                    },
                    "id": "#trim_fastq.cwl/adapter_min_overlap"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--adapter-trim-end",
                        "position": 2
                    },
                    "id": "#trim_fastq.cwl/adapter_trim_end"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--adapters",
                        "position": 1
                    },
                    "id": "#trim_fastq.cwl/adapters"
                },
                {
                    "type": "int",
                    "inputBinding": {
                        "prefix": "--max-uncalled",
                        "position": 5
                    },
                    "id": "#trim_fastq.cwl/max_uncalled"
                },
                {
                    "type": "int",
                    "inputBinding": {
                        "prefix": "--min-read-length",
                        "position": 6
                    },
                    "id": "#trim_fastq.cwl/min_readlength"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--reads",
                        "position": 7
                    },
                    "id": "#trim_fastq.cwl/reads1"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--reads2",
                        "position": 8
                    },
                    "id": "#trim_fastq.cwl/reads2"
                }
            ],
            "baseCommand": [
                "/opt/flexbar/flexbar"
            ],
            "arguments": [
                "--target",
                {
                    "valueFrom": "$(runtime.outdir)/trimmed_read"
                },
                "--threads",
                {
                    "valueFrom": "$(runtime.cores)"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "trimmed_read_1.fastq"
                    },
                    "id": "#trim_fastq.cwl/fastq1"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "trimmed_read_2.fastq"
                    },
                    "id": "#trim_fastq.cwl/fastq2"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "trimmed_read_*.fastq"
                    },
                    "id": "#trim_fastq.cwl/fastqs"
                }
            ],
            "id": "#trim_fastq.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "SelectVariants (GATK 4.1.8.1)",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 6000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "broadinstitute/gatk:4.1.8.1"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "-F"
                        }
                    },
                    "default": [
                        "CHROM",
                        "POS",
                        "ID",
                        "REF",
                        "ALT",
                        "set"
                    ],
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#variants_to_table.cwl/fields"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "-GF"
                        }
                    },
                    "default": [
                        "GT",
                        "AD",
                        "DP",
                        "AF"
                    ],
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#variants_to_table.cwl/genotype_fields"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-R",
                        "position": 1
                    },
                    "id": "#variants_to_table.cwl/reference"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant",
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#variants_to_table.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/gatk/gatk",
                "--java-options",
                "-Xmx4g",
                "VariantsToTable"
            ],
            "arguments": [
                "-O",
                {
                    "valueFrom": "$(runtime.outdir)/variants.tsv"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "variants.tsv"
                    },
                    "id": "#variants_to_table.cwl/variants_tsv"
                }
            ],
            "id": "#variants_to_table.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "varscan v2.4.2 processSomatic",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.3.1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "prefix": "--max-normal-freq",
                        "position": 2
                    },
                    "id": "#varscan_process_somatic.cwl/max_normal_freq"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "valueFrom": "$(runtime.outdir)/$(self.basename)",
                        "position": 1
                    },
                    "id": "#varscan_process_somatic.cwl/variants"
                }
            ],
            "arguments": [
                "cp",
                "$(inputs.variants.path)",
                "$(runtime.outdir)/$(inputs.variants.basename)",
                {
                    "valueFrom": " && ",
                    "shellQuote": false
                },
                "java",
                "-jar",
                "/opt/varscan/VarScan.jar",
                "processSomatic"
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.Germline.vcf"
                    },
                    "id": "#varscan_process_somatic.cwl/germline"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.Germline.hc.vcf"
                    },
                    "id": "#varscan_process_somatic.cwl/germline_hc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.LOH.vcf"
                    },
                    "id": "#varscan_process_somatic.cwl/loh"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.LOH.hc.vcf"
                    },
                    "id": "#varscan_process_somatic.cwl/loh_hc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.Somatic.vcf"
                    },
                    "id": "#varscan_process_somatic.cwl/somatic"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.Somatic.hc.vcf"
                    },
                    "id": "#varscan_process_somatic.cwl/somatic_hc"
                }
            ],
            "id": "#varscan_process_somatic.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "varscan v2.4.2 somatic",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 12000,
                    "coresMin": 2
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/cle:v1.3.1"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "varscan_helper.sh",
                            "entry": "#!/bin/bash\n\nset -o errexit\nset -o nounset\n\nif [ $# -lt 7 ]\nthen\n    echo \"Usage: $0 [TUMOR_BAM] [NORMAL_BAM] [REFERENCE] [STRAND_FILTER] [MIN_COVERAGE] [MIN_VAR_FREQ] [P_VALUE] [roi_bed?]\"\n    exit 1\nfi\n\nTUMOR_BAM=\"$1\"\nNORMAL_BAM=\"$2\"\nREFERENCE=\"$3\"\nSTRAND_FILTER=\"$4\"\nMIN_COVERAGE=\"$5\"\nMIN_VAR_FREQ=\"$6\"\nP_VALUE=\"$7\"\nOUTPUT=\"${HOME}/output\"\n\nif [ -z ${8+x} ]\nthen\n    #run without ROI\n    java -jar /opt/varscan/VarScan.jar somatic \\\n        <(/opt/samtools/bin/samtools mpileup --no-baq -f \"$REFERENCE\" \"$NORMAL_BAM\" \"$TUMOR_BAM\") \\\n        $OUTPUT \\\n        --strand-filter $STRAND_FILTER \\\n        --min-coverage $MIN_COVERAGE \\\n        --min-var-freq $MIN_VAR_FREQ \\\n        --p-value $P_VALUE \\\n        --mpileup 1 \\\n        --output-vcf\nelse\n    ROI_BED=\"$8\"\n    java -jar /opt/varscan/VarScan.jar somatic \\\n        <(/opt/samtools/bin/samtools mpileup --no-baq -l \"$ROI_BED\" -f \"$REFERENCE\" \"$NORMAL_BAM\" \"$TUMOR_BAM\") \\\n        $OUTPUT \\\n        --strand-filter $STRAND_FILTER \\\n        --min-coverage $MIN_COVERAGE \\\n        --min-var-freq $MIN_VAR_FREQ \\\n        --p-value $P_VALUE \\\n        --mpileup 1 \\\n        --output-vcf\nfi\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "inputBinding": {
                        "position": 5
                    },
                    "id": "#varscan_somatic.cwl/min_coverage"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.1,
                    "inputBinding": {
                        "position": 6
                    },
                    "id": "#varscan_somatic.cwl/min_var_freq"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#varscan_somatic.cwl/normal_bam"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.99,
                    "inputBinding": {
                        "position": 7
                    },
                    "id": "#varscan_somatic.cwl/p_value"
                },
                {
                    "type": [
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#varscan_somatic.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 8
                    },
                    "id": "#varscan_somatic.cwl/roi_bed"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#varscan_somatic.cwl/strand_filter"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": null
                        }
                    ],
                    "id": "#varscan_somatic.cwl/tumor_bam"
                }
            ],
            "baseCommand": "varscan_helper.sh",
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "output.indel.vcf"
                    },
                    "id": "#varscan_somatic.cwl/indels"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "output.snp.vcf"
                    },
                    "id": "#varscan_somatic.cwl/snvs"
                }
            ],
            "id": "#varscan_somatic.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "add expression info to vcf",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "griffithlab/vatools:4.1.0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#vcf_expression_annotator.cwl/data_type"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#vcf_expression_annotator.cwl/expression_file"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#vcf_expression_annotator.cwl/expression_tool"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "-s"
                    },
                    "id": "#vcf_expression_annotator.cwl/sample_name"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#vcf_expression_annotator.cwl/vcf"
                }
            ],
            "baseCommand": [
                "vcf-expression-annotator"
            ],
            "arguments": [
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/annotated.expression.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "annotated.expression.vcf.gz"
                    },
                    "id": "#vcf_expression_annotator.cwl/annotated_expression_vcf"
                }
            ],
            "id": "#vcf_expression_annotator.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "add bam_readcount info to vcf",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "griffithlab/vatools:4.1.0"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#vcf_readcount_annotator.cwl_2/bam_readcount_tsv"
                },
                {
                    "type": [
                        {
                            "type": "enum",
                            "symbols": [
                                "#vcf_readcount_annotator.cwl_2/data_type/DNA",
                                "#vcf_readcount_annotator.cwl_2/data_type/RNA"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#vcf_readcount_annotator.cwl_2/data_type"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "-s"
                    },
                    "id": "#vcf_readcount_annotator.cwl_2/sample_name"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#vcf_readcount_annotator.cwl_2/variant_type/snv",
                                "#vcf_readcount_annotator.cwl_2/variant_type/indel",
                                "#vcf_readcount_annotator.cwl_2/variant_type/all"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-t"
                    },
                    "id": "#vcf_readcount_annotator.cwl_2/variant_type"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#vcf_readcount_annotator.cwl_2/vcf"
                }
            ],
            "baseCommand": [
                "vcf-readcount-annotator"
            ],
            "arguments": [
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/annotated.bam_readcount.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "annotated.bam_readcount.vcf.gz"
                    },
                    "id": "#vcf_readcount_annotator.cwl_2/annotated_bam_readcount_vcf"
                }
            ],
            "id": "#vcf_readcount_annotator.cwl_2"
        },
        {
            "class": "CommandLineTool",
            "label": "Sanitize a VCF",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000,
                    "coresMin": 1
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/samtools-cwl:1.0.0"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "sanitize.sh",
                            "entry": "set -eou pipefail\n\n# 1) removes lines containing non ACTGN bases, as they conflict with the VCF spec\n# and cause GATK to choke\n# 2) removes mutect-specific format tags containing underscores, which are likewise\n# illegal in the vcf spec\nbase=`basename $1`\noutbase=`echo $base | perl -pe 's/.vcf(.gz)?$//g'`\necho \"$1   $base    $outbase\"\nif [[ \"$1\" =~ \".gz\" ]];then\n    #gzipped input\n    gunzip -c \"$1\" | perl -a -F'\\t' -ne 'print $_ if $_ =~ /^#/ || $F[3] !~ /[^ACTGNactgn]/' | sed -e \"s/ALT_F1R2/ALTF1R2/g;s/ALT_F2R1/ALTF2R1/g;s/REF_F1R2/REFF1R2/g;s/REF_F2R1/REFF2R1/g\" >$outbase.sanitized.vcf\nelse\n    #non-gzipped input\n    cat \"$1\" | perl -a -F'\\t' -ne 'print $_ if $_ =~ /^#/ || $F[3] !~ /[^ACTGNactgn]/' | sed -e \"s/ALT_F1R2/ALTF1R2/g;s/ALT_F2R1/ALTF2R1/g;s/REF_F1R2/REFF1R2/g;s/REF_F2R1/REFF2R1/g\" >$outbase.sanitized.vcf\nfi\n/opt/htslib/bin/bgzip $outbase.sanitized.vcf\n/usr/bin/tabix -p vcf $outbase.sanitized.vcf.gz\n"
                        }
                    ]
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#vcf_sanitize.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "sanitize.sh"
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "outputBinding": {
                        "glob": "${\n  if(inputs.vcf.nameext === \".gz\"){\n    return inputs.vcf.nameroot.replace(/.vcf$/, \"\") + \".sanitized.vcf.gz\";\n  }\n  return inputs.vcf.nameroot + \".sanitized.vcf.gz\";\n}\n"
                    },
                    "id": "#vcf_sanitize.cwl/sanitized_vcf"
                }
            ],
            "id": "#vcf_sanitize.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "Ensembl Variant Effect Predictor",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#vep_custom_annotation.yml/vep_custom_annotation"
                        }
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 4,
                    "ramMin": 64000,
                    "tmpdirMin": 25000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/vep_helper-cwl:vep_101.0_v2"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "string",
                        "Directory"
                    ],
                    "inputBinding": {
                        "prefix": "--dir",
                        "position": 4
                    },
                    "id": "#vep.cwl/cache_dir"
                },
                {
                    "type": "boolean",
                    "inputBinding": {
                        "prefix": "--coding_only",
                        "position": 3
                    },
                    "default": false,
                    "id": "#vep.cwl/coding_only"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "#vep_custom_annotation.yml/vep_custom_annotation",
                            "label": "custom type, check types directory for input format",
                            "inputBinding": {
                                "valueFrom": "${\n    return [self.annotation.check_existing ? '--check_existing' : '',\n      '--custom',\n      [self.annotation.file.path,\n      self.annotation.name,\n      self.annotation.data_format,\n      self.method,\n      self.force_report_coordinates ? 1 : 0,\n      self.annotation.vcf_fields ? self.annotation.vcf_fields : ''\n      ].filter(String).join(',')\n    ].filter(String)\n}\n",
                                "position": 6
                            }
                        }
                    ],
                    "id": "#vep.cwl/custom_annotations"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--assembly",
                        "position": 10
                    },
                    "doc": "genome assembly to use in vep. Examples: 'GRCh38' or 'GRCm38'",
                    "id": "#vep.cwl/ensembl_assembly"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--species",
                        "position": 12
                    },
                    "doc": "ensembl species - Must be present in the cache directory. Examples: 'homo_sapiens' or 'mus_musculus'",
                    "id": "#vep.cwl/ensembl_species"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--cache_version",
                        "position": 11
                    },
                    "doc": "ensembl version - Must be present in the cache directory. Example: '95'",
                    "id": "#vep.cwl/ensembl_version"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "inputBinding": {
                        "prefix": "--everything",
                        "position": 9
                    },
                    "id": "#vep.cwl/everything"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#vep.cwl/pick/pick",
                                "#vep.cwl/pick/flag_pick",
                                "#vep.cwl/pick/pick_allele",
                                "#vep.cwl/pick/per_gene",
                                "#vep.cwl/pick/pick_allele_gene",
                                "#vep.cwl/pick/flag_pick_allele",
                                "#vep.cwl/pick/flag_pick_allele_gene"
                            ]
                        }
                    ],
                    "default": "flag_pick",
                    "inputBinding": {
                        "prefix": "--",
                        "separate": false,
                        "position": 7
                    },
                    "id": "#vep.cwl/pick"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "--plugin"
                        }
                    },
                    "inputBinding": {
                        "position": 8
                    },
                    "id": "#vep.cwl/plugins"
                },
                {
                    "type": [
                        "null",
                        "string",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        },
                        {
                            "pattern": "^.dict",
                            "required": null
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--fasta",
                        "position": 7
                    },
                    "id": "#vep.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "--synonyms",
                        "position": 2
                    },
                    "id": "#vep.cwl/synonyms_file"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-i",
                        "position": 1
                    },
                    "id": "#vep.cwl/vcf"
                }
            ],
            "baseCommand": [
                "/usr/bin/perl",
                "-I",
                "/opt/lib/perl/VEP/Plugins",
                "/usr/bin/variant_effect_predictor.pl"
            ],
            "arguments": [
                "--format",
                "vcf",
                "--vcf",
                "--fork",
                "4",
                "--term",
                "SO",
                "--transcript_version",
                "--offline",
                "--cache",
                "--symbol",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.vcf.nameroot)_annotated.vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.vcf.nameroot)_annotated.vcf"
                    },
                    "id": "#vep.cwl/annotated_vcf"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.vcf.nameroot)_annotated.vcf_summary.html"
                    },
                    "id": "#vep.cwl/vep_summary"
                }
            ],
            "id": "#vep.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "verify BAM ID",
            "requirements": [
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "mgibio/verify_bam_id-cwl:1.1.3"
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#verify_bam_id.cwl/bam"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--vcf"
                    },
                    "id": "#verify_bam_id.cwl/vcf"
                }
            ],
            "baseCommand": "/usr/local/bin/verifyBamID",
            "arguments": [
                "--out",
                {
                    "valueFrom": "$(runtime.outdir)/$(inputs.bam.nameroot).VerifyBamId"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).VerifyBamId.depthSM"
                    },
                    "id": "#verify_bam_id.cwl/verify_bam_id_depth"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam.nameroot).VerifyBamId.selfSM"
                    },
                    "id": "#verify_bam_id.cwl/verify_bam_id_metrics"
                }
            ],
            "id": "#verify_bam_id.cwl"
        },
        {
            "class": "CommandLineTool",
            "label": "run vt decompose",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/vt:0.57721--hf74b74d_1"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000
                }
            ],
            "hints": [
                {
                    "loadListing": "deep_listing",
                    "class": "LoadListingRequirement"
                },
                {
                    "networkAccess": true,
                    "class": "NetworkAccess"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".tbi",
                            "required": null
                        }
                    ],
                    "id": "#vt_decompose.cwl/vcf"
                }
            ],
            "baseCommand": [
                "vt",
                "decompose"
            ],
            "arguments": [
                "-s",
                "-o",
                {
                    "valueFrom": "$(runtime.outdir)/decomposed.vcf.gz"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "decomposed.vcf.gz"
                    },
                    "id": "#vt_decompose.cwl/decomposed_vcf"
                }
            ],
            "id": "#vt_decompose.cwl"
        }
    ],
    "cwlVersion": "v1.2"
}