{
  "arguments": [
    {
      "position": 0,
      "shellQuote": false,
      "valueFrom": "|"
    },
    {
      "position": 1,
      "valueFrom": "grep"
    },
    {
      "position": 2,
      "valueFrom": "secondary"
    }
  ],
  "baseCommand": [
    "ls"
  ],
  "class": "CommandLineTool",
  "cwlVersion": "v1.2",
  "doc": "Simple test to confirm the implementation of expressions returning a File within a CommandInputParameter.secondaryFile field.\n\nUse GREP to filter the result from ls to ensure we only get the secondary files in there.\n\nRelated links:\n- Issue: https://github.com/common-workflow-language/cwltool/issues/1232\n- PR: https://github.com/common-workflow-language/cwltool/pull/1233\n- Discourse: https://cwl.discourse.group/t/ask-cwl-to-rename-a-secondary-file/72\n",
  "hints": {
    "LoadListingRequirement": {
      "loadListing": "deep_listing"
    },
    "NetworkAccess": {
      "networkAccess": true
    }
  },
  "id": "rename-inputs",
  "inputs": [
    {
      "doc": "This input will with a secondary file `.accessory`. You could create these files (and its accessory) with:\n```bash\ntouch secondary_file_test.txt\ntouch secondary_file_test.txt.accessory\n```\n",
      "id": "inputWithSecondary",
      "secondaryFiles": [
        ".accessory",
        "${\n  function resolveSecondary(base, secPattern) {\n    if (secPattern[0] == '^') {\n      var spl = base.split('.');\n      var endIndex = spl.length > 1 ? spl.length - 1 : 1;\n      return resolveSecondary(spl.slice(undefined, endIndex).join(\".\"), secPattern.slice(1));\n    }\n    return base + secPattern;\n  }\n  return [{\n      \"class\": \"File\",\n      \"location\": self.secondaryFiles[0].location,\n      \"basename\": resolveSecondary(self.basename, '^.accessory')\n  }];\n}\n"
      ],
      "type": "File"
    }
  ],
  "outputs": [
    {
      "id": "output_file",
      "type": "stdout"
    }
  ],
  "requirements": [
    {
      "class": "InlineJavascriptRequirement"
    },
    {
      "class": "ShellCommandRequirement"
    },
    {
      "class": "InitialWorkDirRequirement",
      "listing": [
        "$(inputs.inputWithSecondary)"
      ]
    }
  ],
  "stdout": "result"
}
